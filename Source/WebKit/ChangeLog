2022-03-22  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Make GraphicsContextState a class
        https://bugs.webkit.org/show_bug.cgi?id=238192

        Reviewed by Simon Fraser.

        * GPUProcess/graphics/RemoteDisplayListRecorder.cpp:
        (WebKit::RemoteDisplayListRecorder::setState):
        * Shared/cairo/ShareableBitmapCairo.cpp:
        (WebKit::ShareableBitmap::paint):
        * WebProcess/WebCoreSupport/gtk/WebDragClientGtk.cpp:
        (WebKit::convertCairoSurfaceToShareableBitmap):

2022-03-22  Tim Horton  <timothy_horton@apple.com>

        Prefer WK_EXTERN to WK_EXPORT in Cocoa API headers
        https://bugs.webkit.org/show_bug.cgi?id=238129

        Reviewed by Wenson Hsieh.

        * UIProcess/API/Cocoa/WKBrowsingContextPolicyDelegate.h:
        * UIProcess/API/Cocoa/WKMenuItemIdentifiersPrivate.h:
        * UIProcess/API/Cocoa/_WKElementAction.h:
        * UIProcess/API/Cocoa/_WKErrorRecoveryAttempting.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.h:
        WK_EXPORT comes from WKDeclarationSpecifiers.h, which is a legacy C SPI header.
        WK_EXTERN comes from WKFoundation.h, part of the modern public API.
        We should prefer the modern version in Cocoa-only headers (even in private headers).

2022-03-22  Chris Dumez  <cdumez@apple.com>

        REGRESSION (iOS 15.1 / r280824) QuickLook - model not loading when passing extra parameters
        https://bugs.webkit.org/show_bug.cgi?id=236069
        <rdar://problem/88461772>

        Reviewed by Darin Adler.

        Fix theoretical blob data leak. A WebContent process could create several BlobURLHandles for
        the same blob URL. This would result in several calls to NetworkConnectionToWebProcess::registerBlobURLHandle()
        for the same URL and several calls to to BlobRegistryImpl::registerBlobURLHandle() for the
        same URL as well. BlobRegistryImpl is using a HashCountedSet for m_blobReferences in order
        to deal with this fact. However, NetworkConnectionToWebProcess was using a simple HashSet
        for m_blobURLHandles. As a result, if the WebContent process would exit and didClose()
        would get called, the NetworkConnectionToWebProcess may call BlobRegistryImpl::unregisterBlobURLHandle()
        only once even though the WebContent process had several handles for this URL, which would
        not fully remove the URL from BlobRegistryImpl's HashCountedSet. To address the issue,
        NetworkConnectionToWebProcess::m_blobURLHandles is now a HashCountedSet too and we call
        BlobRegistryImpl::unregisterBlobURLHandle() as many times as needed in didClose().

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::didClose):
        * NetworkProcess/NetworkConnectionToWebProcess.h:

2022-03-22  Youenn Fablet  <youenn@apple.com>

        LibWebRTCCodecsProxy.mm and SharedVideoFrame.cpp do not need to be built as part of WebContent executable
        https://bugs.webkit.org/show_bug.cgi?id=238002

        Reviewed by Eric Carlson.

        * WebKit.xcodeproj/project.pbxproj:

2022-03-22  Per Arne Vollan  <pvollan@apple.com>

        Enable content filtering in the Network process
        https://bugs.webkit.org/show_bug.cgi?id=238156

        Reviewed by Geoffrey Garen.

        Remove code associated with Network extension sandbox extensions.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * Shared/Cocoa/LoadParametersCocoa.mm:
        (WebKit::LoadParameters::platformEncode const):
        (WebKit::LoadParameters::platformDecode):
        * Shared/LoadParameters.h:
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::addPlatformLoadParameters):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::reloadAfterUnblockedContentFilter): Deleted.
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared):
        (WebKit::WebPageProxy::decidePolicyForNewWindowAction):
        (WebKit::WebPageProxy::decidePolicyForResponseShared):
        * UIProcess/WebPageProxy.h:
        * WebProcess/Network/WebResourceLoader.cpp:
        (WebKit::WebResourceLoader::contentFilterDidBlockLoad):
        (WebKit::WebResourceLoader::cancelMainResourceLoadForContentFilter): Deleted.
        * WebProcess/Network/WebResourceLoader.h:
        * WebProcess/Network/WebResourceLoader.messages.in:
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::platformDidReceiveLoadParameters):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::didReceivePolicyDecision):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-22  Per Arne Vollan  <pvollan@apple.com>

        [macOS][WP] Add telemetry for syscalls used during launch
        https://bugs.webkit.org/show_bug.cgi?id=235865
        <rdar://problem/88228583>

        Reviewed by Brent Fulgham.

        Add telemetry in the WebContent process' sandbox on macOS to determine which syscalls are used only during launch.

        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-22  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Pass along timeout to ASA and ignore timeout for conditional mediation requests
        https://bugs.webkit.org/show_bug.cgi?id=238147
        rdar://90509464

        Reviewed by Brent Fulgham.

        Currently we don't pass the timeout from the rp into ASA, so the default timeout is always used.
        This patch starts passing along the timeout to ASA, and creates a place for ASA to specify the
        mediation of the request, so we can ignore the timeout for requests using conditional mediation.

        Modified API test.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (toWebCore):
        (-[_WKWebAuthenticationPanel makeCredentialWithMediationRequirement:clientDataHash:options:completionHandler:]):
        (-[_WKWebAuthenticationPanel makeCredentialWithClientDataHash:options:completionHandler:]):
        (-[_WKWebAuthenticationPanel getAssertionWithMediationRequirement:clientDataHash:options:completionHandler:]):
        (-[_WKWebAuthenticationPanel getAssertionWithClientDataHash:options:completionHandler:]):
        * UIProcess/WebAuthentication/AuthenticatorManager.cpp:
        (WebKit::AuthenticatorManager::respondReceived):
        (WebKit::AuthenticatorManager::initTimeOutTimer):
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::configureRegistrationRequestContext):
        (WebKit::configureAssertionOptions):

2022-03-22  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Support getAssertion for virtual HID authenticators
        https://bugs.webkit.org/show_bug.cgi?id=238154
        rdar://problem/90593150

        Reviewed by Brent Fulgham.

        Virtual authenticators for WebAuthn support different transports: nfc, usb, internal,
        and ble. Currently, we only fully support the internal transport and makeCredential for
        usb-transport. The default transport for web-platform-tests is usb. This patch implements
        getAssertion for hid-based virtual authneticators.

        Tested via manually creating virtual authenticator and performing create / get.

        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.cpp:
        (WebKit::VirtualAuthenticatorManager::addCredential):
        (WebKit::VirtualAuthenticatorManager::credentialsMatchingList):
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.h:
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorUtils.h:
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorUtils.mm:
        (WebKit::privateKeyFromBase64):
        (WebKit::signatureForPrivateKey):
        * UIProcess/WebAuthentication/Virtual/VirtualHidConnection.cpp:
        (WebKit::VirtualHidConnection::parseRequest):

2022-03-22  Jer Noble  <jer.noble@apple.com>

        Fetching a Blob URL with an unbounded Range header do not generate a Content-Range response header
        https://bugs.webkit.org/show_bug.cgi?id=238170

        Reviewed by Eric Carlson.

        Handle the case where the request contains an unbounded range, and property calculate the rangeEnd
        to pass into ParsedContentRange.

        * NetworkProcess/NetworkDataTaskBlob.cpp:
        (WebKit::NetworkDataTaskBlob::dispatchDidReceiveResponse):

2022-03-22  Miguel Gomez  <magomez@igalia.com>

        Ensure that proxies are invalidated before destroying them.
        https://bugs.webkit.org/show_bug.cgi?id=237187

        Reviewed by Carlos Garcia Campos.

        * Shared/CoordinatedGraphics/CoordinatedGraphicsScene.cpp:
        (WebKit::CoordinatedGraphicsScene::updateSceneState):

2022-03-22  Per Arne Vollan  <pvollan@apple.com>

        Ensure there is a Network process after launching the WebContent process
        https://bugs.webkit.org/show_bug.cgi?id=238080
        <rdar://88933565>

        Reviewed by Chris Dumez.

        After the WebContent process has finished launching, ensure there is a Network process
        which will provide the WebContent process with the Launch Services database.

        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::didFinishLaunching):

2022-03-22  Wenson Hsieh  <wenson_hsieh@apple.com>

        -[WKWebView _spellCheckerDocumentTag] is inconsistent with the document tag passed into NSSpellChecker
        https://bugs.webkit.org/show_bug.cgi?id=238186
        rdar://90591883

        Reviewed by Tim Horton.

        Currently, WebViewImpl and WebPageProxy both maintain separate spellchecking document tag values, both of which
        are derived from `-[NSSpellChecker uniqueSpellDocumentTag]`. While the former is used for autocorrection as well
        as the WKWebView SPI `-_spellCheckerDocumentTag`, the latter is passed into NSSpellChecker API when performing
        spellchecking.

        For various reasons, Mail compose (using WebKit2) requires `-_spellCheckerDocumentTag` to be consistent with the
        value of the spell checker document tag passed into `-checkString:range:…:inSpellDocumentWithTag:orthography:`.
        Address this by simply having WebViewImpl call through into WebPageProxy's `spellDocumentTag`, such that the two
        now share the same value.

        Test: SpellCheckerDocumentTag.SpellCheckerDocumentTagWhenCheckingString

        * UIProcess/Cocoa/WebViewImpl.h:
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::spellCheckerDocumentTag):

2022-03-22  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Remove the ATK implementation
        https://bugs.webkit.org/show_bug.cgi?id=238198

        Reviewed by Adrian Perez de Castro.

        * PlatformGTK.cmake:
        * PlatformWPE.cmake:
        * SourcesGTK.txt:
        * SourcesWPE.txt:
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/atk/WebKitWebPageAccessibilityObject.cpp: Removed.
        (coreRootObjectWrapperDetachedCallback): Deleted.
        (rootWebAreaWrapper): Deleted.
        (accessibilityRootObjectWrapper): Deleted.
        (webkitWebPageAccessibilityObjectInitialize): Deleted.
        (webkitWebPageAccessibilityObjectGetIndexInParent): Deleted.
        (webkitWebPageAccessibilityObjectGetNChildren): Deleted.
        (webkitWebPageAccessibilityObjectRefChild): Deleted.
        (webkitWebPageAccessibilityObjectRefStateSet): Deleted.
        (webkit_web_page_accessibility_object_class_init): Deleted.
        (webkitWebPageAccessibilityObjectNew): Deleted.
        * WebProcess/WebPage/atk/WebKitWebPageAccessibilityObject.h: Removed.
        * WebProcess/WebPage/glib/WebPageGLib.cpp:
        (WebKit::WebPage::platformInitialize):
        * WebProcess/wpe/WebProcessMainWPE.cpp:
        (WebKit::initializeAccessibility): Deleted.

2022-03-22  Youenn Fablet  <youenn@apple.com>

        Move RealtimeMediaSource::VideoSampleObserver::videoSampleAvailable to VideoFrame
        https://bugs.webkit.org/show_bug.cgi?id=237884

        Reviewed by Eric Carlson.

        Move from using MediaSample to VideoFrame directly.

        * GPUProcess/graphics/RemoteGraphicsContextGLCocoa.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteMediaRecorder.h:
        * GPUProcess/webrtc/RemoteMediaRecorder.messages.in:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.messages.in:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.h:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.messages.in:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:

2022-03-22  Diego Pino Garcia  <dpino@igalia.com>

        Unreviewed, fix non-unified build after r291589

        * NetworkProcess/NetworkBroadcastChannelRegistry.cpp:

2022-03-22  Youenn Fablet  <youenn@apple.com>

        Website policies are not respected when doing COOP based process swap
        https://bugs.webkit.org/show_bug.cgi?id=238036
        <rdar://89616625>

        Reviewed by Chris Dumez.

        In case of normal process swap, we make use of website policies so everything is fine.
        For COOP based process swap, this happens later on, at a point where we lost website policies.
        To overcome this, we store the website policies used by a navigation inside the API::Navigation object.
        It is used by continueNavigationInNewProcess to correctly initialize the new WebPage website policies.
        We then set the website policies in the navigation object just before continuing the load in the same process,
        as process swap may happen later when inspecting the response.
        Minor refactoring in continueNavigationInNewProcess to get the policies directly from the given Navigation object.
        Minor refactoring in receivedNavigationPolicyDecision to make the code doing process swap clearer.

        Covered by API test.

        * UIProcess/API/APINavigation.h:
        (API::Navigation::setWebsitePoliciesForProcessSwap):
        (API::Navigation::takeWebsitePoliciesForProcessSwap):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::receivedNavigationPolicyDecision):
        (WebKit::WebPageProxy::receivedPolicyDecision):
        (WebKit::WebPageProxy::continueNavigationInNewProcess):
        (WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation):
        * UIProcess/WebPageProxy.h:

2022-03-21  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Make GraphicsContextState keep track of changes till they are applied
        https://bugs.webkit.org/show_bug.cgi?id=238066
        rdar://90585183

        Reviewed by Simon Fraser.

        * GPUProcess/graphics/RemoteDisplayListRecorder.cpp:
        (WebKit::RemoteDisplayListRecorder::setState):
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        (WebKit::RemoteDisplayListRecorderProxy::recordSetState):
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:

2022-03-21  Simon Fraser  <simon.fraser@apple.com>

        Do all RemoteLayerBackingStore buffer swapping in one batch
        https://bugs.webkit.org/show_bug.cgi?id=238161

        Reviewed by Tim Horton.

        Previously, RemoteLayerBackingStore buffer swapping happened per-layer in
        PlatformCALayerRemote::recursiveBuildTransaction().

        To prepare for a single IPC for all buffer swapping, batch all the swapping under
        prepareBackingStoresForDisplay() which is called from
        RemoteLayerTreeContext::buildTransaction().
        
        RemoteLayerBackingStoreCollection tracks m_backingStoresNeedingDisplay, and
        RemoteLayerBackingStore implements needsDisplay() so we only add backing stores to this hash
        set that need any buffer swapping.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::layerWillBeDisplayed):
        (WebKit::RemoteLayerBackingStore::needsDisplay const):
        (WebKit::RemoteLayerBackingStore::prepareToDisplay):
        (WebKit::RemoteLayerBackingStore::paintContents):
        (WebKit::RemoteLayerBackingStore::takePendingFlushers):
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::backingStoreNeedsDisplay):
        (WebKit::RemoteLayerBackingStoreCollection::prepareBackingStoresForDisplay):
        (WebKit::RemoteLayerBackingStoreCollection::paintReachableBackingStoreContents):
        (WebKit::RemoteLayerBackingStoreCollection::willFlushLayers):
        (WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDisplayed):
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::backingStoreNeedsDisplay):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::prepareBackingStoreBuffers):
        * WebProcess/WebPage/RemoteLayerTree/PlatformCALayerRemote.cpp:
        (WebKit::PlatformCALayerRemote::recursiveBuildTransaction):
        * WebProcess/WebPage/RemoteLayerTree/RemoteLayerTreeContext.mm:
        (WebKit::RemoteLayerTreeContext::buildTransaction):

2022-03-21  Alex Christensen  <achristensen@webkit.org>

        Adjust when _setPrivacyProxyFailClosedForUnreachableNonMainHosts is called
        https://bugs.webkit.org/show_bug.cgi?id=237735

        Reviewed by Geoff Garen.

        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):
        (WebKit::NetworkSessionCocoa::createWebSocketTask):

2022-03-21  Aditya Keerthi  <akeerthi@apple.com>

        Unreviewed, address post-landing feedback on r291445

        * UIProcess/ios/WKPDFView.mm:
        (-[WKPDFView compareFoundRange:toRange:inDocument:]):

        Subtraction to determine ordering is an anti-pattern, due to the
        possibility of overflow. Use comparison operators.

2022-03-21  Chris Dumez  <cdumez@apple.com>

        BroadcastChannel instances in distinct opaque origins can communicate
        https://bugs.webkit.org/show_bug.cgi?id=238090
        <rdar://problem/90511155>

        Reviewed by Alex Christensen.

        The issue is that we would use a ClientOrigin to distinguish origins for BroadcastChannel,
        which relies on SecurityOriginData internally. A unique/opaque SecurityOrigin becomes an empty
        SecurityOriginData upon conversion. As a result, when comparing ClientOrigin objects from
        unique SecurityOrigins, they would compare as equal.

        To address the issue, I introduced a new PartitionedSecurityOrigin type which is similar
        to ClientOrigin but stores SecurityOrigin objects internally, instead of SecurityOriginData
        objects. PartitionedSecurityOrigin's operator==() is such that different SecurityOrigins
        would not be equal but the same unique SecurityOrigin would be. I then used this new
        PartitionedSecurityOrigin type as key in our HashMap on the WebProcess side instead of
        ClientOrigin. This allows communication between several BroadcastChannels from the same
        unique origin, while preventing communication between distinct opaque origins.

        When the PartitionedSecurityOrigin contains an opaque security origin, we don't involve
        the Network Process at all since the destination can only be in the same WebProcess.

        * WebProcess/WebCoreSupport/WebBroadcastChannelRegistry.cpp:
        (WebKit::toClientOrigin):
        (WebKit::WebBroadcastChannelRegistry::registerChannel):
        (WebKit::WebBroadcastChannelRegistry::unregisterChannel):
        (WebKit::WebBroadcastChannelRegistry::postMessage):
        (WebKit::WebBroadcastChannelRegistry::postMessageLocally):
        (WebKit::WebBroadcastChannelRegistry::postMessageToRemote):
        (WebKit::WebBroadcastChannelRegistry::networkProcessCrashed):
        * WebProcess/WebCoreSupport/WebBroadcastChannelRegistry.h:

2022-03-21  Brent Fulgham  <bfulgham@apple.com>

        Disable the <model> element in Captive Portal mode.
        https://bugs.webkit.org/show_bug.cgi?id=238148
        <rdar://90562002>

        Reviewed by Chris Dumez.

        When displaying content in a captive portal, we should make sure the experimental
        <model> element is unavailable.

        Tests: TestWebKitAPI

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::adjustSettingsForCaptivePortal): Added. Also turn off <model> support.
        (WebKit::WebPage::updatePreferences): Call new helper function.

2022-03-21  Per Arne Vollan  <pvollan@apple.com>

        [watchOS] Add required syscall
        https://bugs.webkit.org/show_bug.cgi?id=238117
        <rdar://89964344>

        Reviewed by Brent Fulgham.

        Add rarely used syscall on watchOS.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:

2022-03-21  Youenn Fablet  <youenn@apple.com>

        Remove unneeded quotes in capture attribution string
        https://bugs.webkit.org/show_bug.cgi?id=238132
        <rdar://88794701>

        Reviewed by Eric Carlson.

        Quotes are unneeded and made it less clear to read.

        * GPUProcess/cocoa/GPUConnectionToWebProcessCocoa.mm:
        (WebKit::GPUConnectionToWebProcess::setCaptureAttributionString):

2022-03-21  Tim Horton  <timothy_horton@apple.com>

        Add an addition point for system background color
        https://bugs.webkit.org/show_bug.cgi?id=238108
        <rdar://problem/90463946>

        Reviewed by Aditya Keerthi.

        * UIProcess/API/ios/WKWebViewIOS.mm:
        (scrollViewBackgroundColor):
        Adopt systemBackgroundColor().

        * UIProcess/ios/PageClientImplIOS.mm:
        (WebKit::PageClientImpl::contentViewBackgroundColor):
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::platformUnderPageBackgroundColor const):
        Move the fallback to systemBackgroundColor into PageClientImpl
        so that it can realize the web view's trait collection.

2022-03-21  Adam Mazander  <mazander@apple.com>

        Sandbox: Remove telemetry in Network Process sandbox macOS
        https://bugs.webkit.org/show_bug.cgi?id=238041

        Reviewed by Brent Fulgham.

        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:

2022-03-21  Alex Christensen  <achristensen@webkit.org>

        Dust off Mac CMake build
        https://bugs.webkit.org/show_bug.cgi?id=238121

        Reviewed by Yusuke Suzuki.

        * PlatformMac.cmake:

2022-03-21  Jonathan Bedard  <jbedard@apple.com>

        Unreviewed, reverting r291558.

        Exceeded GitHub file size limit

        Reverted changeset:

        "Enable PGO when building for release and production"
        https://bugs.webkit.org/show_bug.cgi?id=238119
        https://commits.webkit.org/r291558

2022-03-21  Wenson Hsieh  <wenson_hsieh@apple.com>

        Enable PGO when building for release and production
        https://bugs.webkit.org/show_bug.cgi?id=238119
        rdar://90182309

        Reviewed by Saam Barati.

        See WebCore/ChangeLog for more details.

        * Configurations/Base.xcconfig:
        * Configurations/WebKit.xcconfig:
        * Profiling/WebKit.profdata: Added.

2022-03-21  Youenn Fablet  <youenn@apple.com>

        Remove use of MediaSampleAVFObjC from WebRTC pipelines
        https://bugs.webkit.org/show_bug.cgi?id=237706
        <rdar://problem/90425391>

        Reviewed by Eric Carlson.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:

2022-03-19  Tim Horton  <timothy_horton@apple.com>

        Fix the build (hopefully)

        * Shared/Cocoa/ArgumentCodersCocoa.mm:

2022-03-18  Myles C. Maxfield  <mmaxfield@apple.com>

        [Cocoa] Teach WebKit how to serialize CGColors
        https://bugs.webkit.org/show_bug.cgi?id=238069
        <rdar://problem/90124325>

        Reviewed by Dean Jackson and Tim Horton.

        We have 2 ways of serializing Cocoa objects: NS type handling in ArgumentCodersCocoa.mm,
        and CF type handling in ArgumentCodersCF.mm. CGColors are CF types, so this patch adds
        direct support in ArgumentCodersCF to serialize them, by round-tripping them through
        WebCore::Colors. However, NS containers (like font descriptor attribute dictionaries)
        can contain CGColors, so this patch also teaches ArgumentCodersCocoa that there may be
        CF types inside NS containers. If one is present, ArgumentCodersCocoa has to call into
        ArgumentCodersCF to serialize it.

        This patch doesn't add support for the reverse path, where an NS object is contained
        within a CF container. I intentionally omitted implementing this because I wasn't sure
        if it would be a layering violation; ArgumentCodersCococa.mm already #includes
        ArgumentCodersCF.h, but ArgumentCodersCF.mm doesn't #include ArgumentCodersCocoa.h.
        This path isn't actually necessary to solve my problem at hand, so someone else can
        add support if necessary in the future. I also added a comment at the site where the
        code would fail, describing what the problem is and a potential workaround.

        This patch also adds support for our NSSecureCoding implementation for CGColors. This
        is necessary because sometimes we want to serialize things like NSAttributedStrings,
        which we don't have direct support for, so we use NSSecureCoding to serialize them
        instead. NSAttributedStrings can contain fonts whose descriptor dictionaries contain
        CGColors, so this path needs to work with CGColors too. Support is implemented using
        NSKeyedArchiverDelegate and NSKeyedUnarchiverDelegate.

        Test: IPCTestingAPI.CGColorInNSSecureCoding
              The non-NSSecureCoding parts of this patch are tested by our regular LayoutTests
              when DOM GPU Process rendering is enabled.

        * Shared/Cocoa/ArgumentCodersCocoa.mm:
        (-[WKSecureCodingArchivingDelegate archiver:willEncodeObject:]):
        (-[WKSecureCodingArchivingDelegate unarchiver:didDecodeObject:]):
        (-[WKSecureCodingCGColorWrapper wrappedColor]):
        (+[WKSecureCodingCGColorWrapper supportsSecureCoding]):
        (-[WKSecureCodingCGColorWrapper encodeWithCoder:]):
        (-[WKSecureCodingCGColorWrapper initWithCoder:]):
        (-[WKSecureCodingCGColorWrapper initWithCGColor:]):
        (IPC::typeFromObject):
        (IPC::decodeSecureCodingInternal):
        (IPC::encodeCFInternal):
        (IPC::decodeCFInternal):
        (IPC::encodeObject):
        (IPC::decodeObject):
        * Shared/cf/ArgumentCodersCF.cpp:
        (IPC::typeFromCFTypeRef):
        (IPC::ArgumentCoder<CFTypeRef>::encode):
        (IPC::ArgumentCoder<RetainPtr<CFTypeRef>>::decode):
        (IPC::ArgumentCoder<CGColorRef>::encode):
        (IPC::ArgumentCoder<RetainPtr<CGColorRef>>::decode):
        * Shared/cf/ArgumentCodersCF.h:

2022-03-18  Gavin Phillips  <gavin.p@apple.com>

        Update preference location used for CaptivePortal testing. 
        https://bugs.webkit.org/show_bug.cgi?id=237970
        <rdar://problem/88897735>

        Reviewed by Brent Fulgham.

        Update the location of the setting used to determine whether we should ignore CaptivePortal requests for testing 
        as well as group the various iterations of preference checking into a single location. 

        * UIProcess/API/Cocoa/_WKSystemPreferences.mm:
        (+[_WKSystemPreferences isCaptivePortalModeEnabled]):
        (+[_WKSystemPreferences setCaptivePortalModeEnabled:]):
        (+[_WKSystemPreferences isCaptivePortalModeIgnored:]):
        (+[_WKSystemPreferences setCaptivePortalModeIgnored:ignore:]):
        * UIProcess/API/Cocoa/_WKSystemPreferencesInternal.h:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::isCaptivePortalModeEnabledBySystemIgnoringCaching):

2022-03-18  Jonathan Bedard  <jbedard@apple.com>

        [iOS 15.4] Fix unused variables
        https://bugs.webkit.org/show_bug.cgi?id=238089
        <rdar://problem/90498642>

        Reviewed by Alexey Proskuryakov and Chris Dumez.

        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformInitializeWebProcess): Declare isSafari as unused for Mac and Catalyst.
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeScrollingNodeDelegateIOS.mm:
        (-[WKScrollingNodeScrollViewDelegate scrollViewWillEndDragging:withVelocity:targetContentOffset:]):
        Remove canPanX and canPanY, since they are unused.
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant _createSheetWithElementActions:defaultTitle:showLinkTitle:]): Remove titleIsURL.

2022-03-18  Per Arne Vollan  <pvollan@apple.com>

        Fix test failures when enabling content filtering in the Network process
        https://bugs.webkit.org/show_bug.cgi?id=237217

        Reviewed by Brent Fulgham.

        Add a WebMockContentFilterManager in the WebContent process, which will be notified
        when mock content filter settings are changed from JavaScript, and then send the new
        settings to the Network process and install the mock content filter. The other
        changes are addressing layout and API test failures.

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::installMockContentFilter):
        * NetworkProcess/NetworkConnectionToWebProcess.h:
        * NetworkProcess/NetworkConnectionToWebProcess.messages.in:
        * NetworkProcess/NetworkResourceLoader.cpp:
        (WebKit::NetworkResourceLoader::start):
        (WebKit::NetworkResourceLoader::startContentFiltering):
        (WebKit::NetworkResourceLoader::didFinishLoading):
        (WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal):
        (WebKit::NetworkResourceLoader::contentFilterDidBlock):
        (WebKit::NetworkResourceLoader::cancelMainResourceLoadForContentFilter):
        (WebKit::NetworkResourceLoader::handleProvisionalLoadFailureFromContentFilter):
        * NetworkProcess/NetworkResourceLoader.h:
        * Shared/WebCoreArgumentCoders.h:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/Network/WebMockContentFilterManager.cpp: Added.
        (WebKit::WebMockContentFilterManager::singleton):
        (WebKit::WebMockContentFilterManager::startObservingSettings):
        (WebKit::WebMockContentFilterManager::mockContentFilterSettingsChanged):
        * WebProcess/Network/WebMockContentFilterManager.h: Added.
        * WebProcess/Network/WebResourceLoader.cpp:
        (WebKit::WebResourceLoader::contentFilterDidBlockLoad):
        (WebKit::WebResourceLoader::cancelMainResourceLoadForContentFilter):
        (WebKit::WebResourceLoader::handleProvisionalLoadFailureFromContentFilter): Deleted.
        * WebProcess/Network/WebResourceLoader.h:
        * WebProcess/Network/WebResourceLoader.messages.in:
        * WebProcess/WebProcess.cpp:

2022-03-18  Chris Dumez  <cdumez@apple.com>

        Avoid calls to [CLLocationManager authorizationStatus] & [CLLocationManager locationServicesEnabled]
        https://bugs.webkit.org/show_bug.cgi?id=237933
        <rdar://89931043>

        Reviewed by Geoffrey Garen.

        Minor changes to reflect API changes for our CoreLocation location manager.

        * UIProcess/WebGeolocationManagerProxy.cpp:
        (WebKit::WebGeolocationManagerProxy::providerStartUpdating):
        (WebKit::WebGeolocationManagerProxy::providerStopUpdating):

2022-03-18  Ben Nham  <nham@apple.com>

        Remove push subscriptions when associated service worker registrations are removed
        https://bugs.webkit.org/show_bug.cgi?id=237983

        Reviewed by Youenn Fablet.

        When a ServiceWorkerRegistration is removed, we also need to remove its associated
        PushSubscription. This can occur when:

          1. The application calls ServiceWorkerRegistration.unregister. This is implemented by
             having resolveUnregistrationJobInClient call unsubscribeFromPushService in webpushd.
             The identifier passed to unsubscribeFromPushService is now optional; if the identifier
             is not present, then we delete whatever PushSubscription is associated with the given
             scope URL.

          2. The user clears website data for a particular origin. This is implemented by having
             deleteWebsiteDataForOrigins invoke removePushSubscriptionsForOrigin in webpushd.

          3. The user clears all website data. This is implemented by having deleteWebsiteData
             invoke removeAllPushSubscriptions in webpushd.

        Covered by new API tests.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::deleteWebsiteData):
        (WebKit::NetworkProcess::deleteWebsiteDataForOrigins):
        (WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains):
        (WebKit::NetworkProcess::hasPushSubscriptionForTesting):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/Notifications/NetworkNotificationManager.cpp:
        (WebKit::NetworkNotificationManager::unsubscribeFromPushService):
        (WebKit::NetworkNotificationManager::removeAllPushSubscriptions):
        (WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin):
        * NetworkProcess/Notifications/NetworkNotificationManager.h:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        (WebKit::WebSWServerConnection::resolveUnregistrationJobInClient):
        * Shared/WebPushDaemonConstants.h:
        (WebKit::WebPushD::messageTypeSendsReply):
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        (-[WKWebsiteDataStore _scopeURL:hasPushSubscriptionForTesting:]):
        * UIProcess/API/Cocoa/WKWebsiteDataStorePrivate.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::hasPushSubscriptionForTesting):
        * UIProcess/Network/NetworkProcessProxy.h:
        * webpushd/PushService.h:
        * webpushd/PushService.mm:
        (WebPushD::UnsubscribeRequest::UnsubscribeRequest):
        (WebPushD::UnsubscribeRequest::startInternal):
        (WebPushD::PushService::unsubscribe):
        (WebPushD::PushService::incrementSilentPushCount):
        (WebPushD::PushService::removeRecordsForBundleIdentifier):
        (WebPushD::PushService::removeRecordsForBundleIdentifierAndOrigin):
        (WebPushD::PushService::removeRecordsImpl):
        * webpushd/WebPushDaemon.h:
        * webpushd/WebPushDaemon.mm:
        (WebPushD::MessageInfo::removeAllPushSubscriptions::encodeReply):
        (WebPushD::MessageInfo::removePushSubscriptionsForOrigin::encodeReply):
        (WebPushD::Daemon::decodeAndHandleMessage):
        (WebPushD::Daemon::unsubscribeFromPushService):
        (WebPushD::Daemon::removeAllPushSubscriptions):
        (WebPushD::Daemon::removePushSubscriptionsForOrigin):

2022-03-18  J Pascoe  <j_pascoe@apple.com>

        Trigger PDF download in captive portal mode instead of using PDF viewer
        https://bugs.webkit.org/show_bug.cgi?id=237245
        rdar://problem/89525531

        Reviewed by Chris Dumez.

        This is a stopgap solution since PDF.js needs more cycles to polish.

        Added API test WKDownload.CaptivePortalPDF.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::decidePolicyForResponseShared):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updatePreferences):

2022-03-18  Kimmo Kinnunen  <kkinnunen@apple.com>

        Recycling a webgl context when it has been lost and restored causes a crash
        https://bugs.webkit.org/show_bug.cgi?id=238024

        Reviewed by Geoffrey Garen.

        Remove GraphicsContextGL::getGraphicsResetStatusARB(), it's unused now.

        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGLFunctionsGenerated.h:
        (getActiveUniformBlockiv):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::paintRenderingResultsToCanvas):
        (WebKit::RemoteGraphicsContextGLProxy::paintCompositedResultsToCanvas):
        (WebKit::RemoteGraphicsContextGLProxy::markContextLost):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.h:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:

2022-03-18  Carlos Garcia Campos  <cgarcia@igalia.com>

        [WPE][GTK] Fix a crash after r290360
        https://bugs.webkit.org/show_bug.cgi?id=237917

        Reviewed by Youenn Fablet.

        When AuxiliaryProcess::shutDown is called for the WebProcess there might be pages not closed yet, for example
        when swapping process on navigation, the close message is sent to the page after the shutdown. In the case of
        GTK and WPE ports the pages are closed before stopping the run loop to ensure associated resources (like GPU
        resources) are released. Closing the last page makes the process termination allowed, which ends up calling
        AuxiliaryProcess::terminate again. Also, when the shutdown message is received we don't want to ask again the UI
        process whether the process can be terminated, since the UI process asked it.

        * Shared/AuxiliaryProcess.cpp:
        (WebKit::AuxiliaryProcess::enableTermination): Return early if m_isInShutDown is true.
        (WebKit::AuxiliaryProcess::shutDown): Set m_isInShutDown for the scope.
        * Shared/AuxiliaryProcess.h:

2022-03-18  Carlos Garcia Campos  <cgarcia@igalia.com>

        Add a public build option for PDF.js
        https://bugs.webkit.org/show_bug.cgi?id=238023

        Reviewed by Michael Catanzaro.

        * PlatformGTK.cmake:
        * PlatformWPE.cmake:
        * WebProcess/Network/WebLoaderStrategy.cpp:
        (WebKit::WebLoaderStrategy::scheduleLoad):
        * WebProcess/Network/WebLoaderStrategy.h:
        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::objectContentType):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updatePreferences):
        (WebKit::WebPage::canShowMIMEType const):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::shouldUsePDFPlugin const):

2022-03-18  Carlos Garcia Campos  <cgarcia@igalia.com>

        Remove AuxiliaryProcess termination timeout
        https://bugs.webkit.org/show_bug.cgi?id=238012

        Reviewed by Chris Dumez.

        It was only used by the plugin process, now it's always set to 0 for all processes, so it's useless.

        * Shared/AuxiliaryProcess.cpp:
        (WebKit::AuxiliaryProcess::AuxiliaryProcess):
        (WebKit::AuxiliaryProcess::disableTermination):
        (WebKit::AuxiliaryProcess::enableTermination):
        (WebKit::AuxiliaryProcess::terminationTimerFired): Deleted.
        * Shared/AuxiliaryProcess.h:
        (WebKit::AuxiliaryProcess::setTerminationTimeout): Deleted.
        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode const):
        (WebKit::WebProcessCreationParameters::decode):
        * Shared/WebProcessCreationParameters.h:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::initializeNewWebProcess):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeWebProcess):

2022-03-18  Youenn Fablet  <youenn@apple.com>

        Remove MediaSample usage from canvas capture code
        https://bugs.webkit.org/show_bug.cgi?id=238015

        Reviewed by Eric Carlson.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToVideoFrame):
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToMediaSample): Deleted.
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::paintCompositedResultsToVideoFrame):
        (WebKit::RemoteGraphicsContextGLProxy::paintCompositedResultsToMediaSample): Deleted.
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.h:

2022-03-18  Youenn Fablet  <youenn@apple.com>

        Keep service workers alive when they are inspected even though they should be terminated
        https://bugs.webkit.org/show_bug.cgi?id=237827
        <rdar://88313935>

        Reviewed by Alex Christensen.

        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.messages.in:
        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        * WebProcess/Storage/WebSWContextManagerConnection.h:

2022-03-17  Alex Christensen  <achristensen@webkit.org>

        Call doDailyActivityInManager on main thread in adattributiond
        https://bugs.webkit.org/show_bug.cgi?id=238059
        <rdar://90335028>

        Reviewed by Tim Horton.

        It turns out that xpc activities don't happen on the main thread.
        Everything else in adattributiond happens on the main thread (except database operations)
        and to be thread safe this also needs to happen on the main thread.

        * Shared/EntryPointUtilities/Cocoa/Daemon/PCMDaemonEntryPoint.mm:
        (WebKit::registerScheduledActivityHandler):

2022-03-17  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Support PDF search when using a find interaction
        https://bugs.webkit.org/show_bug.cgi?id=237408
        rdar://89437334

        Reviewed by Wenson Hsieh.

        Ensure that PDFs can be searched when using a _UIFindInteraction by
        making WKPDFView conform to _UITextSearching.

        The implementation is a thin wrapper around existing find SPI on
        PDFHostViewController. Found ranges in PDFs are uniquely identified
        by an index, as more detailed range information is not exposed. Unlike
        web content, there is currently no requirement to support restorable
        found ranges for PDFs, making indexes safe to use.

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:

        Use WKPDFView or WKContentView as the searchable object, depending on
        the loaded content.

        (-[WKWebView _didCommitLoadForMainFrame]):
        (-[WKWebView _searchableObject]):
        (-[WKWebView _setFindInteractionEnabled:]):
        * UIProcess/ios/WKPDFView.mm:
        (+[WKPDFFoundTextRange foundTextRangeWithIndex:]):
        (-[WKPDFFoundTextRange start]):
        (-[WKPDFFoundTextRange end]):
        (-[WKPDFFoundTextRange isEmpty]):
        (+[WKPDFFoundTextPosition textPositionWithIndex:]):
        (-[WKPDFView dealloc]):
        (-[WKPDFView pdfHostViewController:findStringUpdate:done:]):
        (-[WKPDFView selectedTextRange]):
        (-[WKPDFView compareFoundRange:toRange:inDocument:]):
        (-[WKPDFView performTextSearchWithQueryString:usingOptions:resultAggregator:]):
        (-[WKPDFView decorateFoundTextRange:inDocument:usingStyle:]):
        (-[WKPDFView clearAllDecoratedFoundText]):

2022-03-17  Brent Fulgham  <bfulgham@apple.com>

        Disable push features in CaptivePortal mode 
        https://bugs.webkit.org/show_bug.cgi?id=237981
        <rdar://88897228>

        Reviewed by Chris Dumez.

        We should not support push features when running in a Captive Portal.

        Tests: TestWebKitAPI

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updatePreferences):

2022-03-17  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r290835.
        https://bugs.webkit.org/show_bug.cgi?id=238044

        Disruptive change

        Reverted changeset:

        "[iOS] Hard link AVPictureInPictureController"
        https://bugs.webkit.org/show_bug.cgi?id=237227
        https://commits.webkit.org/r290835

2022-03-17  Adam Mazander  <mazander@apple.com>

        Removed telemetry from Networking.sb
        https://bugs.webkit.org/show_bug.cgi?id=238026

        Reviewed by Per Arne Vollan.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.Networking.sb:

2022-03-17  Antoine Quint  <graouts@webkit.org>

        [model] loading spinner doesn't show on iOS
        https://bugs.webkit.org/show_bug.cgi?id=238029
        rdar://89698998

        Reviewed by Dean Jackson.

        We must wait until a WKModelView has non-zero bounds to create the backing ASVInlinePreview
        so that the ARQL views are all sized to display the loading spinner correctly.

        * UIProcess/ios/WKModelView.mm:
        (-[WKModelView initWithModel:]):
        (-[WKModelView createPreview]):
        (-[WKModelView layoutSubviews]):
        (-[WKModelView updateBounds]):

2022-03-17  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291352.
        https://bugs.webkit.org/show_bug.cgi?id=238039

        Disruptive change

        Reverted changeset:

        "Incorrect header name used in __has_include"
        https://bugs.webkit.org/show_bug.cgi?id=237914
        https://commits.webkit.org/r291352

2022-03-17  Simon Lewis  <simon.lewis@apple.com>

        Add read and write methods to JSIPCStreamConnectionBuffer
        https://bugs.webkit.org/show_bug.cgi?id=237730
        rdar://problem/89676460

        Reviewed by Kimmo Kinnunen.

        When using IPCTestingAPI, this change enables the underlying bytes
        of a StreamClientConnection buffer to be modified.

        Test: ipc/stream-buffer-read-write.html

        * Platform/IPC/StreamClientConnection.cpp:
        (IPC::StreamClientConnection::bufferForTesting):
        * Platform/IPC/StreamClientConnection.h:
        * Platform/IPC/StreamConnectionBuffer.cpp:
        (IPC::StreamConnectionBuffer::headerForTesting):
        (IPC::StreamConnectionBuffer::dataForTesting):
        * Platform/IPC/StreamConnectionBuffer.h:
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::staticFunctions):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::readHeaderBytes):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::readDataBytes):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::readBytes):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::writeHeaderBytes):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::writeDataBytes):
        (WebKit::IPCTestingAPI::JSIPCStreamConnectionBuffer::writeBytes):

2022-03-17  Simon Fraser  <simon.fraser@apple.com>

        Fix the build when LOG_DISABLED is 0 in release builds
        https://bugs.webkit.org/show_bug.cgi?id=237999

        Reviewed by Tim Horton.

        * WebProcess/Plugins/PDF/PDFPlugin.h:

2022-03-17  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Support makeCredential for virtual HID authenticators
        https://bugs.webkit.org/show_bug.cgi?id=237984
        rdar://problem/90393676

        Reviewed by Brent Fulgham.

        Virtual authenticators for WebAuthn supports different transports: nfc,usb,internal,ble.
        Currently, we support the internal transport, but the default transport used in web platform
        tests is usb. This patch implements makeCredential for hid-based virtual authenticators. Virtual
        credential information is stored in the VirtualCredential struct as suggested by the spec.

        Tested manually via creating virtual authenticator and performing create and via wpt tests.

        * UIProcess/WebAuthentication/Mock/MockHidConnection.cpp:
        (WebKit::MockHidConnection::parseRequest):
        (WebKit::MockHidConnection::feedReports):
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.cpp:
        (WebKit::VirtualAuthenticatorManager::createAuthenticator):
        (WebKit::VirtualAuthenticatorManager::addCredential):
        (WebKit::VirtualAuthenticatorManager::createService const):
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.h:
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorUtils.h: Copied from Source/WebKit/UIProcess/WebAuthentication/Virtual/VirtualService.h.
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorUtils.mm: Added.
        (WebKit::flagsForConfig):
        (WebKit::createPrivateKey):
        (WebKit::credentialIdAndCosePubKeyForPrivateKey):
        (WebKit::base64PrivateKey):
        * UIProcess/WebAuthentication/Virtual/VirtualCredential.h: Copied from Source/WebKit/UIProcess/WebAuthentication/Virtual/VirtualService.h.
        * UIProcess/WebAuthentication/Virtual/VirtualHidConnection.cpp: Added.
        (WebKit::VirtualHidConnection::VirtualHidConnection):
        (WebKit::VirtualHidConnection::initialize):
        (WebKit::VirtualHidConnection::terminate):
        (WebKit::VirtualHidConnection::sendSync):
        (WebKit::VirtualHidConnection::send):
        (WebKit::VirtualHidConnection::assembleRequest):
        (WebKit::VirtualHidConnection::receiveHidMessage):
        (WebKit::VirtualHidConnection::recieveResponseCode):
        (WebKit::VirtualHidConnection::parseRequest):
        * UIProcess/WebAuthentication/Virtual/VirtualHidConnection.h: Copied from Source/WebKit/UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.h.
        * UIProcess/WebAuthentication/Virtual/VirtualService.h:
        * UIProcess/WebAuthentication/Virtual/VirtualService.mm:
        (WebKit::VirtualService::VirtualService):
        (WebKit::VirtualService::createVirtual):
        (WebKit::authenticatorInfoForConfig):
        (WebKit::VirtualService::startDiscoveryInternal):
        * WebKit.xcodeproj/project.pbxproj:

2022-03-17  Youenn Fablet  <youenn@apple.com>

        Make SharedVideoFrameReader use VideoFrameCV instead of MediaSample
        https://bugs.webkit.org/show_bug.cgi?id=237596

        Reviewed by Eric Carlson.

        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-03-17  Ben Nham  <nham@apple.com>

        Allow push preference to be set programatically
        https://bugs.webkit.org/show_bug.cgi?id=238003

        Reviewed by Geoffrey Garen.

        This exposes the PushAPIEnabled experimental preference through WKPreferences so it can be
        enabled programatically by API clients.

        * UIProcess/API/Cocoa/WKPreferences.mm:
        (-[WKPreferences _pushAPIEnabled]):
        (-[WKPreferences _setPushAPIEnabled:]):
        * UIProcess/API/Cocoa/WKPreferencesPrivate.h:

2022-03-17  Kate Cheney  <katherine_cheney@apple.com>

        Calls to print can result in unresponsive print modal
        https://bugs.webkit.org/show_bug.cgi?id=237940
        <rdar://problem/88257828>

        Reviewed by Chris Dumez.

        Calls to print were hanging in the case of the client asynchronously
        handling the completion handler passed to the delegate. To fix this
        we can adjust all printing IPC to have the option
        DispatchMessageEvenWhenWaitingForUnboundedSyncReply which allows IPC
        messages when waiting for a sync reply in the case where the receiver
        of the message is not guranteed to call the completion handler at the
        end of the runloop.

        * UIProcess/API/Cocoa/WKWebViewPrivateForTesting.h:
        * UIProcess/API/Cocoa/WKWebViewTesting.mm:
        (-[WKWebView _computePagesForPrinting:completionHandler:]):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::printingSendOptions):
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::print):

2022-03-17  Nikolas Zimmermann  <nzimmermann@igalia.com>

        Build broken on macOS Monterey 12.3 - PassKitSPI related error
        https://bugs.webkit.org/show_bug.cgi?id=238010
        <rdar://problem/90417687>

        Reviewed by Antoine Quint.

        Unbreak the macOS 12.3 build: assure that 'PKShippingMethod' is declared before used
        in the 'PKShippingMethods' interface. Fix various unused variable warnings.

        No new tests. No change in functionality.

        * Shared/cf/ArgumentCodersCF.cpp:
        (IPC::ArgumentCoder<CFStringRef>::encode):
        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::compileAndCacheSandboxProfile):

2022-03-17  Kimmo Kinnunen  <kkinnunen@apple.com>

        WebGL context lost event is not sent again for contexts that are lost and restored
        https://bugs.webkit.org/show_bug.cgi?id=237952

        Reviewed by Antti Koivisto.

        Adjust after GraphicsContextGL::addClient() was renamed setClient().

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::workQueueInitialize):
        (WebKit::RemoteGraphicsContextGL::workQueueUninitialize):
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::wasLost):
        (WebKit::RemoteGraphicsContextGLProxy::wasChanged):
        (WebKit::RemoteGraphicsContextGLProxy::markContextLost):

2022-03-16  Antoine Quint  <graouts@webkit.org>

        [model] -[ASVInlinePreview setRemoteContext:] should be called inside the -[ASVInlinePreview setupRemoteConnectionWithCompletionHandler:] callback
        https://bugs.webkit.org/show_bug.cgi?id=237959
        rdar://87832635

        Reviewed by Dean Jackson.

        We need to split the code that creates a remote ASVInlinePreview on macOS in two. The first step is to create the remote ASVInlinePreview
        and obtain its remote context id from the UIProcess, setting it on the WebProcess ASVInlinePreview in the callback.

        The second step is to load the file in the remote ASVInlinePreview.

        For these two steps, we now have two separate WebProxy messages: ModelElementCreateRemotePreview and ModelElementLoadRemotePreview.

        * UIProcess/Cocoa/ModelElementControllerCocoa.mm:
        (WebKit::ModelElementController::modelElementCreateRemotePreview):
        (WebKit::ModelElementController::modelElementLoadRemotePreview):
        (WebKit::ModelElementController::modelElementDidCreatePreview): Deleted.
        * UIProcess/ModelElementController.h:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::modelElementCreateRemotePreview):
        (WebKit::WebPageProxy::modelElementLoadRemotePreview):
        (WebKit::WebPageProxy::modelElementDidCreatePreview): Deleted.
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * WebProcess/Model/mac/ARKitInlinePreviewModelPlayerMac.h:
        * WebProcess/Model/mac/ARKitInlinePreviewModelPlayerMac.mm:
        (WebKit::ARKitInlinePreviewModelPlayerMac::load):
        (WebKit::ARKitInlinePreviewModelPlayerMac::createPreviewsForModelWithURL):
        (WebKit::ARKitInlinePreviewModelPlayerMac::didCreateRemotePreviewForModelWithURL):

2022-03-17  Youenn Fablet  <youenn@apple.com>

        AudioContext is suspended on iOS when page is backgrounded
        https://bugs.webkit.org/show_bug.cgi?id=237878

        Reviewed by Eric Carlson.

        Expose private SPI for testing purposes.

        * UIProcess/API/Cocoa/WKProcessPool.mm:
        * UIProcess/API/Cocoa/WKProcessPoolPrivate.h:
        * UIProcess/WebProcessPool.h:

2022-03-16  Sihui Liu  <sihui_liu@apple.com>

        Always update assertion state for existing default network process
        https://bugs.webkit.org/show_bug.cgi?id=237965

        Reviewed by Chris Dumez.

        In our current implementation, we only update process assertion state for network process if it's being used by
        some WebsiteDataStore. An problematic case with this impelmentation found by Tim: when a network process is 
        created for some WebsiteDataStore, and the WebsiteDataStore is gone (WebView gets destroyed), then network 
        process will get suspended. At this time, if a new WebsiteDataStore is created, some activities happen and we 
        update assertion state, we don't resume the network process, since it's not actively being used (the new 
        WebsiteDataStore has not invoked networkProcess() yet). Later on if the WebsiteDataStore starts to use network
        process (it reuses existing process as network process is a singleton on Cocoa platforms), the network process
        will be numb and not respond any message because it is suspended.

        To fix this issue, let's always update assertion state for existing network process.

        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::updateProcessAssertions):

2022-03-16  Chris Dumez  <cdumez@apple.com>

        Don't build WebPageProxy::writePromisedAttachmentToPasteboard() and its IPC on macOS
        https://bugs.webkit.org/show_bug.cgi?id=237986

        Reviewed by Brent Fulgham.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::writePromisedAttachmentToPasteboard):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:

2022-03-16  Brent Fulgham  <bfulgham@apple.com>

        CoreIPC Hardening: Add user gesture check when saving images
        https://bugs.webkit.org/show_bug.cgi?id=237839
        <rdar://72058321>

        Reviewed by Chris Dumez.

        Add check to confirm that attempts to store images in the user's Photo
        Library and attempts to store data in the pasteboard were triggered by
        a user gesture.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::writePromisedAttachmentToPasteboard): Message check the authorization token before
        performing the write.
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::isValidPerformActionOnElementAuthorizationToken const): Added.
        (WebKit::WebPageProxy::performActionOnElement): Added.
        (WebKit::WebPageProxy::saveImageToLibrary): Message check the authorization token before
        performing the save.
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::performActionOnElement):

2022-03-16  Sihui Liu  <sihui_liu@apple.com>

        Do not suspend NetworkStorageManager if it is used for ephemeral session
        https://bugs.webkit.org/show_bug.cgi?id=237943

        Reviewed by Chris Dumez.

        The reason we need to suspend NetworkStorageManager when process is suspended, is that it might hold file lock 
        during its operations. NetworkStorageManager of ephemeral sessions will not hold file lock; suspending its 
        WorkQueue will only delay storage operations.

        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::suspend):
        (WebKit::NetworkStorageManager::resume):

2022-03-16  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo][WebGL] Crash in WebKit::WCContentBuffer::platformLayerWillBeDestroyed()
        https://bugs.webkit.org/show_bug.cgi?id=237819

        Reviewed by Don Olmstead.

        WinCairo WTR was randomly crashing in
        WCContentBuffer::platformLayerWillBeDestroyed(). It accessed a
        stale pointer of WCScene::Layer.

        * GPUProcess/graphics/wc/WCScene.cpp:
        (WebKit::WCScene::Layer::~Layer): Clear the client of
        WCContentBuffer.
        (WebKit::WCScene::update):

2022-03-16  Eric Carlson  <eric.carlson@apple.com>

        [iOS] WebAVMediaSelectionOption should implement -mediaType
        https://bugs.webkit.org/show_bug.cgi?id=237966
        rdar://89934589

        Reviewed by Jer Noble.

        * Shared/WebCoreArgumentCoders.cpp:
        (IPC::ArgumentCoder<MediaSelectionOption>::encode): Deleted.
        (IPC::ArgumentCoder<MediaSelectionOption>::decode): Deleted.
        * Shared/WebCoreArgumentCoders.h:

2022-03-16  Per Arne Vollan  <pvollan@apple.com>

        Incorrect header name used in __has_include
        https://bugs.webkit.org/show_bug.cgi?id=237914
        <rdar://90271228>

        Reviewed by Geoffrey Garen.

        * Configurations/WebKit.xcconfig:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformInitializeWebProcess):

2022-03-16  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Refactor some position information hit-testing logic related to data detectors in Live Text
        https://bugs.webkit.org/show_bug.cgi?id=237927

        Reviewed by Tim Horton.

        Pull the call to `dataDetectorImageOverlayPositionInformation()` out from `elementPositionInformation()`, and
        into the top level in `WebPage::positionInformation()`. Since `dataDetectorImageOverlayPositionInformation` only
        depends on the hit-tested inner node (rather than the element responding to click events), it doesn't make sense
        to only populate the data detector results array only when we find an element that responds to clicks.

        Test: fast/images/text-recognition/ios/show-data-detector-context-menu.html

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::elementPositionInformation):
        (WebKit::WebPage::positionInformation):

2022-03-16  Youenn Fablet  <youenn@apple.com>

        Make MIMETypeRegistry::mimeTypeForPath take a StringView
        https://bugs.webkit.org/show_bug.cgi?id=236441
        <rdar://problem/89084526>

        Reviewed by Chris Dumez.

        * UIProcess/API/Cocoa/APIAttachmentCocoa.mm:
        (API::mimeTypeInferredFromFileExtension):
        (API::Attachment::setFileWrapperAndUpdateContentType):
        * UIProcess/Inspector/mac/WKInspectorResourceURLSchemeHandler.mm:
        (-[WKInspectorResourceURLSchemeHandler webView:startURLSchemeTask:]):
        * UIProcess/ios/forms/WKFileUploadPanel.mm:
        (-[WKFileUploadPanel presentWithParameters:resultListener:]):

2022-03-16  Youenn Fablet  <youenn@apple.com>

        redirectCount returns 0 when using a Service Worker
        https://bugs.webkit.org/show_bug.cgi?id=235710
        <rdar://problem/88432190>

        Reviewed by Chris Dumez.

        Pass an optional NetworkLoadMetrics when sending the response to web process.
        Include the redirectCount value computed by NetworkResourceLoader.
        Make service worker redirections go through NetworkResourceLoader to set the redirectCount value and for correctness.

        Covered by updated test.

        * NetworkProcess/NetworkResourceLoader.cpp:
        * NetworkProcess/ServiceWorker/ServiceWorkerFetchTask.cpp:
        (WebKit::ServiceWorkerFetchTask::processRedirectResponse):
        * WebProcess/Network/WebResourceLoader.cpp:
        * WebProcess/Network/WebResourceLoader.h:
        * WebProcess/Network/WebResourceLoader.messages.in:

2022-03-16  Pablo Saavedra  <psaavedra@igalia.com>

        [GTK][WPE] Crash during the WebPage::close() related to GL resources destruction
        https://bugs.webkit.org/show_bug.cgi?id=237588

        Reviewed by Carlos Garcia Campos.

        * Shared/CoordinatedGraphics/CoordinatedGraphicsScene.h:
        * Shared/CoordinatedGraphics/threadedcompositor/ThreadedCompositor.cpp:
        (WebKit::ThreadedCompositor::invalidate):
        (WebKit::ThreadedCompositor::updateSceneWithoutRendering):
        * Shared/CoordinatedGraphics/threadedcompositor/ThreadedCompositor.h:

2022-03-16  Sihui Liu  <sihui_liu@apple.com>

        Suspend newly created NetworkStorageManager if network process is or will be suspended
        https://bugs.webkit.org/show_bug.cgi?id=237915

        Reviewed by Chris Dumez.

        When network process receives prepareToSuspend message, we suspend existing NetworkStorageManagers (so no more
        database operation can be performed). We should do the same thing for new NetworkStorageManager created between
        prepareToSuspend and processDidResume messages.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::addWebsiteDataStore):
        (WebKit::NetworkProcess::prepareToSuspend):
        (WebKit::NetworkProcess::processDidResume):
        (WebKit::NetworkProcess::resume): Deleted.
        * NetworkProcess/NetworkProcess.h:

2022-03-15  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (r291191): [iOS] ASSERTION FAILED: m_contentsBufferHandle in WebKit::RemoteLayerBackingStore::paintContents()
        https://bugs.webkit.org/show_bug.cgi?id=237922

        Reviewed by Geoffrey Garen.

        The assertion added in r291191 is incorrect. With that change, we end up calling
        RemoteLayerBackingStore::paintContents() on WebGL layers (which use delegated display)
        when we used to just early return from display(). So it's OK for m_frontBuffer.imageBuffer
        to be null on these layers.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::paintContents):

2022-03-15  Eric Carlson  <eric.carlson@apple.com>

        Video poster disappears prematurely on play, leaving transparent video element.
        https://bugs.webkit.org/show_bug.cgi?id=226960
        <rdar://problem/79315114>

        Reviewed by Jer Noble.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::MediaPlayerPrivateRemote): Always log.
        (WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote): Ditto.
        (WebKit::MediaPlayerPrivateRemote::prepareForPlayback): Pass the player's content
        rect box to createVideoLayerRemote so it can be sized correctly even before it
        becomes visible.
        (WebKit::MediaPlayerPrivateRemote::firstVideoFrameAvailable): Always log.
        (WebKit::MediaPlayerPrivateRemote::renderingModeChanged): Ditto.
        * WebProcess/GPU/media/VideoLayerRemote.h:

        * WebProcess/GPU/media/cocoa/VideoLayerRemoteCocoa.mm:
        (WebKit::createVideoLayerRemote): Set the new layer's frame so its children will
        be positioned correctly when the are made visible.

2022-03-15  Myles C. Maxfield  <mmaxfield@apple.com>

        [WebGPU] Migrate from WTF::Function to WTF::CompletionHandler
        https://bugs.webkit.org/show_bug.cgi?id=237925

        Reviewed by Geoffrey Garen.

        * GPUProcess/graphics/WebGPU/RemoteAdapter.cpp:
        (WebKit::RemoteAdapter::requestDevice):
        * GPUProcess/graphics/WebGPU/RemoteAdapter.h:
        * GPUProcess/graphics/WebGPU/RemoteBuffer.cpp:
        (WebKit::RemoteBuffer::mapAsync):
        * GPUProcess/graphics/WebGPU/RemoteBuffer.h:
        * GPUProcess/graphics/WebGPU/RemoteDevice.cpp:
        (WebKit::RemoteDevice::createComputePipelineAsync):
        (WebKit::RemoteDevice::createRenderPipelineAsync):
        (WebKit::RemoteDevice::popErrorScope):
        * GPUProcess/graphics/WebGPU/RemoteDevice.h:
        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::requestAdapter):
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/graphics/WebGPU/RemoteQueue.cpp:
        (WebKit::RemoteQueue::onSubmittedWorkDone):
        * GPUProcess/graphics/WebGPU/RemoteQueue.h:
        * GPUProcess/graphics/WebGPU/RemoteShaderModule.cpp:
        (WebKit::RemoteShaderModule::compilationInfo):
        * GPUProcess/graphics/WebGPU/RemoteShaderModule.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteAdapterProxy.cpp:
        (WebKit::WebGPU::RemoteAdapterProxy::requestDevice):
        * WebProcess/GPU/graphics/WebGPU/RemoteAdapterProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteBufferProxy.cpp:
        (WebKit::WebGPU::RemoteBufferProxy::mapAsync):
        * WebProcess/GPU/graphics/WebGPU/RemoteBufferProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteDeviceProxy.cpp:
        (WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync):
        (WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync):
        (WebKit::WebGPU::RemoteDeviceProxy::popErrorScope):
        * WebProcess/GPU/graphics/WebGPU/RemoteDeviceProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteGPUProxy.cpp:
        (WebKit::RemoteGPUProxy::requestAdapter):
        * WebProcess/GPU/graphics/WebGPU/RemoteGPUProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteQueueProxy.cpp:
        (WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone):
        * WebProcess/GPU/graphics/WebGPU/RemoteQueueProxy.h:
        * WebProcess/GPU/graphics/WebGPU/RemoteShaderModuleProxy.cpp:
        (WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo):
        * WebProcess/GPU/graphics/WebGPU/RemoteShaderModuleProxy.h:

2022-03-15  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Mock UI interactions whenever virtual authenticators are in use.
        https://bugs.webkit.org/show_bug.cgi?id=237856
        rdar://problem/90274854

        Reviewed by Brent Fulgham.

        Tested by wpt's webauthn tests.

        * UIProcess/WebAuthentication/AuthenticatorManager.h:
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.cpp:
        (WebKit::VirtualAuthenticatorManager::runPanel):
        (WebKit::VirtualAuthenticatorManager::selectAssertionResponse):
        (WebKit::VirtualAuthenticatorManager::decidePolicyForLocalAuthenticator):
        * UIProcess/WebAuthentication/Virtual/VirtualAuthenticatorManager.h:

2022-03-15  Chris Dumez  <cdumez@apple.com>

        Make it clearer in the loading logging when it is for the main frame or not
        https://bugs.webkit.org/show_bug.cgi?id=237913

        Reviewed by Alex Christensen.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::receivedNavigationPolicyDecision):
        (WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared):
        (WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared):
        (WebKit::WebPageProxy::willPerformClientRedirectForFrame):
        (WebKit::WebPageProxy::didCancelClientRedirectForFrame):
        (WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared):
        (WebKit::WebPageProxy::didCommitLoadForFrame):
        (WebKit::WebPageProxy::didFinishDocumentLoadForFrame):
        (WebKit::WebPageProxy::didFinishLoadForFrame):
        (WebKit::WebPageProxy::didFailLoadForFrame):
        (WebKit::WebPageProxy::didSameDocumentNavigationForFrame):
        (WebKit::WebPageProxy::decidePolicyForNavigationAction):
        (WebKit::WebPageProxy::didPerformClientRedirectShared):

2022-03-15  Kimmo Kinnunen  <kkinnunen@apple.com>

        RemoteGraphicsContextGLProxy omits context lost checks for back and front buffer access functions
        https://bugs.webkit.org/show_bug.cgi?id=237891

        Reviewed by Myles Maxfield.

        Add missing isContextLost() checks to RemoteGraphicsContextGLProxy functions.
        WebGLRenderingContextBase would call as follows:
        void WebGLRenderingContextBase::paintRenderingResultsToCanvas()
        {
            if (isContextLostOrPending())
                return;
            ...
            m_context->prepareForDisplay();
            ...
            m_context->paintCompositedResultsToCanvas();
        }

        The context may be ok during the first check but then fail later,
        and so all the context functions need to check for validity.

        No new tests, testing hooks need non-trivial implementation.
        This is tracked in bug 237891.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::paintRenderingResultsToCanvas):
        (WebKit::RemoteGraphicsContextGLProxy::paintCompositedResultsToCanvas):
        (WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia):

2022-03-15  Myles C. Maxfield  <mmaxfield@apple.com>

        [WebGPU] Allow for scheduling asynchronous work
        https://bugs.webkit.org/show_bug.cgi?id=237755

        Reviewed by Kimmo Kinnunen.

        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::workQueueInitialize):
        (WebKit::RemoteGPU::workQueueUninitialize):
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::createGPUForWebGPU const):

2022-03-15  Chris Dumez  <cdumez@apple.com>

        Fix logging in GPUProcessProxy::didCreateContextForVisibilityPropagation()
        https://bugs.webkit.org/show_bug.cgi?id=237907

        Reviewed by Simon Fraser.

        LayerHostingContextID is a uint32_t. The current printing ends up logging negative values:
        `GPUProcessProxy::didCreateContextForVisibilityPropagation: webPageProxyID: 7, pagePID: 79, contextID: -2041854761`

        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::didCreateContextForVisibilityPropagation):

2022-03-15  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Indefinite hang when printing using a UIPrintPageRenderer
        https://bugs.webkit.org/show_bug.cgi?id=237835
        rdar://90002387

        Reviewed by Devin Rousso.

        r290186 adopted UIKit API to support printing web content on a
        background thread, to avoid blocking the main thread while waiting
        on PDF data from the web process. However, the changes made the
        assumption that, with the new API, all printing would be performed on
        a background thread. While this is the case when using
        UIPrintInteractionController, clients can also print using
        UIPrintPageRenderer on the main thread. The background thread logic
        waits on a semaphore, until PDF data is received on the main thread.
        However, if the logic runs on the main thread, it will wait on the
        semaphore indefinitely.

        To fix, restore the original sync IPC codepath when performing printing
        on the main thread. Additionally, make the BinarySemaphore a
        unique_ptr, so that it can be signalled and reset in failure scenarios,
        regardless of whether a thread was waiting on the semaphore. This
        change also allows us to avoid creating the BinarySemaphore unless it
        is actually needed.

        All uses of HAVE(UIKIT_BACKGROUND_THREAD_PRINTING) are removed, as the
        API adoption only involves a method override, which is harmless in
        builds that lack support for the new API.

        * UIProcess/WebPageProxy.h:
        * UIProcess/_WKWebViewPrintFormatter.mm:
        * UIProcess/_WKWebViewPrintFormatterInternal.h:
        * UIProcess/ios/WKContentView.mm:
        (-[WKContentView _processDidExit]):
        (-[WKContentView _wk_pageCountForPrintFormatter:]):
        (-[WKContentView _waitForDrawToPDFCallbackIfNeeded]):
        (-[WKContentView _wk_printedDocument]):
        * UIProcess/ios/WKPDFView.mm:
        * UIProcess/ios/WebPageProxyIOS.mm:
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/WebPage/ios/WebPageIOS.mm:

2022-03-15  Per Arne Vollan  <pvollan@apple.com>

        [macOS][WP] Add required syscall
        https://bugs.webkit.org/show_bug.cgi?id=237846
        <rdar://90249455>

        Reviewed by Brent Fulgham.

        Add required syscall to the WebContent process' sandbox on macOS.

        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-15  Jer Noble  <jer.noble@apple.com>

        [Cocoa] Adopt AVAssetPrefersSandboxedParsingOptionKey
        https://bugs.webkit.org/show_bug.cgi?id=237832
        <rdar://89029829>

        Reviewed by Eric Carlson.

        Propogate the `prefersSandboxedParsing()` property across to the GPU process.

        * GPUProcess/media/RemoteMediaPlayerProxy.h:
        * GPUProcess/media/RemoteMediaPlayerProxyConfiguration.h:
        (WebKit::RemoteMediaPlayerProxyConfiguration::encode const):
        (WebKit::RemoteMediaPlayerProxyConfiguration::decode):
        * WebProcess/GPU/media/RemoteMediaPlayerManager.cpp:
        (WebKit::RemoteMediaPlayerManager::createRemoteMediaPlayer):

2022-03-15  Wenson Hsieh  <wenson_hsieh@apple.com>

        [macOS] Tooltip no longer disappears after leaving hovered element
        https://bugs.webkit.org/show_bug.cgi?id=237815
        rdar://90187247

        Reviewed by Tim Horton.

        On certain versions of macOS, AppKit's tooltip management system installs tracking areas (NSTrackingArea) using
        `-addTrackingArea:` instead of tracking rects. This breaks our existing mechanism for keeping track of the
        current tracking rect owner by overriding `-addTrackingRect:owner:userData:assumeInside:` (which assumes that
        the only client that adds tracking rects is the tooltip manager). Since `-addTrackingRect:` isn't called,
        `m_trackingRectOwner` remains nil, which causes both `sendToolTipMouseExited()` and `sendToolTipMouseEntered()`
        to be no-ops.

        To fix this, in the case where `m_trackingRectOwner` is nil, we instead fall back on `-[WKWebView trackingAreas]`
        and look for an NSTrackingArea that's owned by AppKit's NSToolTipManager. We then send fake mouse enter/exit
        events to this owner, the same way as we currently do.

        * UIProcess/Cocoa/WebViewImpl.h:
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::addTrackingRect):
        (WebKit::WebViewImpl::addTrackingRectWithTrackingNum):
        (WebKit::WebViewImpl::addTrackingRectsWithTrackingNums):
        (WebKit::WebViewImpl::toolTipTrackingAreaOwner const):
        (WebKit::WebViewImpl::sendToolTipMouseExited):
        (WebKit::WebViewImpl::sendToolTipMouseEntered):

2022-03-15  Youenn Fablet  <youenn@apple.com>

        Mark permission as denied if system forbids access to camera and/or microphone
        https://bugs.webkit.org/show_bug.cgi?id=237823

        Reviewed by Eric Carlson.

        If application has not set the camera/microphone usage string, we do not need to call ther permission delegate.
        Ditto if TCC prompt is denied. Instead, we can return deny if possible or prompt otherwise.
        Covered by API test.

        * UIProcess/UserMediaPermissionRequestManagerProxy.cpp:
        * UIProcess/UserMediaPermissionRequestManagerProxy.h:
        * UIProcess/WebPageProxy.cpp:

2022-03-15  Youenn Fablet  <youenn@apple.com>

        Rename VideoSampleMetadata to VideoFrameTimeMetadata
        https://bugs.webkit.org/show_bug.cgi?id=237593

        Reviewed by Eric Carlson.

        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        (WebKit::MediaRecorderPrivate::videoSampleAvailable):
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        (WebKit::RemoteCaptureSampleManager::videoFrameAvailable):
        (WebKit::RemoteCaptureSampleManager::videoFrameAvailableCV):
        (WebKit::RemoteCaptureSampleManager::RemoteVideo::videoFrameAvailable):
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.messages.in:
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.h:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.cpp:
        (WebKit::RemoteRealtimeVideoSource::videoSampleAvailable):
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:

2022-03-14  Wenson Hsieh  <wenson_hsieh@apple.com>

        [Mail Compose] Spelling and grammar context menu items need custom identifiers
        https://bugs.webkit.org/show_bug.cgi?id=237804
        rdar://90124049

        Reviewed by Aditya Keerthi.

        Introduce several new context menu item identifier strings that correspond to the default spelling and grammar
        menu items that appear when showing the context menu for editable content, such that Mail can replace or
        customize behaviors around these items in compose, via WKUIDelegate.

        Test: ContextMenuTests.ProposedMenuContainsSpellingMenu

        * UIProcess/API/Cocoa/WKMenuItemIdentifiers.mm:
        * UIProcess/API/Cocoa/WKMenuItemIdentifiersPrivate.h:
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::menuItemIdentifier):

2022-03-14  Antoine Quint  <graouts@webkit.org>

        [model] <model interactive> doesn't allow model to be rotated on iOS
        https://bugs.webkit.org/show_bug.cgi?id=237831
        rdar://89698247

        Reviewed by Simon Fraser.

        Remove the call to set userInteractionEnabled on the WKModelView when created. This property
        is now set via the layer tree application code from the GraphicsLayer::userInteractionEnabled()
        value.

        * UIProcess/ios/WKModelView.mm:
        (-[WKModelView initWithModel:]):

2022-03-14  Simon Fraser  <simon.fraser@apple.com>

        Do a single IPC for MarkSurfaceNonVolatile and SwapToValidFrontBuffer
        https://bugs.webkit.org/show_bug.cgi?id=237814

        Reviewed by Tim Horton.

        Now that we know how to group the calls to markSurfaceNonVolatile() followed by
        swapToValidFrontBuffer(), we can do them with a single sync IPC to the GPU process, passing
        supportsPartialRepaint and hasEmptyDirtyRegion.

        RemoteLayerWithRemoteRenderingBackingStoreCollection::prepareBackingStoreBuffers() takes
        care to avoid IPCs for layers which don't need display, which is important for performance.

        Introduce the SwapBuffersDisplayRequirement enum which is returned, and used to know if
        we have to do a full repaint.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::prepareBuffersForDisplay):
        (WebKit::RemoteRenderingBackend::markSurfaceNonVolatile): Deleted.
        (WebKit::RemoteRenderingBackend::swapToValidFrontBuffer): Deleted.
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/RemoteRenderingBackend.messages.in:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        (WebKit::RemoteLayerBackingStore::hasEmptyDirtyRegion const):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::operator<<):
        (WebKit::RemoteLayerBackingStore::prepareToDisplay):
        (WebKit::RemoteLayerBackingStore::prepareBuffers):
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::prepareBackingStoreBuffers):
        (WebKit::RemoteLayerBackingStoreCollection::makeFrontBufferNonVolatile): Deleted.
        (WebKit::RemoteLayerBackingStoreCollection::swapToValidFrontBuffer): Deleted.
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::prepareBackingStoreBuffers):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::makeFrontBufferNonVolatile): Deleted.
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::swapToValidFrontBuffer): Deleted.
        * Shared/RemoteLayerTree/SwapBuffersDisplayRequirement.h: Added.
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::prepareBuffersForDisplay):
        (WebKit::RemoteRenderingBackendProxy::swapToValidFrontBuffer): Deleted.
        (WebKit::RemoteRenderingBackendProxy::markSurfaceNonVolatile): Deleted.
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:

2022-03-14  Alex Christensen  <achristensen@webkit.org>

        Revert r290659
        https://bugs.webkit.org/show_bug.cgi?id=237296

        It caused a performance regression.

        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (WebKit::NetworkSessionCocoa::createWebSocketTask):

2022-03-14  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291206.
        https://bugs.webkit.org/show_bug.cgi?id=237829

        Introduced perf regression

        Reverted changeset:

        "Adjust when
        _setPrivacyProxyFailClosedForUnreachableNonMainHosts is
        called"
        https://bugs.webkit.org/show_bug.cgi?id=237735
        https://commits.webkit.org/r291206

2022-03-14  Kimmo Kinnunen  <kkinnunen@apple.com>

        WebGL context should use discrete gpu if the context is created when the window is on external monitor, ANGLE Metal backend
        https://bugs.webkit.org/show_bug.cgi?id=236487

        Reviewed by Kenneth Russell.

        Before, the ChromeClient passed PlatformDisplayID to the createGraphicsContextGL. This was ignored.
        After, pass the PlatformGPUID as part of GraphicsContextGLAttributes. 

        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::createGraphicsContextGL const):
        * WebProcess/WebCoreSupport/WebChromeClient.h:

2022-03-12  Simon Fraser  <simon.fraser@apple.com>

        In RemoteLayerBackingStore, group makeFrontBufferNonVolatile() and swapToValidFrontBuffer() into a single function
        https://bugs.webkit.org/show_bug.cgi?id=237806

        Reviewed by Tim Horton.

        As a step towards reducing the number of sync IPC calls when displaying layers, refactor
        code in RemoteLayerBackingStore so that we can do the makeFrontBufferNonVolatile()
        and swapToValidFrontBuffer() in a single function. Its return value indicates whether
        we need to do any display, or a full display.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::operator<<):
        (WebKit::RemoteLayerBackingStore::prepareToDisplay):
        (WebKit::RemoteLayerBackingStore::prepareBuffers):
        (WebKit::RemoteLayerBackingStore::paintContents): Fix an assertion that fired for WebGL.
        (WebKit::RemoteLayerBackingStore::swapBuffers): Deleted.

2022-03-12  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291209.
        https://bugs.webkit.org/show_bug.cgi?id=237811

        Re-land 290754 due to mis-blaming

        Reverted changeset:

        "Unreviewed, reverting r290754."
        https://bugs.webkit.org/show_bug.cgi?id=237808
        https://commits.webkit.org/r291209

2022-03-12  Tim Horton  <timothy_horton@apple.com>

        Adopt FALLBACK_PLATFORM_NAME in place of FALLBACK_PLATFORM
        https://bugs.webkit.org/show_bug.cgi?id=237809

        Reviewed by Per Arne Vollan.

        * Configurations/SDKVariant.xcconfig:

2022-03-12  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r290754.
        https://bugs.webkit.org/show_bug.cgi?id=237808

        Introduced launch regression

        Reverted changeset:

        "[iOS] Seatbelt sandbox profile entitlement is deprecated"
        https://bugs.webkit.org/show_bug.cgi?id=237374
        https://commits.webkit.org/r290754

2022-03-11  Alex Christensen  <achristensen@webkit.org>

        Adjust when _setPrivacyProxyFailClosedForUnreachableNonMainHosts is called
        https://bugs.webkit.org/show_bug.cgi?id=237735
        <rdar://89972004>

        Reviewed by Geoff Garen.

        It was originally being called differently between main resources and subresources on the same domain,
        causing them to use connections with different properties, so we couldn't share connections any more.
        This will make it so that more connections are shared, which should fix the performance regression from
        no longer sharing connections to the same domain.

        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):

2022-03-11  Simon Fraser  <simon.fraser@apple.com>

        Unreviewed logging removal.

        Revert an ALWAYS_LOG_WITH_STREAM() that I inadvertently committed back to a
        LOG_WITH_STREAM().

        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::swapToValidFrontBuffer):

2022-03-11  Chris Dumez  <cdumez@apple.com>

        IPC thread's QOS should match the sending thread's QOS when calling sendSync()
        https://bugs.webkit.org/show_bug.cgi?id=237800
        <rdar://problem/90061548>

        Reviewed by Geoffrey Garen.

        IPC thread's QOS should match the sending thread's QOS when calling sendSync(), since it blocks the calling thread.

        * Platform/IPC/Connection.cpp:
        (IPC::Connection::sendSyncMessage):

2022-03-11  Simon Fraser  <simon.fraser@apple.com>

        Move RemoteLayerBackingStore flusher creation into RemoteLayerBackingStoreCollection
        https://bugs.webkit.org/show_bug.cgi?id=237798

        Reviewed by Tim Horton.

        Move the code that creates layer flushers from RemoteLayerTreeDrawingArea into
        RemoteLayerBackingStoreCollection, per the FIXME.

        RemoteLayerBackingStoreCollection::didFlushLayers() then becomes internal, and gets renamed
        to updateUnreachableBackingStores(). Now we only need to schedule the volatility timer from
        one place.

        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::didFlushLayers):
        (WebKit::RemoteLayerBackingStoreCollection::updateUnreachableBackingStores):
        * WebProcess/WebPage/RemoteLayerTree/RemoteLayerTreeDrawingArea.mm:
        (WebKit::RemoteLayerTreeDrawingArea::updateRendering):

2022-03-11  Wenson Hsieh  <wenson_hsieh@apple.com>

        Refactor the filter block in DocumentMarkerController::filterMarkers() to return an enum type
        https://bugs.webkit.org/show_bug.cgi?id=237794

        Reviewed by Megan Gardner.

        Drive-by fix: only remove the spellchecking document marker in `removeAnnotationRelativeToSelection` if the
        annotation string of the marker matches the given annotation string to the method.

        * WebProcess/WebPage/Cocoa/TextCheckingControllerProxy.mm:
        (WebKit::TextCheckingControllerProxy::removeAnnotationRelativeToSelection):
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::clearDictationAlternatives):

2022-03-11  Alex Christensen  <achristensen@webkit.org>

        Finish implementing modify-headers actions for WKContentRuleList SPI
        https://bugs.webkit.org/show_bug.cgi?id=237784
        <rdar://72433048>

        Reviewed by Tim Hatcher.

        * UIProcess/API/APIContentRuleListStore.h:

2022-03-11  Nikolaos Mouchtaris  <nmouchtaris@apple.com>

        [iOS] Fix ovserscroll-behavior for main document
        https://bugs.webkit.org/show_bug.cgi?id=237696

        Reviewed by Simon Fraser.

        Get value of over scroll behavior from root scrolling node to set whether root 
        UIScrollView should rubber band or not. Add new UIScrollView SPI.

        * Platform/spi/ios/UIKitSPI.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _updateScrollViewForTransaction:]):
        * UIProcess/RemoteLayerTree/RemoteScrollingCoordinatorProxy.cpp:
        (WebKit::RemoteScrollingCoordinatorProxy::rootNode const):
        * UIProcess/RemoteLayerTree/RemoteScrollingCoordinatorProxy.h:
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeScrollingNodeDelegateIOS.h:
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeScrollingNodeDelegateIOS.mm:
        (WebKit::ScrollingTreeScrollingNodeDelegateIOS::updateScrollViewForOverscrollBehavior):
        (WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren):

2022-03-11  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Unreviewed build fix after r291177
        https://bugs.webkit.org/show_bug.cgi?id=237797
        rdar://problem/90183881

        Remove unused move that is breaking iOS build

        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:

2022-03-11  Simon Fraser  <simon.fraser@apple.com>

        Do buffer swapping on all RemoteLayerBackingStores before painting all of them
        https://bugs.webkit.org/show_bug.cgi?id=237752

        Reviewed by Tim Horton.

        Buffer swapping requires sync IPC with the GPU Process, but painting can be asynchronous, so
        do all the sync IPC before all the async IPC to avoid serializing everything.

        During the recursive PlatformCALayerRemote::recursiveBuildTransaction() we now call
        prepareToDisplay() which does the buffer swapping, and then we paint all the reachable
        backing stores via RemoteLayerTreeContext::buildTransaction().

        This is a 9% perf improvement on the "Images" MotionMark subtest.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::prepareToDisplay):
        (WebKit::RemoteLayerBackingStore::display): Deleted.
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::paintReachableBackingStoreContents):
        (WebKit::RemoteLayerBackingStoreCollection::didFlushLayers): The local variables can
        be pointers, rather than using references to pointers.
        (WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatile): Ditto
        * WebProcess/WebPage/RemoteLayerTree/PlatformCALayerRemote.cpp:
        (WebKit::PlatformCALayerRemote::recursiveBuildTransaction):
        * WebProcess/WebPage/RemoteLayerTree/RemoteLayerTreeContext.mm:
        (WebKit::RemoteLayerTreeContext::buildTransaction):

2022-03-11  Per Arne Vollan  <pvollan@apple.com>

        [macOS] Image decoders should be restricted for Mail
        https://bugs.webkit.org/show_bug.cgi?id=237717
        <rdar://89827733>

        Reviewed by Geoffrey Garen.

        We already restrict image decoders for Mail on iOS. We should do so on macOS too.

        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode const):
        (WebKit::WebProcessCreationParameters::decode):
        * Shared/WebProcessCreationParameters.h:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformInitializeWebProcess):
        * WebProcess/cocoa/WebProcessCocoa.mm:
        (WebKit::WebProcess::platformInitializeWebProcess):
        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-11  Chris Dumez  <cdumez@apple.com>

        Delay responsiveness checks for the Network Process until it has finished initialization
        https://bugs.webkit.org/show_bug.cgi?id=237782
        <rdar://88226412>

        Reviewed by Geoffrey Garen.

        Delay responsiveness checks for the Network Process until it has finished initialization.
        Network process initialization can be slow but we have evidence that it is not truly
        hung since we see network process terminations right as the network process is initiating
        the WebProcess connection later on.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::initializeNetworkProcess):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * UIProcess/AuxiliaryProcessProxy.cpp:
        (WebKit::AuxiliaryProcessProxy::didFinishLaunching):
        (WebKit::AuxiliaryProcessProxy::beginResponsivenessChecks):
        (WebKit::AuxiliaryProcessProxy::startResponsivenessTimer):
        * UIProcess/AuxiliaryProcessProxy.h:
        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::didFinishLaunching):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess):
        * UIProcess/WebAuthentication/WebAuthnProcessProxy.cpp:
        (WebKit::WebAuthnProcessProxy::didFinishLaunching):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::didFinishLaunching):

2022-03-11  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Add support for -[UITextInput removeEmojiAlternatives] on WKContentView
        https://bugs.webkit.org/show_bug.cgi?id=237742
        rdar://89647018

        Reviewed by Kate Cheney.

        Add support for `-removeEmojiAlternatives`, which removes all dictation alternatives at the current selection,
        whose text alternative strings only contain emojis. See below for more details.

        * Platform/spi/ios/TextInputSPI.h:
        * UIProcess/Cocoa/PageClientImplCocoa.h:
        * UIProcess/Cocoa/PageClientImplCocoa.mm:
        (WebKit::PageClientImplCocoa::replaceDictationAlternatives):

        Add PageClient plumbing to the new AlternativeTextUIController methods in WebCore to replace an existing
        dictation context's text alternatives.

        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::dictationAlternativesAtSelection):

        We expand the selection range by one character here since `DocumentMarkerController::markersInRange()` does not
        include document markers that end exactly at the given range.

        (WebKit::WebPageProxy::clearDictationAlternatives):

        Add two helper methods on WebPageProxy: one to query all dictation alternative identifiers that intersect with
        the current selection range, and another to remove all dictation alternative document markers whose
        DictationContext matches an identifier in a given list of identifiers.

        * UIProcess/PageClient.h:
        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView removeEmojiAlternatives]):

        Implement the new SPI method with a two-step process:

        1.  Request the list of dictation context IDs at the selection; for each ID, we either (a) replace the text
            alternatives for that context ID with a new NSTextAlternatives object that doesn't have any of the emoji-
            only alternatives that appear in the original NSTextAlternatives, or (b) remove the NSTextAlternatives and
            dictation context ID mapping entirely, if all the alternatives only contain emojis.

        2.  For all the text alternatives that were removed in step 1 (due to only containing emojis), clear out all
            document markers corresponding to those text alternatives in the document.

        * WebProcess/WebPage/Cocoa/TextCheckingControllerProxy.mm:
        (WebKit::TextCheckingControllerProxy::removeAnnotationRelativeToSelection):
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::dictationAlternativesAtSelection):
        (WebKit::WebPage::clearDictationAlternatives):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-03-11  Simon Fraser  <simon.fraser@apple.com>

        Some minor refactoring in RemoteLayerBackingStore
        https://bugs.webkit.org/show_bug.cgi?id=237749

        Reviewed by Tim Horton.

        Simplify RemoteLayerBackingStore a little, primarily to push the setNeedsDisplay() calls
        when swapToValidFrontBuffer() returns WebCore::SetNonVolatileResult::Empty out to the
        callers, so it's clearer when m_dirtyRegion gets mutated.

        In order to pass SetNonVolatileResult around more, change setBufferVolatility(bool) into
        setBufferVolatile() and setFrontBufferNonVolatile(), which makes it clear that we only ever
        set the front buffer to non-volatile.

        Also move the call to clearBackendHandle() into
        RemoteLayerWithRemoteRenderingBackingStoreCollection, since it's about GPU process.

        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::swapToValidFrontBuffer):
        (WebKit::RemoteLayerBackingStore::applySwappedBuffers):
        (WebKit::RemoteLayerBackingStore::swapBuffers):
        (WebKit::RemoteLayerBackingStore::setContents):
        (WebKit::RemoteLayerBackingStore::display):
        (WebKit::RemoteLayerBackingStore::paintContents):
        (WebKit::RemoteLayerBackingStore::setBufferVolatile):
        (WebKit::RemoteLayerBackingStore::setFrontBufferNonVolatile):
        (WebKit::RemoteLayerBackingStore::willMakeBufferVolatile): Deleted.
        (WebKit::RemoteLayerBackingStore::didMakeFrontBufferNonVolatile): Deleted.
        (WebKit::RemoteLayerBackingStore::setBufferVolatility): Deleted.
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStoreCollection.mm:
        (WebKit::RemoteLayerBackingStoreCollection::makeFrontBufferNonVolatile):
        (WebKit::RemoteLayerBackingStoreCollection::swapToValidFrontBuffer):
        (WebKit::RemoteLayerBackingStoreCollection::markBackingStoreVolatile):
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.h:
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::makeFrontBufferNonVolatile):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::swapToValidFrontBuffer):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::collectBackingStoreBufferIdentifiersToMarkVolatile):

2022-03-11  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Cancel running operations in ASA on navigation
        https://bugs.webkit.org/show_bug.cgi?id=237452
        rdar://problem/89781990

        Reviewed by Brent Fulgham.

        Pre-ASA WebAuthn calls cancel requests on navigation via calling authenticatorManager.cancelRequest
        in WebPageProxy. In WebAuthn calls that go through ASA, the authenticatorManager lives in the ASA
        process, so calls won't be cancelled on navigation.

        This patch attempts to cancel ongoing operations whenever a WebAuthenticatorCoordinatorProxy that
        uses ASA is destroyed, effectively cancelling requests on reload or navigation.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.cpp:
        (WebKit::WebAuthenticatorCoordinatorProxy::~WebAuthenticatorCoordinatorProxy):
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.h:

2022-03-11  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Support authenticatorSelection.residentKey ResidentKeyRequirement
        https://bugs.webkit.org/show_bug.cgi?id=237567
        rdar://89788378

        Reviewed by Brent Fulgham and Chris Dumez.

        In Web Authentication level one, relying parties can specify authenticatorSelection.residentKeyRequired,
        to signify they require a client-side discoverable credential. However, if the authenticator does not
        support client-side discoverable credentials, the rp has no way to clarify they want a client-side
        discoverable credential only if available.

        This patch implements authenticatorSelection.residentKeyRequired introduced in level 2, which has three
        values 'Preferred', 'Required', and 'Discouraged'. This allows RPs to create a client-side discoverable
        credential if possible.

        * UIProcess/API/Cocoa/_WKAuthenticatorSelectionCriteria.h:
        * UIProcess/API/Cocoa/_WKAuthenticatorSelectionCriteria.mm:
        (-[_WKAuthenticatorSelectionCriteria init]):
        * UIProcess/API/Cocoa/_WKResidentKeyRequirement.h: Copied from Source/WebKit/UIProcess/API/Cocoa/_WKAuthenticatorSelectionCriteria.mm.
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (residentKey):
        (authenticatorSelectionCriteria):
        (+[_WKWebAuthenticationPanel encodeMakeCredentialCommandWithClientDataJSON:options:userVerificationAvailability:]):
        (+[_WKWebAuthenticationPanel encodeMakeCredentialCommandWithClientDataHash:options:userVerificationAvailability:]):
        * UIProcess/WebAuthentication/fido/CtapAuthenticator.cpp:
        (WebKit::CtapAuthenticator::makeCredential):
        * WebKit.xcodeproj/project.pbxproj:

2022-03-11  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo] DrawingAreaWC::sendUpdateAC should keep a WeakPtr of this for the reply handler
        https://bugs.webkit.org/show_bug.cgi?id=237757

        Reviewed by Don Olmstead.

        WinCairo Release was crashing by visiting some random web sites
        for several minutes. The reply handler in
        DrawingAreaWC::sendUpdateAC should check that `this` object is
        still alive with `weakThis`.

        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::DrawingAreaWC::sendUpdateAC): Capture weakThis for the
        reply handler and check it.

2022-03-11  Per Arne Vollan  <pvollan@apple.com>

        [macOS][WP] Add required sys call to sandbox
        https://bugs.webkit.org/show_bug.cgi?id=237739

        Reviewed by Chris Dumez.

        Add a rarely used, but required syscall, to the WebContent process sandbox on macOS.

        * WebProcess/com.apple.WebProcess.sb.in:

2022-03-11  Youenn Fablet  <youenn@apple.com>

        Do capture video frame downsampling in GPUProcess
        https://bugs.webkit.org/show_bug.cgi?id=237316
        <rdar://problem/89959777>

        Reviewed by Eric Carlson.

        Instead of cloning within WebProcess, we know clone in GPUProcess for camera tracks.
        This allows to keep using IOSurfaces when several tracks are using the same device with different resolutions.
        Since display tracks are already cloned remotely, we can merge RemoteRealtimeDisplaySource and RemoteRealtimeVideoSource.

        We no longer need to stop the source in ~SourceProxy given we are removing ourselves from observing the source.
        We rename UserMediaCaptureManagerProxy end to remove  and requestToEnd to endProducingData.

        * SourcesCocoa.txt:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.h:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.messages.in:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.cpp: Removed.
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.h: Removed.
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.cpp:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.h:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.cpp:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:
        * WebProcess/cocoa/UserMediaCaptureManager.cpp:
        * WebProcess/cocoa/UserMediaCaptureManager.h:

2022-03-10  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Add a unit tests to check the remote inspector HTTP server
        https://bugs.webkit.org/show_bug.cgi?id=237708

        Reviewed by Michael Catanzaro.

        Ensure we close the socket if it's still open when the remote inspector client is destroyed.

        * UIProcess/Inspector/glib/RemoteInspectorClient.cpp:
        (WebKit::RemoteInspectorClient::~RemoteInspectorClient):

2022-03-11  Diego Pino Garcia  <dpino@igalia.com>

        [GLIB] Debian Stable & Ubuntu LTS build is failing after r291093
        https://bugs.webkit.org/show_bug.cgi?id=237756

        Reviewed by Carlos Garcia Campos.

        Use `soup_websocket_connection_send_message` when SOUP < 2.67.3.

        * UIProcess/Inspector/glib/RemoteInspectorHTTPServer.cpp:

2022-03-11  Tim Horton  <timothy_horton@apple.com>

        Disable WebGL and DOM GPU process when some dependencies are unavailable
        https://bugs.webkit.org/show_bug.cgi?id=237700
        <rdar://problem/88735051>

        Reviewed by Eric Carlson.

        * Shared/WebPreferencesDefaultValues.cpp:
        (WebKit::defaultUseGPUProcessForDOMRenderingEnabled):
        (WebKit::defaultUseGPUProcessForWebGLEnabled):

2022-03-10  Sihui Liu  <sihui_liu@apple.com>

        Abandoned memory in NetworkStorageManager::m_temporaryBlobPathsByConnection
        https://bugs.webkit.org/show_bug.cgi?id=237734

        Reviewed by Chris Dumez.

        Remove items from m_temporaryBlobPathsByConnection when connection is closed.

        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::stopReceivingMessageFromConnection):

2022-03-10  Chris Dumez  <cdumez@apple.com>

        Fix naming in NetworkProcessProxy::registerRemoteWorkerClientProcess()
        https://bugs.webkit.org/show_bug.cgi?id=237737

        Reviewed by Geoffrey Garen.

        Fix naming in NetworkProcessProxy::registerRemoteWorkerClientProcess() to store referring to
        shared workers and add logging.

        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::registerRemoteWorkerClientProcess):
        (WebKit::NetworkProcessProxy::unregisterRemoteWorkerClientProcess):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:

2022-03-10  Michael Saboff  <msaboff@apple.com>

        Catalyst JavaScriptCore, WebCore, WebKitLegacy, and WebKit shouldn't be copied to the Secondary Path
        https://bugs.webkit.org/show_bug.cgi?id=237748

        Reviewed by Mark Lam.

        Updated the configuration to exclude copying Catalyst build products to the secondary path.

        * Configurations/Base.xcconfig:

2022-03-10  Chris Dumez  <cdumez@apple.com>

        [macOS] WebContent processes crash with XPC_EXIT_REASON_SIGTERM_TIMEOUT when logging out
        https://bugs.webkit.org/show_bug.cgi?id=237398
        <rdar://88940229>

        Reviewed by Alexey Proskuryakov.

        Because we don't use RunningBoard on macOS, we leak an OS transaction to control the lifetime of our XPC
        services ourselves. However, one of the side effects of leaking this transaction is that the default SIGTERM
        handler doesn't cleanly exit our XPC services when logging out or rebooting. This led to crashes with
        XPC_EXIT_REASON_SIGTERM_TIMEOUT as termination reason (rdar://88940229).

        To address the issue, we now set our own SIGTERM handler that calls _exit(0) to exit cleanly. In the future,
        we should likely adopt RunningBoard on macOS and control our lifetime via process assertions instead of
        leaking this OS transaction.

        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.h:
        (WebKit::XPCServiceInitializer):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.mm:
        (WebKit::setOSTransaction):
        (WebKit::XPCServiceExit):
        (WebKit::osTransaction): Deleted.

2022-03-10  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Add support for -[UITextInput addTextAlternatives:] on WKContentView
        https://bugs.webkit.org/show_bug.cgi?id=237691
        rdar://89647018

        Reviewed by Aditya Keerthi.

        Work towards refactoring support for dictation alternatives on iOS; this patch adds support for an optional,
        private UITextInput protocol method on WKContentView, which clients can use to directly insert
        NSTextAlternatives for a given string of matching text (i.e., if the given string matches text at or before the
        current selection range).

        Tests:  TextAlternatives.AddTextAlternativesWithMatch
                TextAlternatives.AddTextAlternativesWithSelectedMatch
                TextAlternatives.AddTextAlternativesWithoutMatch

        * Scripts/webkit/messages.py:
        (headers_for_type):

        Add support for sending WebCore::DictationContext as an IPC message argument.

        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::addDictationAlternative):

        Register the dictation alternative (NSTextAlternative) on the page client, and send a message to the web process
        to try and insert document markers corresponding to this dictation alternative. If, for whatever reason, we fail
        to map dictation alternatives to an editable DOM range, make sure we automatically unregister this text
        alternative as well.

        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView addTextAlternatives:]):
        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::WebPage::addDictationAlternative):

        Given a string to match and a dictation alternative identifier context, try to search for the matching string
        before (or in) the selection; if found, install the dictation alternatives in the match range, as a document
        marker.

        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-03-10  Jean-Yves Avenard  <jya@apple.com>

        MediaSampleCursor should iterate over the samples contained in the MediaSamplesBlock
        https://bugs.webkit.org/show_bug.cgi?id=237677
        rdar://80869041

        Reviewed by Eric Carlson.

        No change in observable behaviour for now, as the current code can't
        produce MediaSamplesBlock with more than one sub-sample.
        Tests will be added in bug 236754.

        * Shared/mac/MediaFormatReader/MediaSampleByteRange.h:
        * Shared/mac/MediaFormatReader/MediaSampleCursor.cpp:
        (WebKit::stepIterator):
        (WebKit::MediaSampleCursor::MediaSampleCursor):
        (WebKit::MediaSampleCursor::locateIterator const):
        (WebKit::MediaSampleCursor::setLocator const):
        (WebKit::MediaSampleCursor::locateMediaSample const):
        (WebKit::MediaSampleCursor::locateTiming const):
        (WebKit::MediaSampleCursor::stepInOrderedMap):
        (WebKit::MediaSampleCursor::stepInPresentationTime):
        (WebKit::MediaSampleCursor::getMediaSample const):
        (WebKit::MediaSampleCursor::getSyncInfo const):
        (WebKit::MediaSampleCursor::copyFormatDescription const):
        (WebKit::MediaSampleCursor::copySampleLocation const):
        * Shared/mac/MediaFormatReader/MediaSampleCursor.h: The Locator type and
        the templated code making use of it makes use of strong assumptions that
        the iterator can only be made of one type or the other.
        As such, the originally obvious solution to expand the Locator type with
        a MediaSamplesBlock iterator ended up being overly complex.
        So instead we define an additional member m_currentEntry
        and will add all the logic handling in the stepIterator method.
        It should be noted that while the MediaSampleCursor implements all the
        methods of MTPluginSampleCursor; in practice only the following appear used:
        - stepInDecodeOrderAndReportStepsTaken
        - getSampleTiming
        - getSyncInfo
        - copyFormatDescription

2022-03-10  Kate Cheney  <katherine_cheney@apple.com>

        Markup dropdown menu not working in Mail compose
        https://bugs.webkit.org/show_bug.cgi?id=237726
        <rdar://problem/89777983>

        Reviewed by Wenson Hsieh.

        Partial revert of r290103. No need for standardShareMenu in the
        services menu case.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::setupServicesMenu):

2022-03-10  Chris Fleizach  <cfleizach@apple.com>

        AX: Support updated WebSpeech API
        https://bugs.webkit.org/show_bug.cgi?id=237614
        <rdar://problem/89981851>

        Reviewed by Andres Gonzalez.

        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::boundaryEventOccurred):
        * UIProcess/WebPageProxy.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::boundaryEventOccurred):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-03-10  Chris Dumez  <cdumez@apple.com>

        Optimize further the passing of data across threads
        https://bugs.webkit.org/show_bug.cgi?id=237695

        Reviewed by Geoffrey Garen.

        Optimize further the passing of data across threads by leveraging the optimized
        version of isolatedCopy() on r-value references whenever possible.

        * NetworkProcess/NetworkSocketChannel.cpp:
        (WebKit::NetworkSocketChannel::didReceiveMessageError):
        * NetworkProcess/NetworkSocketChannel.h:
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::fileSystemGetDirectory):
        * NetworkProcess/storage/NetworkStorageManager.h:
        * UIProcess/Automation/WebAutomationSession.cpp:
        (WebKit::WebAutomationSession::dispatchMessageFromRemote):
        * UIProcess/Automation/WebAutomationSession.h:
        * UIProcess/Inspector/WebPageDebuggable.cpp:
        (WebKit::WebPageDebuggable::dispatchMessageFromRemote):
        * UIProcess/Inspector/WebPageDebuggable.h:
        * WebProcess/Cache/WebCacheStorageConnection.cpp:
        (WebKit::WebCacheStorageConnection::retrieveRecords):
        * WebProcess/Cache/WebCacheStorageConnection.h:
        * WebProcess/Network/WebSocketChannel.cpp:
        (WebKit::WebSocketChannel::fail):
        (WebKit::WebSocketChannel::didReceiveText):
        (WebKit::WebSocketChannel::didReceiveMessageError):
        * WebProcess/Network/WebSocketChannel.h:
        * WebProcess/WebCoreSupport/WebStorageConnection.cpp:
        (WebKit::WebStorageConnection::getPersisted):
        (WebKit::WebStorageConnection::fileSystemGetDirectory):
        * WebProcess/WebCoreSupport/WebStorageConnection.h:

2022-03-10  Sihui Liu  <sihui_liu@apple.com>

        IndexedDB: free memory used by database connection on low-memory warning
        https://bugs.webkit.org/show_bug.cgi?id=237673

        Reviewed by Chris Dumez.

        * NetworkProcess/storage/IDBStorageManager.cpp:
        (WebKit::IDBStorageManager::handleLowMemoryWarning):
        * NetworkProcess/storage/IDBStorageManager.h:
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::handleLowMemoryWarning):

2022-03-10  Chris Dumez  <cdumez@apple.com>

        Unreviewed, reverting r290795.

        Caused crashes <rdar://problem/89970722>

        Reverted changeset:

        "[macOS] WebContent processes crash with
        XPC_EXIT_REASON_SIGTERM_TIMEOUT when logging out"
        https://bugs.webkit.org/show_bug.cgi?id=237398
        https://commits.webkit.org/r290795

2022-03-10  Youenn Fablet  <youenn@apple.com>

        Remove RemoteVideoSample
        https://bugs.webkit.org/show_bug.cgi?id=237592

        Reviewed by Eric Carlson.

        Send RemoteVideoSample data directly as IPC message parameters instead of inside RemoteVideoSample.
        Fix timeStampNs by sending them back to WebProcess and divide them by 1000 to put them as milliseconds, as expected by libwebrtc backend.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::LibWebRTCCodecsProxy::createDecoderCallback):
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::completedDecodingCV):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.messages.in:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        (WebKit::RemoteCaptureSampleManager::videoFrameAvailable):
        (WebKit::RemoteCaptureSampleManager::videoFrameAvailableCV):
        (WebKit::RemoteCaptureSampleManager::videoSampleAvailable): Deleted.
        (WebKit::RemoteCaptureSampleManager::videoSampleAvailableCV): Deleted.
        (WebKit::RemoteCaptureSampleManager::RemoteVideo::videoSampleAvailable): Deleted.
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.messages.in:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.cpp:

2022-03-10  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Add initial support for PDF documents using PDF.js
        https://bugs.webkit.org/show_bug.cgi?id=237513

        Reviewed by Michael Catanzaro.

        Build PDF.js resources into the library.

        * PdfJSGResources.cmake: Added.
        * PlatformGTK.cmake:
        * PlatformWPE.cmake:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::canShowMIMEType): Claim to support PDF documents when PDF.js is enabled.
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::canShowMIMEType const): Ditto.

2022-03-08  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Web Inspector: make it possible to use the remote inspector from other browsers
        https://bugs.webkit.org/show_bug.cgi?id=237601

        Reviewed by Michael Catanzaro.

        This is no longer possible since we switched to the new remote inspector. We don't want to bring the legacy
        remote inspector back, but it should be possible to use a mixed approach, using a WebSocket for the inspector
        protocol communication, but still using the new remote inspector code. This patch adds a simple HTTP browser to
        server the inspector resources and open WebSocket connection to the inspector. It pretends to be a remote
        inspector client, so we don't need any change in the current remote inspector implementation. The server is only
        started when the env var WEBKIT_INSPECTOR_HTTP_SERVER is present, and the inspector server is started for the
        same host but using a free port.

        * PlatformWPE.cmake:
        * SourcesGTK.txt:
        * SourcesWPE.txt:
        * UIProcess/API/glib/WebKitInitialize.cpp:
        (WebKit::initializeRemoteInspectorServer): Start the HTTP server if the env var WEBKIT_INSPECTOR_HTTP_SERVER is present.
        (WebKit::webkitInitialize): Just call initializeRemoteInspectorServer().
        * UIProcess/API/gtk/WebKitRemoteInspectorProtocolHandler.cpp:
        (WebKit::RemoteInspectorProtocolHandler::handleRequest): Use RemoteInspectorClient::buildTargetListPage().
        * UIProcess/Inspector/glib/RemoteInspectorClient.cpp:
        (WebKit::RemoteInspectorClient::inspect): Only call RemoteInspectorProxy::load() for UI inspector type.
        (WebKit::RemoteInspectorClient::buildTargetListPage const): Build the target list page, using message handlers
        for UI inspector and window.open for the HTTP inspector.
        * UIProcess/Inspector/glib/RemoteInspectorClient.h:
        (WebKit::RemoteInspectorClient::targets const): Deleted.
        * UIProcess/Inspector/glib/RemoteInspectorHTTPServer.cpp: Added.
        (WebKit::RemoteInspectorHTTPServer::singleton):
        * UIProcess/Inspector/glib/RemoteInspectorHTTPServer.h: Added.

2022-03-09  Megan Gardner  <megan_gardner@apple.com>

        Combine Lookup and Define.
        https://bugs.webkit.org/show_bug.cgi?id=237627
        rdar://26205225

        Reviewed by Tim Horton.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _defineForWebView:]):

2022-03-09  Per Arne Vollan  <pvollan@apple.com>

        The accessibility library should be soft linked optionally
        https://bugs.webkit.org/show_bug.cgi?id=236513

        Reviewed by Geoffrey Garen.

        The accessibility library should be soft linked optionally, since it is not always present.

        * Shared/Cocoa/AuxiliaryProcessCocoa.mm:
        (WebKit::handleAXPreferenceChange):
        (WebKit::AuxiliaryProcess::handlePreferenceChange):

2022-03-09  Don Olmstead  <don.olmstead@sony.com>

        [CMake] Associate platform specific configuration with WinCairo
        https://bugs.webkit.org/show_bug.cgi?id=237668

        Reviewed by Basuke Suzuki.

        Move all cairo and curl platform configuration under a check for WinCairo. This arranges
        platform config in a consistent manner.

        * PlatformWin.cmake:

2022-03-09  Sihui Liu  <sihui_liu@apple.com>

        File System Access: disallows names that are not permitted by underlying file system
        https://bugs.webkit.org/show_bug.cgi?id=237635
        rdar://89291566

        We use FileSystem::fileSystemRepresentation to convert input name to a name that is permitted in current file 
        system. This patch makes File System Access API to throw error if the input name does not match the converted 
        name. 

        Reviewed by Youenn Fablet.

        * NetworkProcess/storage/FileSystemStorageHandle.cpp:
        (WebKit::isValidFileName):
        (WebKit::FileSystemStorageHandle::requestCreateHandle):
        (WebKit::FileSystemStorageHandle::removeEntry):
        (WebKit::FileSystemStorageHandle::move):

2022-03-09  Jon Lee  <jonlee@apple.com>

        Update feature flags for WebGL
        https://bugs.webkit.org/show_bug.cgi?id=237666
        rdar://problem/90040981

        Reviewed by Geoffrey Garen.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-watchos.plist:

2022-03-09  Simon Fraser  <simon.fraser@apple.com>

        Move RemoteLayerBackingStore::Buffer.isVolatile into ImageBufferBackend
        https://bugs.webkit.org/show_bug.cgi?id=237631

        Reviewed by Tim Horton.
        
        'isVolatile' is a property of a specific image buffer, so it makes more sense to have it in
        ImageBuffer[Backend] than RemoteLayerBackingStore. This also allows GPU Process code to
        maintain volatility state in the web process, which reduces the amount of IPC needed when
        making the front buffer non-volatile before display.

        So ImageBufferBackend gets volatilityState()/setVolatilityState(), accessed via ImageBuffer.
        This state is maintained by RemoteRenderingBackendProxy for remote buffers. We set the state
        to volatile when we receive the IPC reply for markSurfacesVolatile(), which requires
        changing the reply to list buffers for which making volatile was successful.

        RemoteLayerWithRemoteRenderingBackingStoreCollection::makeFrontBufferNonVolatile() can now
        early return when the buffer is already non-volatile, and we have a backend handle (recall
        that we clear backend handles when trying to make a buffer volatile).

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::markSurfacesVolatile):
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/RemoteRenderingBackend.messages.in:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::applySwappedBuffers):
        (WebKit::RemoteLayerBackingStore::setBufferVolatile):
        (WebKit::RemoteLayerBackingStore::setBufferNonVolatile):
        (WebKit::RemoteLayerBackingStore::didMakeFrontBufferNonVolatile):
        (WebKit::RemoteLayerBackingStore::Buffer::discard):
        * Shared/RemoteLayerTree/RemoteLayerWithRemoteRenderingBackingStoreCollection.mm:
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::RemoteLayerWithRemoteRenderingBackingStoreCollection):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::makeFrontBufferNonVolatile):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::collectBackingStoreBufferIdentifiersToMarkVolatile):
        (WebKit::RemoteLayerWithRemoteRenderingBackingStoreCollection::sendMarkBuffersVolatile): Call the completion handler inside the callback.
        * WebProcess/GPU/graphics/ImageBufferBackendHandleSharing.h:
        (WebKit::ImageBufferBackendHandleSharing::hasBackendHandle const):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::swapToValidFrontBuffer):
        (WebKit::RemoteRenderingBackendProxy::markSurfaceNonVolatile):
        (WebKit::RemoteRenderingBackendProxy::markSurfacesVolatile):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:
        * WebProcess/GPU/graphics/cocoa/ImageBufferRemoteIOSurfaceBackend.cpp:
        (WebKit::ImageBufferRemoteIOSurfaceBackend::createBackendHandle const):
        (WebKit::ImageBufferRemoteIOSurfaceBackend::hasBackendHandle const):
        * WebProcess/GPU/graphics/cocoa/ImageBufferRemoteIOSurfaceBackend.h:

2022-03-09  Youenn Fablet  <youenn@apple.com>

        Allow to pass webrtc video frame buffers through RealtimeMediaSource based pipelines
        https://bugs.webkit.org/show_bug.cgi?id=236131
        <rdar://problem/88805580>

        Reviewed by Eric Carlson.

        Add optimization support for VideoFrameLibWebRTC writing into shared memory.
        This removes the need to convert the webrtc video frame into a CVPixelBuffer, just to send it to GPUProcess for rendering.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-03-09  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo] Improve WCTiledBacking and TextureMapperSparseBackingStore
        https://bugs.webkit.org/show_bug.cgi?id=237355

        Reviewed by Don Olmstead.

        TextureMapperSparseBackingStore simply had a Vector to have all
        tiles. If a web page had a very large layer, the vector was
        extended to be able to keep all tiles, and it performed poorly.
        Use a HashMap to keep tiles only in the coverage rect.

        GraphicsLayerWC had only one dirty rect, and created a
        ImageBuffer for all tiles to update. Change it to have one dirty
        rect for one tile, and create a ImageBuffer for every dirty tile.

        * GPUProcess/graphics/wc/WCScene.cpp:
        (WebKit::WCScene::update):
        * PlatformWin.cmake:
        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::flushLayerImageBuffers):
        * WebProcess/WebPage/wc/GraphicsLayerWC.cpp:
        (WebKit::GraphicsLayerWC::setSize):
        (WebKit::GraphicsLayerWC::recursiveCommitChanges):
        * WebProcess/WebPage/wc/WCTileGrid.cpp: Added.
        (WebKit::WCTileGrid::Tile::Tile):
        (WebKit::WCTileGrid::Tile::addDirtyRect):
        (WebKit::WCTileGrid::Tile::clearDirtyRect):
        (WebKit::WCTileGrid::Tile::hasDirtyRect const):
        (WebKit::WCTileGrid::setSize):
        (WebKit::WCTileGrid::tileRectFromPixelRect):
        (WebKit::WCTileGrid::tileSizeFromPixelSize):
        (WebKit::WCTileGrid::tilePixelSize const):
        (WebKit::WCTileGrid::addDirtyRect):
        (WebKit::WCTileGrid::clearDirtyRects):
        (WebKit::WCTileGrid::ensureTile):
        (WebKit::WCTileGrid::setCoverageRect):
        * WebProcess/WebPage/wc/WCTileGrid.h: Added.
        (WebKit::WCTileGrid::Tile::willRemove const):
        (WebKit::WCTileGrid::Tile::setWillRemove):
        (WebKit::WCTileGrid::Tile::dirtyRect):
        (WebKit::WCTileGrid::tiles):
        * WebProcess/WebPage/wc/WCUpateInfo.h:
        (WebKit::WCTileUpdate::encode const):
        (WebKit::WCTileUpdate::decode):
        (WebKit::WCLayerUpateInfo::encode const):
        (WebKit::WCLayerUpateInfo::decode):

2022-03-09  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Stop using the env var WEBKIT_INSPECTOR_SERVER to connect to the inspector
        https://bugs.webkit.org/show_bug.cgi?id=237646

        Reviewed by Adrian Perez de Castro.

        Use it only in the UI process to start the server, but propagate the address to web process using creation
        parameters.

        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode const): Encode inspectorServerAddress.
        (WebKit::WebProcessCreationParameters::decode): Decode inspectorServerAddress.
        * Shared/WebProcessCreationParameters.h: Add inspectorServerAddress.
        * UIProcess/API/glib/WebKitInitialize.cpp:
        (WebKit::initializeRemoteInspectorServer): Set RemoteInspector::s_inspectorServerAddress if the server started
        successfully.
        * UIProcess/glib/WebProcessPoolGLib.cpp:
        (WebKit::WebProcessPool::platformInitializeWebProcess): Set inspectorServerAddress parameter from
        RemoteInspector::s_inspectorServerAddress value.
        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::platformInitializeWebProcess): Set RemoteInspector::s_inspectorServerAddress from creation
        parameter value.

2022-03-09  Youenn Fablet  <youenn@apple.com>

        Scope capture sources by page identifiers
        https://bugs.webkit.org/show_bug.cgi?id=237359

        Reviewed by Eric Carlson.

        Pass PageIdentifier where appropriate.
        Make use of PageIdentifier in UserMediaCaptureManagerProxy:
        - For microphone, if there is a source with a different device,
          fail the source as we are not yet supporting concurrent captures.
        - For camera, if there is a source with a different device,
          fail the source as we are not yet supporting concurrent captures (only on iOS).
          Otherwise, if there is a matching source, clone it so that we reduce the overhead
          of creating a new source (setting up a camera can be an expensive operation).
        We silently fail (meaning there is no console log message for now, while still firing ended event) but add release logging to detect this case.
        Minor refactoring to have one message in case capture source ends (stopped or failing) instead of two.

        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.h:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.messages.in:
        * UIProcess/SpeechRecognitionRemoteRealtimeMediaSource.cpp:
        * UIProcess/SpeechRecognitionRemoteRealtimeMediaSource.h:
        * UIProcess/SpeechRecognitionRemoteRealtimeMediaSourceManager.cpp:
        * UIProcess/WebPageProxy.cpp:
        * WebProcess/Speech/SpeechRecognitionRealtimeMediaSourceManager.cpp:
        * WebProcess/Speech/SpeechRecognitionRealtimeMediaSourceManager.h:
        * WebProcess/Speech/SpeechRecognitionRealtimeMediaSourceManager.messages.in:
        * WebProcess/cocoa/RemoteRealtimeAudioSource.cpp:
        * WebProcess/cocoa/RemoteRealtimeAudioSource.h:
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.cpp:
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.h:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.cpp:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.h:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.cpp:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:
        * WebProcess/cocoa/UserMediaCaptureManager.cpp:
        * WebProcess/cocoa/UserMediaCaptureManager.h:
        * WebProcess/cocoa/UserMediaCaptureManager.messages.in:

2022-03-08  Jean-Yves Avenard  <jya@apple.com>

        Have MediaFormatReader plugin use WebMParser directly
        https://bugs.webkit.org/show_bug.cgi?id=237594
        rdar://89960307

        Reviewed by Eric Carlson.

        Directly build the sample tables from the sample's offset/size without
        first build MediaSampleAVFObjC objects.
        The MTPluginByteSourceRef interface unfortunately doesn't allow to skip a
        given number of bytes, and you must read the content into a buffer to be
        able to continue reading the resource.
        As such, we continue to have to create SharedBuffer objects for each sample.
        However, those objects are now much shorter lived and not dispatched to
        other work queues. So the peak memory usage when playing a webm is
        significantly reduced: a 50% memory reduction (from 440MB to 202MB with a sample video)

        * Shared/mac/MediaFormatReader/MediaFormatReader.cpp:
        (WebKit::MediaFormatReader::parseByteSource):
        (WebKit::MediaFormatReader::parsedInitializationData):
        (WebKit::MediaFormatReader::parsedMediaData):
        (WebKit::MediaFormatReader::didProvideMediaData):
        (WebKit::MediaFormatReader::finishParsing):
        * Shared/mac/MediaFormatReader/MediaFormatReader.h:
        * Shared/mac/MediaFormatReader/MediaSampleByteRange.cpp:
        (WebKit::MediaSampleByteRange::MediaSampleByteRange):
        (WebKit::MediaSampleByteRange::trackID const):
        (WebKit::MediaSampleByteRange::platformSample const):
        (WebKit::MediaSampleByteRange::presentationTime const):
        (WebKit::MediaSampleByteRange::decodeTime const):
        (WebKit::MediaSampleByteRange::duration const):
        (WebKit::MediaSampleByteRange::sizeInBytes const):
        (WebKit::MediaSampleByteRange::presentationSize const):
        (WebKit::MediaSampleByteRange::flags const):
        (WebKit::MediaSampleByteRange::byteRange const):
        (WebKit::MediaSampleByteRange::offsetTimestampsBy):
        (WebKit::MediaSampleByteRange::setTimestamps):
        * Shared/mac/MediaFormatReader/MediaSampleByteRange.h:
        * Shared/mac/MediaFormatReader/MediaSampleCursor.cpp:
        (WebKit::MediaSampleCursor::copyFormatDescription const):
        * Shared/mac/MediaFormatReader/MediaTrackReader.cpp:
        (WebKit::MediaTrackReader::addSample):
        (WebKit::MediaTrackReader::copyProperty):
        * Shared/mac/MediaFormatReader/MediaTrackReader.h:

2022-03-08  John Cunningham  <johncunningham@apple.com>

        RemoteGraphicsContextGL ReadPixels does not preserve contents for area that is not part of the Framebuffer
        https://bugs.webkit.org/show_bug.cgi?id=222410
        <rdar://problem/75025951>

        Reviewed by Kimmo Kinnunen.

        Make a copy of the data buffer passed into readnpixels so that reads outside the framebuffer contain
        the expected results, rather than being zero'd.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::readnPixels0):
        (WebKit::RemoteGraphicsContextGL::readnPixels1):
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGLFunctionsGenerated.h:
        (bufferSubData):
        (readnPixels0): Deleted.
        (readnPixels1): Deleted.
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::readnPixels):
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.h:
        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::readnPixels): Deleted.

2022-03-08  Simon Fraser  <simon.fraser@apple.com>

        Fix assertion when DOM Rendering in GPU Process is enabled with accelerated drawing disabled
        https://bugs.webkit.org/show_bug.cgi?id=237626

        Reviewed by Tim Horton.

        Override releaseGraphicsContext() in the base class (which asserts). This subclass
        doesn't need to do anything; releaseGraphicsContext() is only relevant for IOSurface-
        based backends.

        * WebProcess/GPU/graphics/ImageBufferShareableBitmapBackend.h:

2022-03-08  Jean-Yves Avenard  <jya@apple.com>

        Split SourceBufferParserWebM and have platform agnostic WebMParser
        https://bugs.webkit.org/show_bug.cgi?id=237472
        rdar://problem/89810969

        Reviewed by Eric Carlson.

        * Shared/mac/MediaFormatReader/MediaSampleByteRange.cpp:
        (WebKit::MediaSampleByteRange::MediaSampleByteRange):
        * Shared/mac/MediaFormatReader/MediaSampleByteRange.h: MediaSampleByteRange.h
        didn't need to inherit from MediaSampleAVFObjC. 

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        Allow adattributiond to read and execute dylibs in /usr/lib on iOS
        https://bugs.webkit.org/show_bug.cgi?id=237625
        <rdar://89809031>

        Reviewed by Per Arne Vollan.

        WebKit's other sandboxes allow this.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        Remove unused _grantAccessToPreferenceService
        https://bugs.webkit.org/show_bug.cgi?id=237623

        Reviewed by Per Arne Vollan.

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _grantAccessToPreferenceService]): Deleted.
        * UIProcess/API/Cocoa/WKWebViewPrivate.h:
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::grantAccessToPreferenceService): Deleted.
        * UIProcess/Cocoa/WebProcessProxyCocoa.mm:
        (WebKit::WebProcessProxy::unblockPreferenceServiceIfNeeded): Deleted.
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebProcessProxy.h:
        * WebProcess/WebProcess.h:
        * WebProcess/WebProcess.messages.in:
        * WebProcess/cocoa/WebProcessCocoa.mm:
        (WebKit::WebProcess::notifyPreferencesChanged):
        (WebKit::WebProcess::unblockPreferenceService): Deleted.

2022-03-08  Wenson Hsieh  <wenson_hsieh@apple.com>

        Rename TextRecognitionUtilities.* to ImageAnalysisUtilities.*
        https://bugs.webkit.org/show_bug.cgi?id=237613
        rdar://89982051

        Reviewed by Tim Horton and Kate Cheney.

        Rename TextRecognitionUtilities.h and TextRecognitionUtilities.mm to ImageAnalysisUtilities.h and
        ImageAnalysisUtilities.mm, respectively. This is because this file now contains helper functions that are not
        specific to just the text recognition aspect of visual intelligence features on Cocoa, but rather encompass a
        variety of image analysis helpers.

        * Platform/cocoa/ImageAnalysisUtilities.h: Renamed from Source/WebKit/Platform/cocoa/TextRecognitionUtilities.h.
        * Platform/cocoa/ImageAnalysisUtilities.mm: Renamed from Source/WebKit/Platform/cocoa/TextRecognitionUtilities.mm.
        (WebKit::createImageAnalyzer):
        (WebKit::createImageAnalyzerRequest):
        (WebKit::floatQuad):
        (WebKit::floatQuads):
        (WebKit::makeTextRecognitionResult):
        (WebKit::textRecognitionEnhancementsSystemFeatureEnabled):
        (WebKit::imageAnalysisQueueSystemFeatureEnabled):
        (WebKit::isImageAnalysisMarkupSystemFeatureEnabled):
        (WebKit::isLiveTextAvailableAndEnabled):
        * Shared/Cocoa/WebPreferencesDefaultValuesCocoa.mm:
        * SourcesCocoa.txt:
        * UIProcess/Cocoa/WebViewImpl.h:
        * UIProcess/ios/ProcessAssertionIOS.mm:
        (-[WKRBSAssertionDelegate assertion:didInvalidateWithError:]):

        Drive-by fix: additionally tweak a couple of release logging arguments that are currently in reverse order.

        * UIProcess/ios/WKActionSheetAssistant.mm:
        * UIProcess/ios/WKContentViewInteraction.mm:
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        * UIProcess/mac/WebPageProxyMac.mm:
        * WebKit.xcodeproj/project.pbxproj:

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        Enable CFPrefs direct mode in adattributiond
        https://bugs.webkit.org/show_bug.cgi?id=237620

        Reviewed by Per Arne Vollan.

        This makes it not try to connect to cfprefsd, which is not allowed by the sandbox.

        * Shared/EntryPointUtilities/Cocoa/Daemon/PCMDaemonEntryPoint.mm:
        (WebKit::PCMDaemonMain):

2022-03-08  Diego Pino Garcia  <dpino@igalia.com>

        [macOS] Unreviewed, non-unified build fixes
        https://bugs.webkit.org/show_bug.cgi?id=237586

        * Shared/ModelIdentifier.h:
        * UIProcess/API/Cocoa/_WKRemoteWebInspectorViewControllerInternal.h:
        * UIProcess/Cocoa/ModelElementControllerCocoa.mm:
        * UIProcess/ModelElementController.h:

2022-03-08  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Using WebAuthn within cross-origin iframe elements
        https://bugs.webkit.org/show_bug.cgi?id=222240
        rdar://problem/74830748

        Reviewed by Brent Fulgham.

        This patch relaxes the requirement to perform a Web Authentication assertion
        inside an i-frame with the "publickey-credentials-get" feature policy from
        'same-site' to 'cross-origin with consent'.

        There is an additional requirement that there is only a single cross-origin
        parent to present to the user in the prompt. If we can't display the updated
        prompt, then cross-origin assertions are not allowed. 

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::configureAssertionOptions):
        (WebKit::configurationAssertionRequestContext):
        (WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest):
        * UIProcess/WebAuthentication/WebAuthenticationRequestData.h:
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.cpp:
        (WebKit::WebAuthenticatorCoordinatorProxy::makeCredential):
        (WebKit::WebAuthenticatorCoordinatorProxy::getAssertion):
        (WebKit::WebAuthenticatorCoordinatorProxy::handleRequest):
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.h:
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.messages.in:
        * WebProcess/WebAuthentication/WebAuthenticatorCoordinator.cpp:
        (WebKit::WebAuthenticatorCoordinator::getAssertion):
        * WebProcess/WebAuthentication/WebAuthenticatorCoordinator.h:

2022-03-08  Chris Dumez  <cdumez@apple.com>

        Rename allow-custom-protocols-navigation to allow-top-navigation-to-custom-protocols
        https://bugs.webkit.org/show_bug.cgi?id=237605

        Reviewed by Darin Adler.

        Rename allow-custom-protocols-navigation sandbox flag to allow-top-navigation-to-custom-protocols as per:
        - https://github.com/whatwg/html/pull/7654#issuecomment-1054219407

        There is no backward compatibility risk since support for this flag was added very recently
        in r290958.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::frameSandboxAllowsOpeningExternalCustomProtocols):

2022-03-08  Sihui Liu  <sihui_liu@apple.com>

        File System Access: throw exception if file or directory cannot be accessed in file system
        https://bugs.webkit.org/show_bug.cgi?id=237537

        Reviewed by Youenn Fablet.

        When a FileSystemHandle is created, we will ensure that corresponding directory or file exists (create the 
        directory or file if it does not exist yet). However, we did not check the result of the file system calls.
        That means, we may fail to create the file (e.g. due to no disk space, or cases in rdar://89291566), but we 
        still return success to the FileSystemHandle creation request. We should fix this by checking the file system
        call's result before completing the request.  

        * NetworkProcess/storage/FileSystemStorageHandle.cpp:
        (WebKit::FileSystemStorageHandle::create):
        (WebKit::FileSystemStorageHandle::FileSystemStorageHandle):
        * NetworkProcess/storage/FileSystemStorageHandle.h:
        * NetworkProcess/storage/FileSystemStorageManager.cpp:
        (WebKit::FileSystemStorageManager::createHandle):

2022-03-08  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r291006.
        https://bugs.webkit.org/show_bug.cgi?id=237618

        Introduced build failure.

        Reverted changeset:

        "The accessibility library should be soft linked optionally"
        https://bugs.webkit.org/show_bug.cgi?id=236513
        https://commits.webkit.org/r291006

2022-03-08  Per Arne Vollan  <pvollan@apple.com>

        The accessibility library should be soft linked optionally
        https://bugs.webkit.org/show_bug.cgi?id=236513

        Reviewed by Geoffrey Garen.

        The accessibility library should be soft linked optionally, since it is not always present.

        * Shared/Cocoa/AuxiliaryProcessCocoa.mm:
        (WebKit::handleAXPreferenceChange):
        (WebKit::AuxiliaryProcess::handlePreferenceChange):

2022-03-08  Chris Dumez  <cdumez@apple.com>

        Optimize further the passing of data across threads
        https://bugs.webkit.org/show_bug.cgi?id=237568

        Reviewed by Geoffrey Garen.

        Optimize further the passing of data across threads by leveraging more broadly the optimized
        versions of isolatedCopy() on r-value references.

        * NetworkProcess/Classifier/ResourceLoadStatisticsDatabaseStore.cpp:
        (WebKit::ResourceLoadStatisticsDatabaseStore::hasStorageAccess):
        (WebKit::ResourceLoadStatisticsDatabaseStore::grantStorageAccessInternal):
        (WebKit::ResourceLoadStatisticsDatabaseStore::dumpResourceLoadStatistics):
        (WebKit::ResourceLoadStatisticsDatabaseStore::clear):
        (WebKit::ResourceLoadStatisticsDatabaseStore::updateCookieBlocking):
        * NetworkProcess/Classifier/ResourceLoadStatisticsDatabaseStore.h:
        * NetworkProcess/Classifier/ResourceLoadStatisticsMemoryStore.h:
        * NetworkProcess/Classifier/ResourceLoadStatisticsStore.cpp:
        (WebKit::ResourceLoadStatisticsStore::removeDataRecords):
        (WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData):
        (WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains):
        (WebKit::ResourceLoadStatisticsStore::logTestingEvent):
        * NetworkProcess/Classifier/ResourceLoadStatisticsStore.h:
        * NetworkProcess/Classifier/WebResourceLoadStatisticsStore.cpp:
        (WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode):
        (WebKit::WebResourceLoadStatisticsStore::hasStorageAccess):
        (WebKit::WebResourceLoadStatisticsStore::requestStorageAccess):
        (WebKit::WebResourceLoadStatisticsStore::grantStorageAccess):
        (WebKit::WebResourceLoadStatisticsStore::logFrameNavigation):
        (WebKit::WebResourceLoadStatisticsStore::logUserInteraction):
        (WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration):
        (WebKit::WebResourceLoadStatisticsStore::clearUserInteraction):
        (WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction):
        (WebKit::WebResourceLoadStatisticsStore::setLastSeen):
        (WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting):
        (WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce):
        (WebKit::WebResourceLoadStatisticsStore::setPrevalentResource):
        (WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource):
        (WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics):
        (WebKit::WebResourceLoadStatisticsStore::isPrevalentResource):
        (WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource):
        (WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder):
        (WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder):
        (WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo):
        (WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource):
        (WebKit::WebResourceLoadStatisticsStore::setGrandfathered):
        (WebKit::WebResourceLoadStatisticsStore::isGrandfathered):
        (WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain):
        (WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain):
        (WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo):
        (WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom):
        (WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo):
        (WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom):
        (WebKit::WebResourceLoadStatisticsStore::deleteAndRestrictWebsiteDataForRegistrableDomains):
        (WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting):
        * NetworkProcess/Classifier/WebResourceLoadStatisticsStore.h:
        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::updateQuotaBasedOnSpaceUsageForTesting):
        (WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB):
        (WebKit::NetworkConnectionToWebProcess::logUserInteraction):
        (WebKit::NetworkConnectionToWebProcess::hasStorageAccess):
        (WebKit::NetworkConnectionToWebProcess::requestStorageAccess):
        * NetworkProcess/NetworkConnectionToWebProcess.h:
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::isGrandfathered):
        (WebKit::NetworkProcess::isPrevalentResource):
        (WebKit::NetworkProcess::isVeryPrevalentResource):
        (WebKit::NetworkProcess::setGrandfathered):
        (WebKit::NetworkProcess::setPrevalentResource):
        (WebKit::NetworkProcess::setPrevalentResourceForDebugMode):
        (WebKit::NetworkProcess::setVeryPrevalentResource):
        (WebKit::NetworkProcess::clearPrevalentResource):
        (WebKit::NetworkProcess::setSubframeUnderTopFrameDomain):
        (WebKit::NetworkProcess::isRegisteredAsRedirectingTo):
        (WebKit::NetworkProcess::isRegisteredAsSubFrameUnder):
        (WebKit::NetworkProcess::setSubresourceUnderTopFrameDomain):
        (WebKit::NetworkProcess::setSubresourceUniqueRedirectTo):
        (WebKit::NetworkProcess::setSubresourceUniqueRedirectFrom):
        (WebKit::NetworkProcess::isRegisteredAsSubresourceUnder):
        (WebKit::NetworkProcess::setTopFrameUniqueRedirectTo):
        (WebKit::NetworkProcess::setTopFrameUniqueRedirectFrom):
        (WebKit::NetworkProcess::setLastSeen):
        (WebKit::NetworkProcess::mergeStatisticForTesting):
        (WebKit::NetworkProcess::insertExpiredStatisticForTesting):
        (WebKit::NetworkProcess::logFrameNavigation):
        (WebKit::NetworkProcess::logUserInteraction):
        (WebKit::NetworkProcess::hadUserInteraction):
        (WebKit::NetworkProcess::isRelationshipOnlyInDatabaseOnce):
        (WebKit::NetworkProcess::clearUserInteraction):
        (WebKit::NetworkProcess::didCommitCrossSiteLoadWithDataTransfer):
        (WebKit::NetworkProcess::setCrossSiteLoadWithLinkDecorationForTesting):
        (WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains):
        (WebKit::NetworkProcess::deleteCookiesForTesting):
        (WebKit::NetworkProcess::registrableDomainsWithWebsiteData):
        (WebKit::NetworkProcess::didIncreaseQuota):
        (WebKit::NetworkProcess::renameOriginInWebsiteData):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::setResourceLoadStatisticsEnabled):
        (WebKit::NetworkSession::deleteAndRestrictWebsiteDataForRegistrableDomains):
        * NetworkProcess/NetworkSession.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManager.cpp:
        (WebKit::PrivateClickMeasurementManager::clearForRegistrableDomain):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManager.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManagerInterface.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManagerProxy.cpp:
        (WebKit::PCM::ManagerProxy::clearForRegistrableDomain):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementManagerProxy.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementStore.cpp:
        (WebKit::PCM::Store::attributePrivateClickMeasurement):
        (WebKit::PCM::Store::privateClickMeasurementToStringForTesting const):
        (WebKit::PCM::Store::clearPrivateClickMeasurementForRegistrableDomain):
        (WebKit::PCM::Store::clearSentAttribution):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementStore.h:
        * NetworkProcess/WebStorage/LocalStorageDatabaseTracker.h:
        (WebKit::LocalStorageDatabaseTracker::OriginDetails::isolatedCopy const):
        (WebKit::LocalStorageDatabaseTracker::OriginDetails::isolatedCopy):
        * NetworkProcess/WebStorage/StorageManager.cpp:
        (WebKit::StorageManager::getSessionStorageOriginsCrossThreadCopy const):
        (WebKit::StorageManager::getLocalStorageOriginsCrossThreadCopy const):
        * NetworkProcess/cache/CacheStorageEngine.cpp:
        (WebKit::CacheStorage::Engine::writeFile):
        (WebKit::CacheStorage::Engine::readFile):
        (WebKit::CacheStorage::Engine::removeFile):
        (WebKit::CacheStorage::Engine::writeSizeFile):
        (WebKit::CacheStorage::Engine::getDirectories):
        (WebKit::CacheStorage::Engine::clearCachesForOriginFromDirectories):
        (WebKit::CacheStorage::Engine::deleteNonEmptyDirectoryOnBackgroundThread):
        * NetworkProcess/cache/CacheStorageEngine.h:
        * NetworkProcess/cache/CacheStorageEngineCache.cpp:
        (WebKit::CacheStorage::RecordInformation::isolatedCopy):
        (WebKit::CacheStorage::TraversalResult::isolatedCopy):
        (WebKit::CacheStorage::Cache::open):
        (WebKit::CacheStorage::isolatedCopy): Deleted.
        * NetworkProcess/cache/CacheStorageEngineCache.h:
        * NetworkProcess/cache/CacheStorageEngineCaches.cpp:
        (WebKit::CacheStorage::Caches::retrieveOriginFromDirectory):
        (WebKit::CacheStorage::Caches::clear):
        (WebKit::CacheStorage::Caches::readCachesFromDisk):
        * NetworkProcess/cache/NetworkCache.cpp:
        (WebKit::NetworkCache::Cache::clear):
        * NetworkProcess/cache/NetworkCacheIOChannel.h:
        (WebKit::NetworkCache::IOChannel::open):
        * NetworkProcess/cache/NetworkCacheStorage.cpp:
        (WebKit::NetworkCache::Storage::updateFileModificationTime):
        (WebKit::NetworkCache::Storage::dispatchReadOperation):
        (WebKit::NetworkCache::Storage::dispatchWriteOperation):
        (WebKit::NetworkCache::Storage::traverse):
        (WebKit::NetworkCache::Storage::clear):
        * NetworkProcess/cache/NetworkCacheStorage.h:
        * NetworkProcess/storage/IDBStorageConnectionToClient.cpp:
        (WebKit::IDBStorageConnectionToClient::didGetAllDatabaseNamesAndVersions):
        * NetworkProcess/storage/IDBStorageConnectionToClient.h:
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::didIncreaseQuota):
        (WebKit::NetworkStorageManager::moveData):
        (WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths):
        (WebKit::NetworkStorageManager::resetQuotaUpdatedBasedOnUsageForTesting):
        * NetworkProcess/storage/NetworkStorageManager.h:
        * Shared/API/APIString.h:
        * Shared/WebsiteData/WebsiteData.cpp:
        (WebKit::WebsiteData::isolatedCopy const):
        (WebKit::WebsiteData::isolatedCopy):
        (WebKit::WebsiteData::Entry::isolatedCopy const):
        (WebKit::WebsiteData::Entry::isolatedCopy):
        * Shared/WebsiteData/WebsiteData.h:
        * UIProcess/API/APIContentRuleListStore.cpp:
        (API::createExtension):
        (API::ContentRuleListStore::lookupContentRuleList):
        (API::ContentRuleListStore::compileContentRuleList):
        (API::ContentRuleListStore::removeContentRuleList):
        (API::ContentRuleListStore::getContentRuleListSource):
        * UIProcess/API/APIContentRuleListStore.h:
        * UIProcess/API/glib/WebKitUserContentFilterStore.cpp:
        (webkitUserContentFilterStoreSaveBytes):
        * UIProcess/DeviceIdHashSaltStorage.cpp:
        (WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk):
        * UIProcess/DeviceIdHashSaltStorage.h:
        (WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin::HashSaltForOrigin):
        (WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin::isolatedCopy const):
        (WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin::isolatedCopy):
        * UIProcess/WebsiteData/WebsiteDataRecord.cpp:
        (WebKit::WebsiteDataRecord::isolatedCopy const):
        (WebKit::WebsiteDataRecord::isolatedCopy):
        * UIProcess/WebsiteData/WebsiteDataRecord.h:
        * WebProcess/Storage/WebSWClientConnection.cpp:
        (WebKit::WebSWClientConnection::finishFetchingScriptInServer):
        (WebKit::WebSWClientConnection::registerServiceWorkerClient):
        * WebProcess/Storage/WebSWClientConnection.h:
        * WebProcess/Storage/WebServiceWorkerFetchTaskClient.cpp:
        (WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinish):

2022-03-08  Sihui Liu  <sihui_liu@apple.com>

        Disable CFURLCache in WebKit
        https://bugs.webkit.org/show_bug.cgi?id=237575

        Reviewed by Geoffrey Garen.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::addStorageSession):

2022-03-08  Sihui Liu  <sihui_liu@apple.com>

        File System Access: disallow empty name in FileSystemHandle
        https://bugs.webkit.org/show_bug.cgi?id=237563

        Reviewed by Youenn Fablet.

        Updated expectations of imported wpt tests.

        * NetworkProcess/storage/FileSystemStorageHandle.cpp:
        (WebKit::isValidFileName):

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        Expand adattributiond sandbox to prevent sandbox exceptions during main functionality
        https://bugs.webkit.org/show_bug.cgi?id=237580
        <rdar://89855243>

        Reviewed by Per Arne Vollan.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        WebSocket.send() should synchronously update bufferedAmount
        https://bugs.webkit.org/show_bug.cgi?id=235707

        Reviewed by Chris Dumez.

        * WebProcess/Network/WebSocketChannel.cpp:
        (WebKit::WebSocketChannel::send):
        * WebProcess/Network/WebSocketChannel.h:

2022-03-08  Alex Christensen  <achristensen@webkit.org>

        Remove unneeded Async keywords in messages.in files after r290903
        https://bugs.webkit.org/show_bug.cgi?id=237574

        Reviewed by Chris Dumez.

        * GPUProcess/graphics/wc/RemoteWCLayerTreeHost.messages.in:
        * Scripts/webkit/tests/TestWithSuperclass.messages.in:
        * WebProcess/glib/UserMediaCaptureManager.messages.in:

2022-03-08  Michael Catanzaro  <mcatanzaro@gnome.org>

        [GTK] Sync gtk-overlay-scrolling setting to web process
        https://bugs.webkit.org/show_bug.cgi?id=236476

        Reviewed by Adrian Perez de Castro.

        * Shared/gtk/GtkSettingsState.cpp:
        (WebKit::GtkSettingsState::encode const):
        (WebKit::GtkSettingsState::decode):
        * Shared/gtk/GtkSettingsState.h:
        * UIProcess/gtk/GtkSettingsManager.cpp:
        (WebKit::GtkSettingsManager::overlayScrolling const):
        (WebKit::GtkSettingsManager::settingsDidChange):
        (WebKit::GtkSettingsManager::GtkSettingsManager):
        * UIProcess/gtk/GtkSettingsManager.h:
        * WebProcess/gtk/GtkSettingsManagerProxy.cpp:
        (WebKit::GtkSettingsManagerProxy::applySettings):

2022-03-08  Youenn Fablet  <youenn@apple.com>

        Add a preference to mute video capture in case audio capture gets interrupted
        https://bugs.webkit.org/show_bug.cgi?id=237524
        <rdar://78421282>

        Reviewed by Eric Carlson.

        Add support for interrupt mock microphone devices.
        Send to WebProcess sources whether sources are interrupted each time the source muted value changes.
        Store that value in remote sources.

        * GPUProcess/GPUProcess.cpp:
        * GPUProcess/GPUProcess.h:
        * GPUProcess/GPUProcess.messages.in:
        * UIProcess/API/C/WKPage.cpp:
        * UIProcess/API/C/WKPagePrivate.h:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * UIProcess/GPU/GPUProcessProxy.cpp:
        * UIProcess/GPU/GPUProcessProxy.h:
        * UIProcess/WebPageProxy.cpp:
        * UIProcess/WebPageProxy.h:
        * WebProcess/WebPage/WebPage.cpp:
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/cocoa/RemoteRealtimeAudioSource.h:
        * WebProcess/cocoa/RemoteRealtimeDisplaySource.h:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.cpp:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.h:
        * WebProcess/cocoa/RemoteRealtimeVideoSource.h:
        * WebProcess/cocoa/UserMediaCaptureManager.cpp:
        * WebProcess/cocoa/UserMediaCaptureManager.h:
        * WebProcess/cocoa/UserMediaCaptureManager.messages.in:

2022-03-07  Simon Fraser  <simon.fraser@apple.com>

        Rename VolatilityState to SetNonVolatileResult
        https://bugs.webkit.org/show_bug.cgi?id=237562

        Reviewed by Tim Horton.

        Pure rename. I want to use VolatilityState to actually reflect state.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::markSurfaceNonVolatile):
        (WebKit::RemoteRenderingBackend::swapToValidFrontBuffer):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.h:
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::setBufferNonVolatile):
        (WebKit::RemoteLayerBackingStore::didMakeFrontBufferNonVolatile):
        * UIProcess/ViewSnapshotStore.h:
        * UIProcess/mac/ViewSnapshotStoreMac.mm:
        (WebKit::ViewSnapshot::setVolatile):
        (WebKit::ViewSnapshot::asLayerContents):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::markSurfaceNonVolatile):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.h:

2022-03-07  Brent Fulgham  <bfulgham@apple.com>

        Remove remnants of WebKit.Plugin.64.xpc service
        https://bugs.webkit.org/show_bug.cgi?id=237555
        <rdar://84485232>

        Reviewed by Alexey Proskuryakov.

        Although plugins have been disabled for a number of years, the actual code behind this
        feature was only removed this cycle (see Bugs 232462, 234354, and 234379). I noticed a few
        remaining bits of the removed plugin process that should also be cleaned up.

        * Scripts/process-entitlements.sh:
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceMain.mm:
        (WebKit::XPCServiceEventHandler):
        * Shared/mac/AuxiliaryProcessMac.mm:
        (WebKit::sandboxDirectory):
        (WebKit::applySandbox):

2022-03-07  Per Arne Vollan  <pvollan@apple.com>

        Preconnecting after process swap is a page load time improvement on some devices
        https://bugs.webkit.org/show_bug.cgi?id=237055
        <rdar://problem/89638872>

        Reviewed by Geoffrey Garen.

        On some devices we see that doing a second preconnect on HTTP/1.1 is a significant page load time improvement.
        This is due to the fact that most page loads on HTTP/1.1 will open several connections, and having two
        preconnected connections instead of one, will speed up page load time. This patch implements this by starting
        a second preconnect after the first has finished. It is important to wait until the first preconnect has
        finished, otherwise the second preconnect will go to waste, since the underlying network layer does not yet
        know if this is HTTP/1.1 or not. Since we do not see page load time improvement on iOS with this behavior,
        it is currently only enabled for macOS. The next step is to investigate why it does not seem to be a page
        load time improvement on iOS. We probably need to make sure the main resource load has started before we
        start the second preconect. This will avoid that the second preconnect returns immediately.

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::sendH2Ping):
        (WebKit::NetworkConnectionToWebProcess::preconnectTo):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::preconnectTo):
        * NetworkProcess/PreconnectTask.cpp:
        (WebKit::PreconnectTask::PreconnectTask):
        (WebKit::PreconnectTask::didFinishLoading):
        (WebKit::PreconnectTask::didFailLoading):
        (WebKit::PreconnectTask::didFinish):
        * NetworkProcess/PreconnectTask.h:
        * NetworkProcess/cache/NetworkCacheSpeculativeLoadManager.cpp:
        (WebKit::NetworkCache::SpeculativeLoadManager::preconnectForSubresource):

2022-03-07  Richard Houle  <rhoule@apple.com>

        [macCatalyst] Compilation error: WebContentProcess.xib: error: macOS xibs do not support target device type "ipad".
        https://bugs.webkit.org/show_bug.cgi?id=237549
        rdar://89912760

        Reviewed by Alexey Proskuryakov.

        Xcode for macOS 12.5 complains that we bundle Mac XIBs inside our macCatalyst builds.

        * Configurations/BaseXPCService.xcconfig:

2022-03-07  Chris Dumez  <cdumez@apple.com>

        allow-custom-protocols-navigation sandbox flag.
        https://bugs.webkit.org/show_bug.cgi?id=237269
        <rdar://problem/89899736>

        Reviewed by Geoffrey Garen.

        Add support for allow-custom-protocols-navigation iframe sandbox flag to allow sandboxed iframes
        to navigate to custom protocols, as per:
        - https://github.com/whatwg/html/pull/7654

        We recently started preventing sandboxed iframes from navigating to custom protocols, which broke
        Microsoft Teams. We added a quirk for Microsoft Teams which we should be able to drop once they
        adopt this new sandbox flag.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::frameSandboxAllowsOpeningExternalCustomProtocols):

2022-03-07  Elliott Williams  <emw@apple.com>

        DerivedSources.make: Regenerate message receiver sources on Makefile changes
        https://bugs.webkit.org/show_bug.cgi?id=237543

        Reviewed by Alexey Proskuryakov.

        This script depends on configuration and other sources in DerivedSources.make, so it should
        regenerate when they change. Fixes one-time incremental build failures caused by r290896.

        * DerivedSources.make:

2022-03-07  Alex Christensen  <achristensen@webkit.org>

        Remove unnecessary Async attribute in .messages.in files
        https://bugs.webkit.org/show_bug.cgi?id=237491

        Reviewed by Chris Dumez.

        If there is a reply and no "Synchronous" then we can infer that it is asynchronous.

        * DerivedSources-input.xcfilelist:
        * DerivedSources-output.xcfilelist:
        * DerivedSources.make:
        * GPUProcess/GPUProcess.messages.in:
        * GPUProcess/media/RemoteAudioDestinationManager.messages.in:
        * GPUProcess/media/RemoteCDMFactoryProxy.h:
        * GPUProcess/media/RemoteCDMInstanceProxy.messages.in:
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.messages.in:
        * GPUProcess/media/RemoteCDMProxy.messages.in:
        * GPUProcess/media/RemoteLegacyCDMFactoryProxy.h:
        * GPUProcess/media/RemoteMediaEngineConfigurationFactoryProxy.messages.in:
        * GPUProcess/media/RemoteMediaPlayerProxy.messages.in:
        * GPUProcess/media/RemoteMediaResourceManager.messages.in:
        * GPUProcess/media/RemoteSourceBufferProxy.messages.in:
        * GPUProcess/webrtc/RemoteAudioMediaStreamTrackRendererInternalUnitManager.messages.in:
        * GPUProcess/webrtc/RemoteMediaRecorder.messages.in:
        * GPUProcess/webrtc/RemoteMediaRecorderManager.messages.in:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayerManager.messages.in:
        * NetworkProcess/Cookies/WebCookieManager.messages.in:
        * NetworkProcess/NetworkBroadcastChannelRegistry.messages.in:
        * NetworkProcess/NetworkConnectionToWebProcess.messages.in:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/NetworkSocketChannel.messages.in:
        * NetworkProcess/ServiceWorker/WebSWServerConnection.messages.in:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.messages.in:
        * NetworkProcess/WebStorage/StorageManagerSet.messages.in:
        * NetworkProcess/cache/CacheStorageEngineConnection.messages.in:
        * NetworkProcess/cache/NetworkCache.cpp:
        (WebKit::NetworkCache::Cache::startAsyncRevalidationIfNeeded):
        * NetworkProcess/storage/NetworkStorageManager.messages.in:
        * Scripts/webkit/messages.py:
        (message_to_reply_forward_declaration):
        (message_to_struct_declaration):
        (forward_declarations_and_headers_for_replies):
        (async_message_statement):
        (sync_message_statement):
        (generate_message_handler):
        (generate_message_argument_description_implementation):
        * Scripts/webkit/model.py:
        (generate_global_model):
        * Shared/ApplePay/WebPaymentCoordinatorProxy.messages.in:
        * Shared/AuxiliaryProcess.messages.in:
        * Shared/Notifications/NotificationManagerMessageHandler.messages.in:
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.messages.in:
        * UIProcess/Cocoa/VideoFullscreenManagerProxy.messages.in:
        * UIProcess/Downloads/DownloadProxy.messages.in:
        * UIProcess/Media/AudioSessionRoutingArbitratorProxy.messages.in:
        * UIProcess/Media/RemoteMediaSessionCoordinatorProxy.messages.in:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/UserContent/WebUserContentControllerProxy.messages.in:
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.messages.in:
        * UIProcess/WebAuthentication/WebAuthnProcessProxy.cpp:
        * UIProcess/WebAuthentication/WebAuthnProcessProxy.messages.in: Removed.
        * UIProcess/WebLockRegistryProxy.messages.in:
        * UIProcess/WebPageProxy.messages.in:
        * UIProcess/WebProcessProxy.messages.in:
        * UIProcess/XR/PlatformXRSystem.messages.in:
        * UIProcess/mac/SecItemShimProxy.messages.in:
        * WebAuthnProcess/WebAuthnConnectionToWebProcess.messages.in:
        * WebAuthnProcess/WebAuthnProcess.messages.in:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/Automation/WebAutomationSessionProxy.messages.in:
        * WebProcess/GPU/GPUProcessConnection.messages.in:
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.messages.in:
        * WebProcess/GPU/media/SourceBufferPrivateRemote.messages.in:
        * WebProcess/Inspector/WebInspectorUIExtensionController.messages.in:
        * WebProcess/MediaSession/RemoteMediaSessionCoordinator.messages.in:
        * WebProcess/Network/NetworkProcessConnection.messages.in:
        * WebProcess/Storage/WebSWClientConnection.messages.in:
        * WebProcess/Storage/WebSWContextManagerConnection.messages.in:
        * WebProcess/Storage/WebSharedWorkerObjectConnection.messages.in:
        * WebProcess/WebCoreSupport/WebBroadcastChannelRegistry.messages.in:
        * WebProcess/WebPage/EventDispatcher.messages.in:
        * WebProcess/WebPage/WebPage.messages.in:
        * WebProcess/WebProcess.messages.in:
        * WebProcess/cocoa/VideoFullscreenManager.messages.in:

2022-03-07  Chris Dumez  <cdumez@apple.com>

        Optimize the passing of data across threads
        https://bugs.webkit.org/show_bug.cgi?id=237502

        Reviewed by Geoff Garen.

        Add more isolatedCopy() overloads that work on r-value references when the implementation
        can be optimized. Also call isolatedCopy() / crossThreadCopy() on a r-value reference
        whenever possible to leverage these optimizations.

        * NetworkProcess/Classifier/ResourceLoadStatisticsDatabaseStore.cpp:
        (WebKit::ResourceLoadStatisticsDatabaseStore::migrateDataToPCMDatabaseIfNecessary):
        * NetworkProcess/Classifier/WebResourceLoadStatisticsStore.h:
        (WebKit::RegistrableDomainsToBlockCookiesFor::isolatedCopy const):
        (WebKit::RegistrableDomainsToBlockCookiesFor::isolatedCopy):
        (WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::isolatedCopy const):
        (WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::isolatedCopy):
        * NetworkProcess/IndexedDB/WebIDBServer.cpp:
        (WebKit::WebIDBServer::closeAndDeleteDatabasesForOrigins):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementDebugInfo.cpp:
        (WebKit::PCM::DebugInfo::isolatedCopy const):
        (WebKit::PCM::DebugInfo::isolatedCopy):
        (WebKit::PCM::DebugInfo::Message::isolatedCopy const):
        (WebKit::PCM::DebugInfo::Message::isolatedCopy):
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementDebugInfo.h:
        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementStore.cpp:
        (WebKit::PCM::Store::allAttributedPrivateClickMeasurement):
        * UIProcess/API/APIContentRuleListStore.cpp:
        (API::ContentRuleListStore::compileContentRuleList):
        * UIProcess/Cocoa/ModalContainerControlClassifier.mm:
        (WebKit::ModalContainerControlClassifier::classify):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::setMediaAccessibilityPreferences):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::didChooseFilesForOpenPanelWithImageTranscoding):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::prewarmWithDomainInformation):
        * WebProcess/WebProcess.h:

2022-03-07  Sihui Liu  <sihui_liu@apple.com>

        Delete WebIDBServer and WebIDBConnectionToClient
        https://bugs.webkit.org/show_bug.cgi?id=237479

        Reviewed by Chris Dumez.

        The code is unused since r289474; remove it to avoid confusion when investigating issues including related
        symbols.

        * CMakeLists.txt:
        * DerivedSources-input.xcfilelist:
        * DerivedSources-output.xcfilelist:
        * DerivedSources.make:
        * NetworkProcess/IndexedDB/WebIDBConnectionToClient.cpp: Removed.
        * NetworkProcess/IndexedDB/WebIDBConnectionToClient.h: Removed.
        * NetworkProcess/IndexedDB/WebIDBServer.cpp: Removed.
        * NetworkProcess/IndexedDB/WebIDBServer.h: Removed.
        * NetworkProcess/IndexedDB/WebIDBServer.messages.in: Removed.
        * NetworkProcess/NetworkProcess.cpp:
        * NetworkProcess/NetworkSession.cpp:
        * NetworkProcess/NetworkSession.h:
        * NetworkProcess/ios/NetworkProcessIOS.mm:
        * Sources.txt:
        * WebKit.xcodeproj/project.pbxproj:

2022-03-07  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Provide global frame identifier to ASCAgent SPI
        https://bugs.webkit.org/show_bug.cgi?id=237454
        rdar://problem/89782147

        Reviewed by Brent Fulgham.

        For purposes related to conditional mediation, the ASCAgent SPI
        need to know what frame requested the assertion. This patch starts
        passing that along.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        * UIProcess/WebAuthentication/AuthenticatorManager.cpp:
        (WebKit::AuthenticatorManager::cancelRequest):
        (WebKit::AuthenticatorManager::runPanel):
        * UIProcess/WebAuthentication/Cocoa/AuthenticationServicesCoreSoftLink.h:
        * UIProcess/WebAuthentication/Cocoa/AuthenticationServicesCoreSoftLink.mm:
        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::configurationAssertionRequestContext):
        (WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest):
        * UIProcess/WebAuthentication/WebAuthenticationRequestData.h:

2022-03-07  Peng Liu  <peng.liu6@apple.com>

        Small cleanups of media code
        https://bugs.webkit.org/show_bug.cgi?id=237496

        Reviewed by Xabier Rodriguez-Calvar.

        * WebProcess/cocoa/PlaybackSessionManager.h: `protected` is not needed here.

2022-03-07  Adrian Perez de Castro  <aperez@igalia.com>

        [GTK] generate-automation-atom.py breaks reproducible builds
        https://bugs.webkit.org/show_bug.cgi?id=237506

        Reviewed by Carlos Garcia Campos.

        * Scripts/generate-automation-atom.py:
        (append_functions): Sort utility functions to produce stable output.

2022-03-06  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Layer tree can get indefinitely frozen if WKWebView is unparented underneath -[UIWindow dealloc]
        https://bugs.webkit.org/show_bug.cgi?id=237505
        rdar://85563958

        Reviewed by Tim Horton.

        It's currently possible for the web page to get permanently stuck in frozen state, due to the
        `BackgroundApplication` layer tree freeze reason; this occurs when the web view is unparented from the view
        hierarchy underneath the scope of UIWindow's `-dealloc` method.

        During `-[UIWindow dealloc]`, the backpointer underlying the implementation of `-[UIView window]` is set to `nil`
        immediately before the subclassing method hook `-willMoveToWindow:` is invoked on the view hierarchy. This means
        that when `-willMoveToWindow:` is invoked, `self.window` will return `nil`. This, in turn, puts
        `WKApplicationStateTrackingView` in a bad state because we bail early before resetting `_applicationStateTracker`
        in the early return below, since we (erroneously) believe that we've already been unparented from the view
        hierarchy, so we don't need to do anything.

        ```
        if (!self._contentView.window || newWindow)
            return;
        ```

        As a result, if the same web view is eventually moved back into another visible window, `-didMoveToWindow` bails
        before setting up the `_applicationStateTracker` again, since it already exists from when the previous window
        was still active. This means `-_applicationWillEnterForeground` is never called when the web view is
        reintroduced to the view hierarchy, so `LayerTreeFreezeReason::BackgroundApplication` is never lifted.

        To address this, we simply remove the debug assertion for `_applicationStateTracker`, and instead check whether
        the application state tracker exists or not for the logic of the early return. Doing so also makes the early
        return in `-willMoveToWindow:` consistent with the logic in one in `-didMoveToWindow`, which already consults
        `_applicationStateTracker`:

        ```
        - (void)didMoveToWindow
        {
            if (!self._contentView.window || _applicationStateTracker)
                return;
        ```

        Test: ApplicationStateTracking.WindowDeallocDoesNotPermanentlyFreezeLayerTree

        * UIProcess/ios/WKApplicationStateTrackingView.mm:
        (-[WKApplicationStateTrackingView willMoveToWindow:]): See above.

2022-03-06  Eric Carlson  <eric.carlson@apple.com>

        Push HTMLMediaElement renderer's contentBox rect to GPU process
        https://bugs.webkit.org/show_bug.cgi?id=237444
        rdar://84869202

        Reviewed by Jer Noble.

        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        (WebKit::RemoteMediaPlayerProxy::RemoteMediaPlayerProxy): Configuration now has
        playerContentBoxRect.
        (WebKit::RemoteMediaPlayerProxy::mediaPlayerContentBoxRect const):
        (WebKit::RemoteMediaPlayerProxy::playerContentBoxRectChanged): Update playerContentBoxRect.
        * GPUProcess/media/RemoteMediaPlayerProxy.h:
        * GPUProcess/media/RemoteMediaPlayerProxy.messages.in:

        * GPUProcess/media/RemoteMediaPlayerProxyConfiguration.h:
        (WebKit::RemoteMediaPlayerProxyConfiguration::encode const):
        (WebKit::RemoteMediaPlayerProxyConfiguration::decode):

        * GPUProcess/media/cocoa/RemoteMediaPlayerProxyCocoa.mm:
        (WebKit::RemoteMediaPlayerProxy::setVideoInlineSizeIfPossible): Convert from static
        function so we can log.
        (WebKit::RemoteMediaPlayerProxy::mediaPlayerFirstVideoFrameAvailable): Add logging.
        (WebKit::RemoteMediaPlayerProxy::mediaPlayerRenderingModeChanged): Ditto.
        (WebKit::RemoteMediaPlayerProxy::setVideoInlineSizeFenced): Ditto.
        (WebKit::setVideoInlineSizeIfPossible): Deleted.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::playerContentBoxRectChanged):
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.h:

        * WebProcess/GPU/media/RemoteMediaPlayerManager.cpp:
        (WebKit::RemoteMediaPlayerManager::createRemoteMediaPlayer):

2022-03-04  Sihui Liu  <sihui_liu@apple.com>

        Stop setting NSURLIsExcludedFromBackupKey attribute for localSorageDirectory in UI process
        https://bugs.webkit.org/show_bug.cgi?id=237447

        Reviewed by Chris Dumez.

        Let's do that on storage thread in network process when the directory is used.

        Covered by existing test: WKWebView.LocalStorageDirectoryExcludedFromBackup.

        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::parameters):

2022-03-04  Harrison Weinerman  <hweinerman@apple.com>

        Change app launch scheme
        https://bugs.webkit.org/show_bug.cgi?id=237480
        rdar://89781553

        Reviewed by Brady Eidson.

        We need to change the app launch scheme and remove an entitlement that is no longer required.

        * Scripts/process-entitlements.sh:
        * webpushd/WebPushDaemon.mm:
        (WebPushD::Daemon::notifyClientPushMessageIsAvailable):

2022-03-04  Patrick Angle  <pangle@apple.com>

        REGRESSION (r284472): [ Monterey ] http/tests/websocket/tests/hybi/inspector/send-and-recieve-debugger.html is failing
        https://bugs.webkit.org/show_bug.cgi?id=237280

        Reviewed by Devin Rousso.

        Move inspector instrumentation for things that should be delayed until the websocket has resumed (in general,
        these are instrumentation points for receiving messages) into WebCore::WebSocket so that they are sent at the
        expected time in the frontend, not "in the future" when script execution is suspended (e.g. while debugging).

        * WebProcess/Network/WebSocketChannel.cpp:
        (WebKit::WebSocketChannel::notifySendFrame):
        (WebKit::WebSocketChannel::connect):
        (WebKit::WebSocketChannel::close):
        (WebKit::WebSocketChannel::fail):
        (WebKit::WebSocketChannel::disconnect):
        (WebKit::WebSocketChannel::didReceiveText):
        (WebKit::WebSocketChannel::didReceiveBinaryData):
        (WebKit::WebSocketChannel::didClose):
        (WebKit::WebSocketChannel::didReceiveMessageError):
        (WebKit::WebSocketChannel::didSendHandshakeRequest):
        (WebKit::WebSocketChannel::didReceiveHandshakeResponse):
        (WebKit::createWebSocketFrameForWebInspector): Deleted.
        * WebProcess/Network/WebSocketChannel.h:

2022-03-04  Patrick Angle  <pangle@apple.com>

        Web Inspector: [Cocoa] Continually opening and closing Web Inspector sometimes crashes
        https://bugs.webkit.org/show_bug.cgi?id=237484

        Reviewed by Darin Adler.

        We need to handle operations on the main queue because `webView:stopURLSchemeTask:` will be called from the main
        queue, and we must not be in middle the operation when we get the request to stop said operation, otherwise we
        may attempt to call `[urlSchemeTask did*]`, which is not permitted after we have been asked to stop that task.
        If we add the operation for the `WKURLSchemeTask` to a different queue it is possible we will have already
        started the operation on a background queue while at the same time are receiving a request to stop that same
        `WKURLSchemeTask`.

        * UIProcess/Inspector/mac/WKInspectorResourceURLSchemeHandler.mm:
        (-[WKInspectorResourceURLSchemeHandler webView:startURLSchemeTask:]):
        (-[WKInspectorResourceURLSchemeHandler webView:stopURLSchemeTask:]):

2022-03-04  Myles C. Maxfield  <mmaxfield@apple.com>

        [iOS] Books ASSERTs upon opening a book with a debug build of WebKit
        https://bugs.webkit.org/show_bug.cgi?id=237445
        <rdar://problem/89776531>

        Reviewed by Alex Christensen.

        * NetworkProcess/cache/NetworkCacheBlobStorage.cpp:
        (WebKit::NetworkCache::BlobStorage::add):
        * UIProcess/API/APIContentRuleListStore.cpp:
        (API::openAndMapContentRuleList):
        (API::compiledToFile):

2022-03-04  Chris Dumez  <cdumez@apple.com>

        Home link on weather.gov is not working
        https://bugs.webkit.org/show_bug.cgi?id=237451
        <rdar://60409277>

        Reviewed by Geoff Garen.

        * WebProcess/WebPage/WebBackForwardListProxy.cpp:
        (WebKit::WebBackForwardListProxy::removeItem):
        (WebKit::WebBackForwardListProxy::containsItem const):
        * WebProcess/WebPage/WebBackForwardListProxy.h:

2022-03-04  Simon Fraser  <simon.fraser@apple.com>

        Crash under ScrollingCoordinatorMac::hasNodeWithAnimatedScrollChanged()
        https://bugs.webkit.org/show_bug.cgi?id=237478
        <rdar://89072235>

        Reviewed by Alan Bujtas.

        Crash data show that r290109 failed to fix this crash; the actual cause of the crash is a
        null m_page on TiledCoreAnimationScrollingCoordinator, diagnosed by noting that the crash
        offset corresponds to the offset of m_renderingUpdateRemainingSteps in Page.

        * WebProcess/WebPage/mac/TiledCoreAnimationScrollingCoordinator.mm:
        (WebKit::TiledCoreAnimationScrollingCoordinator::hasNodeWithAnimatedScrollChanged):

2022-03-04  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Don't use decidePolicyForLocalAuthenticator for Web Authentication Modern
        https://bugs.webkit.org/show_bug.cgi?id=225646
        rdar://78147681

        Reviewed by Brent Fulgham.

        decidePolicyForLocalAuthenticator is not implemented for the _WKWebAuthenticationPanelDelegate
        used for modern because the prompt to allow Touch/FaceID comes earlier in the process.

        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticator::makeCredential):

2022-03-04  Per Arne Vollan  <pvollan@apple.com>

        [iOS] Hard link AVPictureInPictureController
        https://bugs.webkit.org/show_bug.cgi?id=237227

        Reviewed by Brent Fulgham.

        Hard linking instead of soft linking should be a small performance improvement.

        * Configurations/WebKit.xcconfig:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformInitializeWebProcess):

2022-03-04  Youenn Fablet  <youenn@apple.com>

        LibWebRTCCodecs::setEncodeRates should send LibWebRTCCodecsProxy::SetEncodeRates only when the encoder is live
        https://bugs.webkit.org/show_bug.cgi?id=237421

        Reviewed by Darin Adler.

        We were previously not asserting in LibWebRTCCodecsProxy::setEncodeRates and we were missing some encode rate orders.
        This is due to the fact that when creating an encoder, we are hopping to main thread, then to work queue to send the message to create an encoder.
        In LibWebRTCCodecs::setEncodeRates, we were hopping to main thread if needed.
        If the encoder connection is null, we are now hopping to main thread, then to work queue as done when creating an encoder.
        Since there is a time where LibWebRTCCodecsProxy::setEncodeRates might have sent encode rates, we bail out early to not set based on old bitrates.

        Covered by existing tests not crashing in LibWebRTCCodecsProxy::setEncodeRates.

        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::setEncodeRates):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:

2022-03-04  Adrian Perez de Castro  <aperez@igalia.com>

        [GTK][WPE] Documentation for webkit_web_context_set_spell_checking_languages() is incomplete
        https://bugs.webkit.org/show_bug.cgi?id=237465

        Reviewed by Carlos Garcia Campos.

        * UIProcess/API/glib/WebKitWebContext.cpp: Improve documentation.

2022-03-04  Youenn Fablet  <youenn@apple.com>

        Introduce routines to exchange SharedVideoFrame::Buffer directly
        https://bugs.webkit.org/show_bug.cgi?id=237267

        Reviewed by Eric Carlson.

        Define explictly SharedVideoFrame::Buffer as Variant of the various buffer representations.
        This allows to move more code in SharedVideoFrame for instance by adding direct support of sending webrtc::VideoFrame buffers in SharedVideoFrame.
        Reuse that code in LibWebRTCCodecs as a refactoring/simplification.
        Reuse that code in RemoteVideoFrameObjectHeap which allows to exchange IOSurfaces in case WebProcess can use them.
        This is used when encoding such frames using software encoders.

        Covered by existing tests.

        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.messages.in:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.messages.in:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxy.h:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.h:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.messages.in:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-03-03  Brady Eidson  <beidson@apple.com>

        Add a new "Daemon -> Client" message type to webpushd
        https://bugs.webkit.org/show_bug.cgi?id=237391

        Reviewed by Alex Christensen.

        Future work will need more messages like this.
        So let's add the mechanism in a small standalone patch that uses it for debug messages.
        
        No behavior change for now.

        * NetworkProcess/Notifications/Cocoa/WebPushDaemonConnectionCocoa.mm:
        (WebKit::WebPushD::handleWebPushDaemonMessage):
        (WebKit::WebPushD::Connection::connectionReceivedEvent):
        (WebKit::WebPushD::Connection::connectionReceivedEvent const): Deleted.

        * NetworkProcess/Notifications/WebPushDaemonConnection.cpp:
        (WebKit::WebPushD::Connection::debugMessage):
        * NetworkProcess/Notifications/WebPushDaemonConnection.h:

        * NetworkProcess/PrivateClickMeasurement/PrivateClickMeasurementConnection.h:
        * NetworkProcess/PrivateClickMeasurement/cocoa/PrivateClickMeasurementConnectionCocoa.mm:
        (WebKit::PCM::Connection::connectionReceivedEvent):
        (WebKit::PCM::Connection::connectionReceivedEvent const): Deleted.

        * Platform/IPC/DaemonConnection.h:

        * Shared/WebPushDaemonConstants.h:
        (WebKit::WebPushD::daemonMessageTypeSendsReply):

        * webpushd/ICAppBundle.mm:
        (WebPushD::broadcastDebugMessage):

        * webpushd/PushClientConnection.h:
        * webpushd/PushClientConnection.mm:
        (WebPushD::ClientConnection::broadcastDebugMessage):
        (WebPushD::ClientConnection::sendDebugMessage):
        (WebPushD::ClientConnection::sendDaemonMessage const):

        * webpushd/WebPushDaemon.h:
        * webpushd/WebPushDaemon.mm:
        (WebPushD::Daemon::broadcastDebugMessage):
        (WebPushD::Daemon::broadcastAllConnectionIdentities):
        (WebPushD::Daemon::connectionAdded):

2022-03-03  Ross Kirsling  <ross.kirsling@sony.com>

        REGRESSION(r290815): Fix even more incorrect #if ENABLE(SERVICE_WORKER) usage in NetworkProcess
        https://bugs.webkit.org/show_bug.cgi?id=237461

        Unreviewed build fix.

        * NetworkProcess/NetworkProcess.cpp:
        The existence of NetworkProcess::{getPendingPushMessages, processPushMessages} depend on ENABLE(SERVICE_WORKER);
        it is only when they exist that their implementation depends on ENABLE(BUILT_IN_NOTIFICATIONS).

2022-03-03  Ben Nham  <nham@apple.com>

        Enforce silent push quota
        https://bugs.webkit.org/show_bug.cgi?id=236863

        Reviewed by Brady Eidson.

         - If a push event doesn't result in a notification or if the associated promise rejects,
           then we increment the silent push count associated with that origin.
         - PushService now removes a subscription if the origin has reached its quota of silent
           pushes.

        Covered by existing and new API tests.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::processPushMessage):
        * NetworkProcess/Notifications/NetworkNotificationManager.cpp:
        (WebKit::NetworkNotificationManager::incrementSilentPushCount):
        (WebKit::ReplyCaller<int>::callReply):
        * Shared/WebPushDaemonConstants.h:
        (WebKit::WebPushD::messageTypeSendsReply):
        * UIProcess/API/Cocoa/WKProcessPool.mm:
        (-[WKProcessPool _notificationManagerForTesting]):
        * webpushd/PushService.mm:
        (WebPushD::updateTopicLists):
        (WebPushD::PushService::incrementSilentPushCount):
        * webpushd/WebPushDaemon.mm:
        (WebPushD::MessageInfo::incrementSilentPushCount::encodeReply):
        (WebPushD::Daemon::decodeAndHandleMessage):
        (WebPushD::Daemon::incrementSilentPushCount):

2022-03-03  Ben Nham  <nham@apple.com>

        Allow webpushd to launch browser in background
        https://bugs.webkit.org/show_bug.cgi?id=237114

        Reviewed by Brady Eidson.

        Now that webpushd is sandboxed on Mac (r289566), the LaunchServices SPI call to launch
        Safari is now failing, because LaunchServices goes down a different path when there is a
        sandboxed caller. In particular, it fails to launch Safari because Safari doesn't register
        for the webkit-app-launch scheme. Safari also doesn't want to list this scheme in its plist.

        For now, to unblock our testing, we're giving ourselves an entitlement to restore the
        pre-sandboxed behavior of being able to launch Safari even though it doesn't register for
        the webkit-app-launch scheme. We are still in discussions with LaunchServices and Safari
        about if there is a better and more restrictive way of granting ourselves this ability.

        * Scripts/process-entitlements.sh:

2022-03-03  Devin Rousso  <drousso@apple.com>

        [GPU Process] dont load Apple Pay button/logo PDFs in the WebProcess
        https://bugs.webkit.org/show_bug.cgi?id=237177

        Reviewed by Simon Fraser.

        See `Source/WebCore/ChangeLog` for an explanation of `SystemImage`.

        * Shared/WebCoreArgumentCoders.h:
        * Shared/WebCoreArgumentCoders.cpp:
        (IPC::ArgumentCoder<Ref<SystemImage>>::encode): Added.
        (IPC::ArgumentCoder<Ref<SystemImage>>::decode): Added.
        Support sending `SystemImage` (technically `Ref<SystemImage>`) across processes.

        * GPUProcess/graphics/RemoteDisplayListRecorder.messages.in:
        * GPUProcess/graphics/RemoteDisplayListRecorder.h:
        * GPUProcess/graphics/RemoteDisplayListRecorder.cpp:
        (WebKit::RemoteDisplayListRecorder::drawSystemImage): Added.
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        (WebKit::RemoteDisplayListRecorderProxy::recordDrawSystemImage): Addded.
        Add new `DrawSystemImage` display list item.

        * Scripts/webkit/messages.py:
        (class_template_headers):
        Add support for `Ref<T>` in IPC messages.

2022-03-03  Michael Saboff  <msaboff@apple.com>

        Copy WebKit frameworks and XPC processes to Secondary Path
        https://bugs.webkit.org/show_bug.cgi?id=237394

        Reviewed by Saam Barati.

        Added build configuration variables and scripts to copy the built Framework as well as the XPC services 
        to the SYSTEM_SECONDARY_CONTENT_PATH when it is set.  When copying the XPC services, we update the XPC
        binaries to reference the frameworks from the SYSTEM_SECONDARY_CONTENT_PATH by updating
        DYLD_VERSIONED_FRAMEWORK_PATH.

        * Configurations/Base.xcconfig:
        * Configurations/WebKitSwift.xcconfig:
        * Scripts/copy-frameworks-to-secondary-path.sh: Added.
        * Scripts/copy-xpc-services-to-secondary-path.sh: Added.
        * Scripts/update-dyld-environment-load-command: Added.
        * Scripts/webkitpy: Added.
        * Scripts/webkitpy/mach_o.py: Added.
        (_utf8_bytes_to_str):
        (_mach_o_int_field):
        (_mach_o_int_field._get_mach_o_int_field):
        (_mach_o_int_field._set_mach_o_int_field):
        (_mach_o_int_field._set_mach_o_int_field.func):
        (_mach_o_chararray_field):
        (_mach_o_chararray_field._get_mach_o_chararray_field):
        (_mach_o_chararray_field._set_mach_o_chararray_field):
        (_mach_o_chararray_field._set_mach_o_chararray_field.func):
        (_mach_o_varchar_field):
        (_mach_o_varchar_field._get_mach_o_varchar_field):
        (_mach_o_varchar_field._set_mach_o_varchar_field):
        (_mach_o_varchar_field._set_mach_o_varchar_field.func):
        (MachOCommand):
        (MachOCommand.__init__):
        (MachOSourceVersionCommand):
        (MachOSourceVersionCommand.version_str):
        (MachOSection):
        (MachOSection.__init__):
        (MachOSegmentCommand):
        (MachOSection32):
        (MachOSegment32Command):
        (MachOSegment32Command.__init__):
        (MachOSection64):
        (MachOSegment64Command):
        (MachOSegment64Command.__init__):
        (MachOLoadDylibCommand):
        (MachOLoadDylibCommand._version_str):
        (MachOLoadDylibCommand.compatibility_version_str):
        (MachOLoadDylibCommand.current_version_str):
        (MachODyldEnvironmentCommand):
        (MachODyldEnvironmentCommand.variable):
        (MachODyldEnvironmentCommand.value):
        (MachODyldEnvironmentCommand.build):
        (MachOIDDylibCommand):
        (MachOHeader):
        (MachOHeader.__init__):
        (MachOHeader.used_header_size):
        (MachOHeader.total_header_size):
        (MachOHeader.available_header_size):
        (MachOHeader.architecture_name):
        (MachOHeader.id_command):
        (MachOHeader.dyld_env_commands):
        (MachOHeader.dyld_versioned_framework_paths):
        (MachOHeader.filter_commands):
        (MachOHeader.update_file):
        (MachOHeader.parse_command):
        (MachOHeader32LE):
        (MachOHeader32LE.__init__):
        (MachOHeader64LE):
        (MachOHeader64LE.__init__):
        (MachOFile):
        (MachOFile.__init__):
        (is_macho_bytes):
        (is_macho_file):
        (enumerate_macho_files):
        * WebKit.xcodeproj/project.pbxproj:

2022-03-03  Robert Jenner  <Jenner@apple.com>

        Unreviewed, reverting r290752.

        r290752 broke mutliple tests, slowing down the iOS15 EWS
        queue.

        Reverted changeset:

        "[iOS] Hard link AVPictureInPictureController"
        https://bugs.webkit.org/show_bug.cgi?id=237227
        https://commits.webkit.org/r290752

2022-03-03  Tim Horton  <timothy_horton@apple.com>

        WKContentView should explicitly request the system pointer in the fallback case
        https://bugs.webkit.org/show_bug.cgi?id=237410
        <rdar://79198381>

        Reviewed by Anders Carlsson.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView pointerRegionForPositionInformation:point:]):
        (-[WKContentView pointerInteraction:styleForRegion:]):
        Instead of assuming a nil region and nil style will provide the system
        pointer, provide a region the size of the WKContentView and explicitly
        request the system pointer shape.

        Also, drive-by adopt the API `systemPointerStyle` instead of the
        deprecated SPI version.

2022-03-03  Chris Dumez  <cdumez@apple.com>

        [macOS] WebContent processes crash with XPC_EXIT_REASON_SIGTERM_TIMEOUT when logging out
        https://bugs.webkit.org/show_bug.cgi?id=237398
        <rdar://88940229>

        Reviewed by Darin Adler.

        Because we don't use RunningBoard on macOS, we leak an OS transaction to control the lifetime of our XPC
        services ourselves. However, one of the side effects of leaking this transaction is that the default SIGTERM
        handler doesn't cleanly exit our XPC services when logging out or rebooting. This led to crashes with
        XPC_EXIT_REASON_SIGTERM_TIMEOUT as termination reason (rdar://88940229).

        To address the issue, we now set our own SIGTERM handler that releases the OS transaction and calls the
        default SIGTERM handler to exit cleanly. In the future, we should likely adopt RunningBoard on macOS and
        control our lifetime via process assertions instead of leaking this OS transaction.

        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.h:
        (WebKit::XPCServiceInitializer):
        * Shared/EntryPointUtilities/Cocoa/XPCService/XPCServiceEntryPoint.mm:
        (WebKit::setOSTransaction):
        (WebKit::XPCServiceExit):
        (WebKit::osTransaction): Deleted.

2022-03-03  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Further reduce hangs underneath -[WKContentView requestAutocorrectionContextWithCompletionHandler:]
        https://bugs.webkit.org/show_bug.cgi?id=237387
        rdar://89654600

        Reviewed by Tim Horton.

        Tweak the mitigations landed in r288925 to be even more aggressive. Currently, we preemptively send an
        autocorrection context from the web process to the UI process after receiving an IPC message from the UI process
        indicating that an input view has been shown. However, this message might arrive too late in cases where the web
        process hangs immediately after we're done setting element focus, within the very same runloop; in such a
        scenario, we'll still end up hanging underneath the sync autocorrection request underneath `-_elementDidFocus:`
        in the UI process.

        We can instead make this mitigation even more aggressive, by setting a flag on WebPage when we're about to
        propagate an `ElementDidFocus` message to the UI process that (in lieu of the WebKit client) would normally
        cause the keyboard to appear. During the next DOM selection change, we then consult this flag and preemptively
        send an autocorrection context to the UI process.

        Additionally, remove another safeguard in the original change in r288925 which effectively invalidated the
        cached autocorrection context after the end of the runloop by setting `_autocorrectionContextNeedsUpdate`. This
        was only done to narrow the scope of the fix to just the scenario where UIKit requests autocorrection contexts
        multiple times in the same runloop iteration. However, this appears to be insufficient to tackle more scenarios
        where UIKit frequently requests autocorrection contexts even though the selection has not changed; hopefully, by
        leaving `_autocorrectionContextNeedsUpdate := NO`, we can mitigate some of these other cases.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView requestAutocorrectionContextWithCompletionHandler:]):
        * WebProcess/Plugins/PDF/PDFPlugin.mm:
        (WebKit::PDFPlugin::notifySelectionChanged):
        * WebProcess/WebCoreSupport/WebEditorClient.cpp:
        (WebKit::WebEditorClient::respondToChangedSelection):
        * WebProcess/WebCoreSupport/ios/WebChromeClientIOS.mm:
        (WebKit::WebChromeClient::notifyRevealedSelectionByScrollingFrame):
        (WebKit::WebChromeClient::didLayout):
        * WebProcess/WebCoreSupport/ios/WebEditorClientIOS.mm:
        (WebKit::WebEditorClient::overflowScrollPositionChanged):
        (WebKit::WebEditorClient::subFrameScrollPositionChanged):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::didScrollSelection):
        (WebKit::WebPage::didChangeSelection):

        Split `didChangeSelection` into two methods: `didScrollSelection`, which is invoked from codepaths where we're
        scheduling an editor state after overflow or mainframe scrolling, and `didChangeSelection`, which now takes a
        `Frame` indicating the frame that contains the changed selection. On iOS, we handle this by both scheduling an
        editor state update, but also preemptively sending the autocorrection context to the UI process if we've just
        focused an element that will probably cause the keyboard to appear (unless the client explicitly prevents it).

        Note that we must check the `frame` containing the changed selection and bail if the render tree is in the
        middle of being destroyed, so that we don't end up triggering layout (and release asserting) in the case where
        we're clearing the selection during document teardown.

        (WebKit::WebPage::resetFocusedElementForFrame):
        (WebKit::WebPage::elementDidFocus):
        (WebKit::WebPage::elementDidBlur):
        (WebKit::WebPage::didCommitLoad):
        (WebKit::WebPage::didChangeOverflowScrollPosition): Deleted.
        * WebProcess/WebPage/WebPage.h:
        (WebKit::WebPage::setIsShowingInputViewForFocusedElement):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::updateSelectionAppearance):

        Pass in `frame` to `didChangeSelection`.

        (WebKit::WebPage::setIsShowingInputViewForFocusedElement): Deleted.

        Move this back into the header, now that it's a straightforward setter again.

2022-03-03  Ross Kirsling  <ross.kirsling@sony.com>

        REGRESSION(r290776): NetworkSession::swServer depends on ENABLE(SERVICE_WORKER)
        https://bugs.webkit.org/show_bug.cgi?id=237432

        Unreviewed build fix.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::terminateRemoteWorkerContextConnectionWhenPossible):

2022-03-03  Chris Dumez  <cdumez@apple.com>

        REGRESSION(r290356-r290351?): [ iOS EWS ] 3 imported/w3c/web-platform-tests/service-workers/service-worker/* tests are constant text failures.
        https://bugs.webkit.org/show_bug.cgi?id=237160
        <rdar://problem/89440067>

        Reviewed by Youenn Fablet.

        In r290352, I made a change so that the service worker is more likely to launch in the WebContent
        process that caused it to launch. This is beneficial for performance and memory usage.

        The partitioned-service-worker*.html service worker tests are relying on an ID variable that is
        randomly generated inside the service worker and they expect this ID to not change during the
        duration of the test. This means that if the service worker exits / relaunches, those tests start
        failing because the ID changes.

        The issue is that we have logic in WebProcessProxy::didStartProvisionalLoadForMainFrame() that
        terminates the service workers running inside the WebProcess if a new eTLD+1 page is loaded inside
        the process. We do so to try and achieve better process isolation between different sites. The
        issue is that those tests launch a service worker and then open a new cross-site popup. When the
        cross-site popup loads inside the same process, we'd make the decision to terminate the service
        workers in this process and relaunch them in a new clean one, causing the tests to fail.

        While it is true per the specification that service workers can be terminated / relaunched at 
        almost any point, there are exceptions. In particular, we should keep a service worker running
        if it still has pending extendable events. For this reason, the tests rely on FetchEvent.waitUntil()
        to keep the service worker running. Sadly, we would not obey that in this case.

        To address the issue, we no longer unconditionally close the service worker context connection
        when a WebProcess loads a new eTLD+1. Instead, we tell the network process to close that connection
        as soon as possible. When the network process receives this IPC, it terminates the context 
        connection ONLY if the service workers using the connection have no pending events. If we cannot
        close the context connection right away, we set a flag on the context connection to indicate that
        we should close it as soon as possible. Currently, this flag is only used to close the connection
        right away (no 10 second delay) once the connection no longer has any clients. I think that, ideally,
        we'd close the connection as soon as the service workers no longer have pending events. However,
        this adds complexity and is error-prone so I didn't implement it in this patch and merely added a
        FIXME comment. As it stands, my patch STILL relaunches service workers in origin-clean processes
        in the common case. It only fails to do so in the case where there are pending service worker
        events which is a case where we had the correctness bug anyway.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::terminateRemoteWorkerContextConnectionWhenPossible):
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp:
        (WebKit::WebSWServerToContextConnection::WebSWServerToContextConnection):
        (WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection):
        (WebKit::WebSWServerToContextConnection::postMessageToServiceWorkerClient):
        (WebKit::WebSWServerToContextConnection::close):
        * NetworkProcess/ServiceWorker/WebSWServerToContextConnection.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        (WebKit::WebSharedWorkerServer::terminateContextConnectionWhenPossible):
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.cpp:
        (WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject):
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::terminateRemoteWorkerContextConnectionWhenPossible):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::didStartProvisionalLoadForMainFrame):

2022-03-03  Adrian Perez de Castro  <aperez@igalia.com>

        Non-unified build fixes, early March 2022 edition
        https://bugs.webkit.org/show_bug.cgi?id=237420

        Unreviewed non-unified build fixes.

        * UIProcess/API/APIDataTask.cpp: Add missing inclusion of DataReference.h, remove
        "#pragma once" from non-header file.
        * UIProcess/API/APIDataTaskClient.h: Add missing inclusion of DataReference.h.

2022-03-02  Sihui Liu  <sihui_liu@apple.com>

        REGRESSION (r289474): cacheStoragePath is empty in NetworkStorageManager::localOriginStorageManager
        https://bugs.webkit.org/show_bug.cgi?id=237335

        Reviewed by Chris Dumez.

        CacheStorage::Engine::storagePath returns emptyString if salt file under rootDirectory cannot be read or
        written, so we need to make sure sandbox extension for rootDirectory is consumed before calling storagePath
        (in createNetworkStorageManager of NetworkSession).

        This patch also refactors code about adding session in network process. Now we would create 
        NetworkStorageManager when NetworkSession is created.

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::updateQuotaBasedOnSpaceUsageForTesting):
        (WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::createNetworkConnectionToWebProcess):
        (WebKit::NetworkProcess::addStorageSession):
        (WebKit::NetworkProcess::addWebsiteDataStore):
        (WebKit::NetworkProcess::hasLocalStorage):
        (WebKit::NetworkProcess::fetchWebsiteData):
        (WebKit::NetworkProcess::deleteWebsiteData):
        (WebKit::NetworkProcess::deleteWebsiteDataForOrigins):
        (WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains):
        (WebKit::NetworkProcess::registrableDomainsWithWebsiteData):
        (WebKit::NetworkProcess::prepareToSuspend):
        (WebKit::NetworkProcess::resume):
        (WebKit::NetworkProcess::syncLocalStorage):
        (WebKit::NetworkProcess::resetQuota):
        (WebKit::NetworkProcess::clearStorage):
        (WebKit::NetworkProcess::didIncreaseQuota):
        (WebKit::NetworkProcess::renameOriginInWebsiteData):
        (WebKit::NetworkProcess::uiProcessBundleIdentifier):
        (WebKit::NetworkProcess::connectionToWebProcessClosed):
        (WebKit::NetworkProcess::ensureSession): Deleted.
        * NetworkProcess/NetworkProcess.h:
        (WebKit::NetworkProcess::uiProcessBundleIdentifier const): Deleted.
        * NetworkProcess/NetworkSession.cpp:
        (WebKit::createNetworkStorageManager):
        (WebKit::NetworkSession::NetworkSession):
        (WebKit::NetworkSession::invalidateAndCancel):
        (WebKit::NetworkSession::lowMemoryHandler):
        (WebKit::NetworkSession::addServiceWorkerSession): Deleted.
        (WebKit::NetworkSession::addStorageManagerSession): Deleted.
        * NetworkProcess/NetworkSession.h:
        (WebKit::NetworkSession::storageManager):
        * NetworkProcess/NetworkSessionCreationParameters.cpp:
        (WebKit::NetworkSessionCreationParameters::encode const):
        (WebKit::NetworkSessionCreationParameters::decode):
        * NetworkProcess/NetworkSessionCreationParameters.h:
        * NetworkProcess/RemoteNetworkingContext.h: Removed.
        * NetworkProcess/cache/CacheStorageEngine.cpp:
        (WebKit::CacheStorage::Engine::requestSpace):
        * NetworkProcess/cocoa/NetworkProcessCocoa.mm:
        (WebKit::NetworkProcess::uiProcessBundleIdentifier):
        * NetworkProcess/curl/RemoteNetworkingContextCurl.cpp: Removed.
        * NetworkProcess/mac/RemoteNetworkingContext.mm: Removed.
        * NetworkProcess/soup/RemoteNetworkingContextSoup.cpp: Removed.
        * PlatformPlayStation.cmake:
        * PlatformWin.cmake:
        * Shared/WebsiteDataStoreParameters.cpp:
        (WebKit::WebsiteDataStoreParameters::encode const):
        (WebKit::WebsiteDataStoreParameters::decode):
        (WebKit::WebsiteDataStoreParameters::~WebsiteDataStoreParameters): Deleted.
        * Shared/WebsiteDataStoreParameters.h:
        (): Deleted.
        * SourcesCocoa.txt:
        * SourcesGTK.txt:
        * SourcesWPE.txt:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::addSession):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::parameters):
        * UIProcess/WebsiteData/WebsiteDataStore.h:
        (WebKit::WebsiteDataStore::resolvedIndexedDBDirectory const):
        (WebKit::WebsiteDataStore::resolvedIndexedDatabaseDirectory const): Deleted.

2022-03-02  Sihui Liu  <sihui_liu@apple.com>

        Throw proper exception on failed removeEntry() calls
        https://bugs.webkit.org/show_bug.cgi?id=237382
        <rdar://89232969>

        Reviewed by Chris Dumez.

        Updated existing tests.

        * NetworkProcess/storage/FileSystemStorageError.h:
        (WebKit::convertToException):
        * NetworkProcess/storage/FileSystemStorageHandle.cpp:
        (WebKit::FileSystemStorageHandle::removeEntry):

2022-03-02  Dan Glastonbury  <djg@apple.com>

        [WebGPU] Implement GPUDeviceDescriptor.requiredLimits
        https://bugs.webkit.org/show_bug.cgi?id=232741
        rdar://problem/85325316

        Reviewed by Myles C. Maxfield.

        Implement IDL bindings for requiredLimits attribute of
        GPUDeviceDescriptor.

        * Shared/WebGPU/WebGPUDeviceDescriptor.cpp:
        (WebKit::WebGPU::ConvertToBackingContext::convertToBacking):
        (WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking):
        * Shared/WebGPU/WebGPUDeviceDescriptor.h:
        (WebKit::WebGPU::DeviceDescriptor::encode const):
        (WebKit::WebGPU::DeviceDescriptor::decode):

2022-03-02  Brent Fulgham  <bfulgham@apple.com>

        [AppSSO] Correct logging messages to avoid confusing screeners that an error has occurred
        https://bugs.webkit.org/show_bug.cgi?id=237390
        <rdar://problem/89710486>

        Reviewed by Simon Fraser.

        The phrasing of the message in 'SOAuthorizationCoordinator::tryAuthorize' when a URL is not relevant for
        AppSSO flows is:

                AUTHORIZATIONCOORDINATOR_RELEASE_LOG("tryAuthorize: Cannot authorize the requested URL.");

        This leads people spelunking logs to believe that the URL can't be authorized (perhaps due to an error).

        Instead, we should more accurately report that the URL is not one that is mediated through an AppSSO flow,
        and so no AppSSO processing is needed.

        * UIProcess/Cocoa/SOAuthorization/SOAuthorizationCoordinator.mm:
        (WebKit::SOAuthorizationCoordinator::tryAuthorize):

2022-03-02  Brent Fulgham  <bfulgham@apple.com>

        [WebAuthn] Completion handler is not called when WebAuthn invoked without proper entitlements
        https://bugs.webkit.org/show_bug.cgi?id=237380
        <rdar://problem/89700242>

        Reviewed by Chris Dumez.

        WebAuthn is not permitted outside of Web Browser applications. When an application that lacks
        the full web browser entitlement attempts to invoke WebAuthn flows, we do an early return. However,
        the completion handler for this flow is bypassed, preventing applications from being informed of
        this problem.

        * WebProcess/WebAuthentication/WebAuthenticatorCoordinator.cpp:
        (WebKit::WebAuthenticatorCoordinator::makeCredential):
        (WebKit::WebAuthenticatorCoordinator::getAssertion):
        (WebKit::WebAuthenticatorCoordinator::isUserVerifyingPlatformAuthenticatorAvailable):

2022-03-02  Per Arne Vollan  <pvollan@apple.com>

        [iOS] Seatbelt sandbox profile entitlement is deprecated
        https://bugs.webkit.org/show_bug.cgi?id=237374

        Reviewed by Brent Fulgham.

        Replace with new entitlement.

        * Scripts/process-entitlements.sh:

2022-03-02  Per Arne Vollan  <pvollan@apple.com>

        [iOS] Hard link AVPictureInPictureController
        https://bugs.webkit.org/show_bug.cgi?id=237227

        Reviewed by Brent Fulgham.

        Hard linking instead of soft linking should be a small performance improvement.

        * Configurations/WebKit.xcconfig:
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::platformInitializeWebProcess):

2022-03-02  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Copy context menu action should be titled "Copy Link" when long pressing a non-image link
        https://bugs.webkit.org/show_bug.cgi?id=237367
        rdar://77397886

        Reviewed by Devin Rousso.

        Change the current title of the "Copy" context menu action to "Copy Link", when showing the context menu for a
        non-image link. See below for more details.

        Tests:  fast/events/touch/ios/long-press-on-link.html
                fast/events/touch/ios/long-press-on-image.html

        * UIProcess/API/Cocoa/_WKActivatedElementInfo.mm:
        (-[_WKActivatedElementInfo _initWithInteractionInformationAtPosition:userInfo:]):
        (-[_WKActivatedElementInfo _isImage]):

        Add a helper method to return whether or not the activated element represents an image. Crucially, this will
        return YES in the case of image links, even though the activated element type is _WKActivatedElementTypeLink.
        We consult this below to still show "Copy" in the case of image links, instead of "Copy Link".

        * UIProcess/API/Cocoa/_WKActivatedElementInfoInternal.h:
        * UIProcess/API/Cocoa/_WKElementAction.mm:
        (+[_WKElementAction _elementActionWithType:customTitle:assistant:]):
        (+[_WKElementAction _elementActionWithType:info:assistant:]):

        Add a `_WKActivatedElementInfo` argument to `-_elementActionWithType:assistant:`, and use this to set a custom
        title for the menu action in the case of the Copy action for non-image links.

        (+[_WKElementAction _elementActionWithType:assistant:]): Deleted.
        * UIProcess/API/Cocoa/_WKElementActionInternal.h:
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant _appendOpenActionsForURL:actions:elementInfo:]):
        (-[WKActionSheetAssistant defaultActionsForLinkSheet:]):
        (-[WKActionSheetAssistant defaultActionsForImageSheet:]):

        Additionally use `-_isImage` instead of `-image` here when supplying several default Visual Look Up-related
        items; `-image` is misleading here, since it returns a non-null result even in the case of non-image elements,
        if a node snapshot was requested by the client. It's also a bit wasteful, since it means we currently create an
        image from the bitmap data while performing this check, when we really only need to know whether the hit-tested
        element was an image element.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _simulateElementAction:atLocation:]):
        (-[WKContentView _contentsOfUserInterfaceItem:]):
        (-[WKContentView _contextMenuInteraction:configurationForMenuAtLocation:completion:]):

        Include the titles of all visible menu items as an additional argument in the "contents of user interface item"
        dictionary, in the case of context menus. To do this, we take advantage of the `-updateVisibleMenuWithBlock:`
        API, which passes the currently visible `UIMenu`, to collect the titles of each visible menu item, and then
        simply return the visible menu as-is.

        See adjusted layout tests for more information.

        (-[WKContentView contextMenuInteraction:willDisplayMenuForConfiguration:animator:]):

        Move the call to `-_didShowContextMenu` to the animation completion block, such that we invoke the testing
        completion handler for `didShowContextMenuCallback` after the menu is actually visible. Importantly, this allows
        us to query the list of visible menu item titles above, by calling `-updateVisibleMenuWithBlock:`.

        * UIProcess/mac/DisplayCaptureSessionManager.mm:
        (WebKit::alertForWindowSelection):

        Drive-by fix: add quotes around the description argument to the UI string macro to fix an error when running
        the `update-webkit-localizable-strings` script.

2022-03-02  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Ensure presenter gets dismissed on iOS
        https://bugs.webkit.org/show_bug.cgi?id=237336
        rdar://81609371

        Reviewed by Brent Fulgham.

        Always call [m_presenter dismissWithError] to ensure presenter gets dismissed.

        * UIProcess/WebAuthentication/Cocoa/AuthenticatorPresenterCoordinator.mm:
        (WebKit::AuthenticatorPresenterCoordinator::dimissPresenter):

2022-03-02  Chris Dumez  <cdumez@apple.com>

        Mousemove events double-firing in Safari
        https://bugs.webkit.org/show_bug.cgi?id=237342
        <rdar://88025610>

        Reviewed by Wenson Hsieh.

        When we constructed a WebViewImpl, we would add a mouse tracking area to the view,
        so that mouseMoved/mouseEntered/mouseExited would get called and we would be able
        to forward these mouse events to the WebContent process. However, when the view
        becomes first responder, an implicit mouse tracking area also gets added. As a
        result, we would get duplicate calls to mouseMoved/mouseEntered/mouseExited.

        We consulted with the AppKit team and their recommendation was to use a different
        owner object for our mouse tracking area and have that object forward the
        mouseMoved/mouseEntered/mouseExited calls to our WebViewImpl. In doing so, we
        can stop forwarding mouseMoved/mouseEntered/mouseExited calls from WKWebView &
        WKView, which are NOT for our mouse tracking area.

        No new tests, I tried but wasn't able to write an API test for this.
        I had trouble making the test window key so that the view would receive
        the (duplicate) mousemove events. I validated via logging that we are no longer
        getting duplicate mousemove events. I also checked on
        https://www.vsynctester.com/testing/mouse.html that the output now looks correct.

        * UIProcess/API/Cocoa/WKViewPrivate.h:
        * UIProcess/API/Cocoa/WKWebViewPrivate.h:
        * UIProcess/API/mac/WKView.mm:
        (-[WKView _simulateMouseMove:]):
        (-[WKView mouseMoved:]): Deleted.
        (-[WKView mouseEntered:]): Deleted.
        (-[WKView mouseExited:]): Deleted.
        * UIProcess/API/mac/WKWebViewMac.mm:
        (-[WKWebView _simulateMouseMove:]):
        (-[WKWebView mouseMoved:]): Deleted.
        (-[WKWebView mouseEntered:]): Deleted.
        (-[WKWebView mouseExited:]): Deleted.
        * UIProcess/Cocoa/WebViewImpl.h:
        * UIProcess/Cocoa/WebViewImpl.mm:
        (-[WKMouseTrackingObserver initWithViewImpl:]):
        (-[WKMouseTrackingObserver mouseMoved:]):
        (-[WKMouseTrackingObserver mouseEntered:]):
        (-[WKMouseTrackingObserver mouseExited:]):
        (WebKit::WebViewImpl::WebViewImpl):
        (WebKit::WebViewImpl::updatePrimaryTrackingAreaOptions):
        (WebKit::WebViewImpl::setPrimaryTrackingArea): Deleted.
        * UIProcess/mac/PageClientImplMac.mm:
        (WebKit::PageClientImpl::recommendedScrollbarStyleDidChange):

2022-03-02  Sihui Liu  <sihui_liu@apple.com>

        Add assertion that no two sessions share the same general storage directory
        https://bugs.webkit.org/show_bug.cgi?id=236844
        <rdar://problem/89178566>

        Reviewed by Chris Dumez.

        rdar://89190571 shows that there can be two WebsiteDataStores using the same general storage directory, when
        initializing network process. This can lead to corruption because storage code of each session runs on its own
        WorkQueue (or thread) in network process. If two sessions (WebsiteDataStores) use the same directory, the 
        directory and its files may be accessed concurrently. The correct usage is creating different persistent 
        sessions with different paths. Let's add an assertion to help find problematic use case.

        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::parameters):
        * UIProcess/WebsiteData/WebsiteDataStore.h:
        (WebKit::WebsiteDataStore::cacheStorageDirectory const):
        (WebKit::WebsiteDataStore::resolvedGeneralStorageDirectory const):
        (WebKit::WebsiteDataStore::generalStorageDirectory const): Deleted.

2022-03-02  Youenn Fablet  <youenn@apple.com>

        Rename MediaSampleAVFObjC::createImageSample to MediaSampleAVFObjC::createFromPixelBuffer
        https://bugs.webkit.org/show_bug.cgi?id=237354

        Reviewed by Eric Carlson.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::LibWebRTCCodecsProxy::createDecoderCallback):
        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        (WebKit::UserMediaCaptureManagerProxy::SourceProxy::rotateVideoFrameIfNeeded):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameReader::read):
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        (WebKit::RemoteCaptureSampleManager::RemoteVideo::videoSampleAvailable):

2022-03-02  Kimmo Kinnunen  <kkinnunen@apple.com>

        IPC_TESTING_API MessageArgumentDescriptions.cpp is slow to compile
        https://bugs.webkit.org/show_bug.cgi?id=237195

        Reviewed by Antti Koivisto.
        Reland after revert:
        Add missing includes to JSC inlines, needed for ASAN build. Compile
        failure was hidden my unified build.

        IPC testing API needs convert message data buffer, IPC::Decoder, to
        JSValue. This is a run-time operation.
        IPC message decoding is based on templates, a compile time operation.
        IPC generator generates MessageArgumentDescriptions.cpp with
        a big switch. The switch has a case for each message name. The case would
        call templated jsValueForDecodedArguments<Arguments>, where the Arguments
        is the type tuple for the message arguments.

        The above would mean that MessageArgumentDescriptions would need to
        include all the headers for all the messages in WebKit in order
        to populate the Arguments tuple for particular message.
        This would cause MessageArgumentDescriptions to be slow to compile because
        it would need all the headers in Source/WebKit related to message parameter types.

        This would show up as slow compiles that would consume much memory (5-6gb) and do a
        lot of work.

        It would also have to compile the MessageArgumentDescriptions each time
        any of the headers were touched.

        Change this so that the big switch calls a declared but not defined
        template jsValueForDecodedMessage<MessageName> for each MessageName case in the
        switch.

        Instantiate the template for each message in the *MessageReceiver.cpp file
        that each message receiver has. This file already has to include all the
        headers used for that particular message receiver. These files are small and compile
        fast.

        After this change MessageArgumentDescriptions.cpp only includes the message
        definition headers, does not use much more than the standard 1gb+ of memory
        while compiling and is relatively fast to compile. Also if any of the dependent
        headers are touched, only the corresponding small *MessageReceiver.cpp files are compiled.

        This change is needed for further improve the JS testing API implementation.
        Adding new operations that employ the same strategy, eg. switch and a complex
        template instantiation, would possibly just make the matter worse. New operations
        that are needed are message sends, which use templates similarly to the message
        decode case that is implement here.

        This change regenerates the checked-in test content that can be used to review
        what kind of changes the real MessageArgumentDescriptions.cpp and MessageReceiver.cpps
        get.

        * Platform/IPC/JSIPCBinding.h:
        * Scripts/webkit/messages.py:
        (generate_message_handler):
        (generate_js_value_conversion_function):
        (generate_message_argument_description_implementation):
        * Scripts/webkit/tests/MessageArgumentDescriptions.cpp:
        (IPC::jsValueForArguments):
        (IPC::jsValueForReplyArguments):
        * Scripts/webkit/tests/TestWithCVPixelBufferMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithCVPixelBuffer_SendCVPixelBuffer>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithCVPixelBuffer_ReceiveCVPixelBuffer>):
        * Scripts/webkit/tests/TestWithIfMessageMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithIfMessage_LoadURL>):
        * Scripts/webkit/tests/TestWithImageDataMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithImageData_SendImageData>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithImageData_ReceiveImageData>):
        * Scripts/webkit/tests/TestWithLegacyReceiverMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadSomething>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TouchEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_AddEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadSomethingElse>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DidReceivePolicyDecision>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_Close>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_PreferencesDidChange>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SendDoubleAndFloat>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SendInts>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_CreatePlugin>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_RunJavaScriptAlert>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_GetPlugins>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithLegacyReceiver_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithLegacyReceiver_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TestParameterAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TemplateTest>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SetVideoLayerID>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DidCreateWebProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_InterpretKeyEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DeprecatedOperation>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_ExperimentalOperation>):
        * Scripts/webkit/tests/TestWithSemaphoreMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSemaphore_SendSemaphore>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSemaphore_ReceiveSemaphore>):
        * Scripts/webkit/tests/TestWithStreamBufferMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStreamBuffer_SendStreamBuffer>):
        * Scripts/webkit/tests/TestWithStreamMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendString>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendStringSynchronized>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendMachSendRight>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_ReceiveMachSendRight>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendAndReceiveMachSendRight>):
        * Scripts/webkit/tests/TestWithSuperclassMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessage>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithNoArguments>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithNoArguments>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithMultipleArguments>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithMultipleArguments>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestSyncMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestSyncMessage>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestSynchronousMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestSynchronousMessage>):
        * Scripts/webkit/tests/TestWithoutAttributesMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadSomething>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TouchEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_AddEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadSomethingElse>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DidReceivePolicyDecision>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_Close>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_PreferencesDidChange>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SendDoubleAndFloat>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SendInts>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_CreatePlugin>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_RunJavaScriptAlert>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_GetPlugins>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithoutAttributes_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithoutAttributes_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TestParameterAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TemplateTest>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SetVideoLayerID>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DidCreateWebProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_InterpretKeyEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DeprecatedOperation>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_ExperimentalOperation>):

2022-03-02  Per Arne Vollan  <pvollan@apple.com>

        [iOS][WP] Stop generating certain sandbox violation reports
        https://bugs.webkit.org/show_bug.cgi?id=237364

        Reviewed by Chris Dumez.

        Stop generating certain common sandbox violation reports in the WebContent process on iOS, since that
        can improve performance. We will still get telemetry for these violations.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:

2022-03-02  Michael Catanzaro  <mcatanzaro@gnome.org>

        [GTK] setDragImage ignores offset
        https://bugs.webkit.org/show_bug.cgi?id=237292

        Reviewed by Carlos Garcia Campos.

        Plumb the offset from the last place we have access to a DataTransfer object down to
        DragSource, where it's ultimately used. This allows web content to properly position the
        drag image under the mouse cursor.

        * UIProcess/API/gtk/DragSource.h:
        * UIProcess/API/gtk/DragSourceGtk3.cpp:
        (WebKit::DragSource::begin):
        * UIProcess/API/gtk/DragSourceGtk4.cpp:
        (WebKit::DragSource::begin):
        * UIProcess/API/gtk/PageClientImpl.cpp:
        (WebKit::PageClientImpl::startDrag):
        * UIProcess/API/gtk/PageClientImpl.h:
        * UIProcess/API/gtk/WebKitWebViewBase.cpp:
        (webkitWebViewBaseStartDrag):
        * UIProcess/API/gtk/WebKitWebViewBasePrivate.h:
        * UIProcess/PageClient.h:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::startDrag):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * WebProcess/WebCoreSupport/gtk/WebDragClientGtk.cpp:
        (WebKit::WebDragClient::startDrag):

2022-03-02  Youenn Fablet  <youenn@apple.com>

        Annotate LibWebRTC with thread safety macros
        https://bugs.webkit.org/show_bug.cgi?id=237321
        <rdar://problem/89625577>

        Unreviewed, addressing post commit style change.
        No change of behavior.

        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:

2022-03-02  Alex Christensen  <achristensen@webkit.org>

        Add SPI _WKDataTask
        https://bugs.webkit.org/show_bug.cgi?id=237234

        Reviewed by Tim Horton.

        When I added WKWebView._requestResource:completionHandler: I overlooked a few things.
        First, it is unable to support HTTPS because I didn't hook up authentication challenge handling to it.
        Second, it is unable to have a maximum accepted response length, which is a requirement for an adopter.
        To make these possible, I made _WKDataTask which is related to WKDownload and NSURLSessionDataTask.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::dataTaskWithRequest):
        (WebKit::NetworkProcess::cancelDataTask):
        (WebKit::NetworkProcess::requestResource): Deleted.
        * NetworkProcess/NetworkProcess.h:
        * NetworkProcess/NetworkProcess.messages.in:
        * NetworkProcess/NetworkSession.h:
        (WebKit::NetworkSession::dataTaskWithRequest):
        (WebKit::NetworkSession::cancelDataTask):
        (WebKit::NetworkSession::requestResource): Deleted.
        * NetworkProcess/cocoa/NetworkSessionCocoa.h:
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (WebKit::NetworkSessionCocoa::dataTaskWithRequest):
        (WebKit::NetworkSessionCocoa::cancelDataTask):
        (WebKit::NetworkSessionCocoa::removeDataTask):
        (WebKit::NetworkSessionCocoa::requestResource): Deleted.
        * NetworkProcess/cocoa/WKURLSessionTaskDelegate.h: Copied from Source/WebKit/Shared/Authentication/cocoa/AuthenticationChallengeDispositionCocoa.h.
        * NetworkProcess/cocoa/WKURLSessionTaskDelegate.mm: Added.
        (-[WKURLSessionTaskDelegate initWithIdentifier:session:]):
        (-[WKURLSessionTaskDelegate connection]):
        (-[WKURLSessionTaskDelegate URLSession:task:didReceiveChallenge:completionHandler:]):
        (-[WKURLSessionTaskDelegate URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:]):
        (-[WKURLSessionTaskDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):
        (-[WKURLSessionTaskDelegate URLSession:dataTask:didReceiveData:]):
        (-[WKURLSessionTaskDelegate URLSession:task:didCompleteWithError:]):
        * Scripts/webkit/messages.py:
        (types_that_cannot_be_forward_declared):
        * Shared/API/APIObject.h:
        * Shared/Authentication/cocoa/AuthenticationChallengeDispositionCocoa.h:
        * Shared/Authentication/cocoa/AuthenticationChallengeDispositionCocoa.mm:
        (WebKit::fromAuthenticationChallengeDisposition):
        * Shared/Cocoa/APIObject.mm:
        (API::Object::newObject):
        * Shared/DataTaskIdentifier.h: Copied from Source/WebKit/Shared/Authentication/cocoa/AuthenticationChallengeDispositionCocoa.h.
        * Sources.txt:
        * SourcesCocoa.txt:
        * UIProcess/API/APIDataTask.cpp: Copied from Source/WebKit/UIProcess/API/APIInspectorExtensionClient.h.
        (API::DataTask::setClient):
        (API::DataTask::cancel):
        (API::DataTask::DataTask):
        * UIProcess/API/APIDataTask.h: Copied from Source/WebKit/UIProcess/API/APIInspectorExtensionClient.h.
        (API::DataTask::create):
        (API::DataTask::page):
        (API::DataTask::client const):
        * UIProcess/API/APIDataTaskClient.h: Copied from Source/WebKit/UIProcess/API/APIInspectorExtensionClient.h.
        (API::DataTaskClient::create):
        (API::DataTaskClient::~DataTaskClient):
        (API::DataTaskClient::didReceiveChallenge const):
        (API::DataTaskClient::willPerformHTTPRedirection const):
        (API::DataTaskClient::didReceiveResponse const):
        (API::DataTaskClient::didReceiveData const):
        (API::DataTaskClient::didCompleteWithError const):
        * UIProcess/API/APIInspectorExtensionClient.h:
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _dataTaskWithRequest:completionHandler:]):
        (-[WKWebView _requestResource:completionHandler:]): Deleted.
        * UIProcess/API/Cocoa/WKWebViewPrivate.h:
        * UIProcess/API/Cocoa/_WKDataTask.h: Copied from Source/WebKit/UIProcess/API/APIInspectorExtensionClient.h.
        * UIProcess/API/Cocoa/_WKDataTask.mm: Added.
        (-[_WKDataTask cancel]):
        (-[_WKDataTask webView]):
        (-[_WKDataTask delegate]):
        (-[_WKDataTask setDelegate:]):
        (-[_WKDataTask dealloc]):
        (-[_WKDataTask _apiObject]):
        * UIProcess/API/Cocoa/_WKDataTaskDelegate.h: Added.
        * UIProcess/API/Cocoa/_WKDataTaskInternal.h: Copied from Source/WebKit/Shared/Authentication/cocoa/AuthenticationChallengeDispositionCocoa.h.
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::dataTaskWithRequest):
        (WebKit::NetworkProcessProxy::dataTaskReceivedChallenge):
        (WebKit::NetworkProcessProxy::dataTaskWillPerformHTTPRedirection):
        (WebKit::NetworkProcessProxy::dataTaskDidReceiveResponse):
        (WebKit::NetworkProcessProxy::dataTaskDidReceiveData):
        (WebKit::NetworkProcessProxy::dataTaskDidCompleteWithError):
        (WebKit::NetworkProcessProxy::requestResource): Deleted.
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::dataTaskWithRequest):
        (WebKit::WebPageProxy::requestResource): Deleted.
        * UIProcess/WebPageProxy.h:
        * WebKit.xcodeproj/project.pbxproj:

2022-03-01  Youenn Fablet  <youenn@apple.com>

        Remove RemoteVideoSample support from ImageTransferSessionVT
        https://bugs.webkit.org/show_bug.cgi?id=237318

        Reviewed by Eric Carlson.

        Remove no longer needed forward declaration or include of RemoteVideoSample.
        Remove ImageTransferSessionVT::createMediaSample(RemoteVideoSample&&) and replace it with direct use of MediaSampleAVFObjC.

        No change of behavior.

        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteMediaRecorder.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.cpp:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteRealtimeAudioSource.h:
        * WebProcess/cocoa/RemoteRealtimeMediaSourceProxy.h:
        * WebProcess/cocoa/UserMediaCaptureManager.h:

2022-03-01  Robert Jenner  <Jenner@apple.com>

        Unreviewed, reverting r290588.

        Patch r290588 caused ASAN build to fail on macOS

        Reverted changeset:

        "IPC_TESTING_API MessageArgumentDescriptions.cpp is slow to
        compile"
        https://bugs.webkit.org/show_bug.cgi?id=237195
        https://commits.webkit.org/r290588

2022-03-01  Alex Christensen  <achristensen@webkit.org>

        Fix clean build

        * UnifiedSources-output.xcfilelist:

2022-03-01  Wenson Hsieh  <wenson_hsieh@apple.com>

        Clipboard Paste dialog doesn't show on external monitors
        https://bugs.webkit.org/show_bug.cgi?id=236395
        rdar://88943577

        Reviewed by Tim Horton.

        Fix the bug by aligning the way we generate synthetic mouse click NSEvents in WebKit2 macOS, when:

        1. Showing the standard web content context menu
        2. Showing the DOM paste menu
        3. Showing the context menu for PDFs

        Critically, this makes AppKit choose the correct NSScreen when presenting the popup menu when showing the DOM
        paste menu, if the last mouse down event is `nil` upon presenting the menu.

        Covered by adding a debug assertion to verify that we aren't trying to present popup menus from a `nil` event
        during DOM paste.

        * UIProcess/API/mac/WKWebViewTestingMac.mm:
        (-[WKWebView _activeMenu]):
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::requestDOMPasteAccess):
        * UIProcess/WebPageProxy.h:
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::showContextMenuWithItems):
        * UIProcess/mac/WebPageProxyMac.mm:
        (WebKit::WebPageProxy::showPDFContextMenu):
        (WebKit::WebPageProxy::activeContextMenu const):

        Renamed from `platformActiveContextMenu`. The "platform" prefix in front of this method was unnecessary, since
        this is only invoked from macOS-only code that expects an NSMenu anyways.

        (WebKit::WebPageProxy::createSyntheticEventForContextMenu const):

        Add a helper method to create a synthetic NSEvent at the given location that's suitable for presenting a context
        menu; use this new helper in the three places described above.

        (WebKit::WebPageProxy::platformActiveContextMenu const): Deleted.

2022-03-01  Michael Catanzaro  <mcatanzaro@gnome.org>

        Misc compiler warnings, late Feb 2022 edition
        https://bugs.webkit.org/show_bug.cgi?id=237275

        Reviewed by Adrian Perez de Castro.

        Delete an unused function. Remove a redundant move.

        * Shared/AuxiliaryProcess.cpp:
        (WebKit::applySandboxProfileForDaemon): Deleted.
        * Shared/WebFoundTextRange.cpp:
        (WebKit::WebFoundTextRange::decode):

2022-03-01  Alex Christensen  <achristensen@webkit.org>

        Prepare to add more files to WebKit
        https://bugs.webkit.org/show_bug.cgi?id=237343

        Reviewed by Chris Dumez.

        This fixes the build after bug 237234, and it's unrelated so I pulled it into a different patch.

        * Scripts/generate-unified-sources.sh:
        * UIProcess/Cocoa/WebURLSchemeHandlerCocoa.mm:
        * WebKit.xcodeproj/project.pbxproj:

2022-03-01  Said Abou-Hallawa  <said@apple.com>

        [macOS][REGRESSION] (rr289518): Form controls are scaled twice on Retina display
        https://bugs.webkit.org/show_bug.cgi?id=237128
        rdar://89064642

        Reviewed by Darin Adler.

        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        (WebKit::RemoteDisplayListRecorderProxy::createImageBuffer const):
        (WebKit::RemoteDisplayListRecorderProxy::createAlignedImageBuffer const):
        (WebKit::RemoteDisplayListRecorderProxy::createCompatibleImageBuffer const): Deleted.
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:

2022-03-01  Eric Carlson  <eric.carlson@apple.com>

        [Cocoa] HLS stream currentTime sometimes jumps backwards
        https://bugs.webkit.org/show_bug.cgi?id=235087
        rdar://83831093

        Reviewed by Dean Jackson.

        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::currentTimeChanged): Always notify player when
        time jumps backwards.

2022-03-01  Sihui Liu  <sihui_liu@apple.com>

        Move StorageBucket function definitions outside the class definition
        https://bugs.webkit.org/show_bug.cgi?id=237300

        Reviewed by Chris Dumez.

        * NetworkProcess/storage/NetworkStorageManager.h:
        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::mode const):
        (WebKit::OriginStorageManager::StorageBucket::setMode):
        (WebKit::OriginStorageManager::StorageBucket::StorageBucket):
        (WebKit::OriginStorageManager::StorageBucket::connectionClosed):
        (WebKit::OriginStorageManager::StorageBucket::toStorageIdentifier const):
        (WebKit::OriginStorageManager::StorageBucket::typeStoragePath const):
        (WebKit::OriginStorageManager::StorageBucket::fileSystemStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::localStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::existingLocalStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::sessionStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::existingSessionStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::idbStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::existingIDBStorageManager):
        (WebKit::OriginStorageManager::StorageBucket::isActive const):
        (WebKit::OriginStorageManager::StorageBucket::isEmpty):
        (WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList):
        (WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromMemory):
        (WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromDisk):
        (WebKit::OriginStorageManager::StorageBucket::deleteData):
        (WebKit::OriginStorageManager::StorageBucket::deleteFileSystemStorageData):
        (WebKit::OriginStorageManager::StorageBucket::deleteLocalStorageData):
        (WebKit::OriginStorageManager::StorageBucket::deleteSessionStorageData):
        (WebKit::OriginStorageManager::StorageBucket::deleteIDBStorageData):
        (WebKit::OriginStorageManager::StorageBucket::moveData):
        (WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath):
        (WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath):
        (WebKit::OriginStorageManager::StorageBucket::toWebsiteDataType): Deleted.
        (WebKit::OriginStorageManager::StorageBucket::toStorageIdentifier): Deleted.

2022-03-01  Alex Christensen  <achristensen@webkit.org>

        If the main resource was loaded over private relay, load all sub resources over private relay
        https://bugs.webkit.org/show_bug.cgi?id=237296

        Reviewed by Geoffrey Garen.

        I manually verified that this fixes rdar://88965550 when using the CFNetwork change in the related bug.

        * NetworkProcess/NetworkConnectionToWebProcess.cpp:
        (WebKit::NetworkConnectionToWebProcess::createSocketChannel):
        * NetworkProcess/NetworkConnectionToWebProcess.h:
        * NetworkProcess/NetworkConnectionToWebProcess.messages.in:
        * NetworkProcess/NetworkResourceLoader.cpp:
        (WebKit::NetworkResourceLoader::transferToNewWebProcess):
        (WebKit::NetworkResourceLoader::didRetrieveCacheEntry):
        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::createWebSocketTask):
        * NetworkProcess/NetworkSession.h:
        * NetworkProcess/NetworkSocketChannel.cpp:
        (WebKit::NetworkSocketChannel::create):
        (WebKit::NetworkSocketChannel::NetworkSocketChannel):
        * NetworkProcess/NetworkSocketChannel.h:
        * NetworkProcess/cocoa/NetworkDataTaskCocoa.mm:
        (WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa):
        * NetworkProcess/cocoa/NetworkSessionCocoa.h:
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:dataTask:didReceiveResponse:completionHandler:]):
        (WebKit::NetworkSessionCocoa::createWebSocketTask):
        * WebProcess/Network/WebLoaderStrategy.cpp:
        (WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess):
        * WebProcess/Network/WebSocketChannel.cpp:
        (WebKit::WebSocketChannel::connect):

2022-03-01  Jer Noble  <jer.noble@apple.com>

        [Cocoa] Allow logging to be configured by NSDefaults (without regressing launch time)
        https://bugs.webkit.org/show_bug.cgi?id=237183

        Reviewed by Darin Adler.

        In r220780, code was added to WebProcessPoolCocoa to explicitly pass the results of a NSUserDefaults
        to newly created WebContent processes to determine log channel levels. Later, in r232158, NSUserDefaults
        were removed from the default logLevelString() implementations in WTF, WebCore, and WebKit to improve
        process launch time performance. In r279796, the same technique sued in WebProcessPoolCocoa was added
        to GPUProcessProxyCocoa to pass those log level strings to the GPUProcess. And then in r286484, all the
        uses of NSUserDefaults were removed from WebProcessPoolCocoa and GPUProcessProxyCocoa were removed,
        removing the ability to increase the log channel levels at runtime through NSUserDefualts.

        Add back in the ability to define log levels for the UIProcess and all AuxiliaryProcesses without
        regressing launch time by only checking the NSUserDefault once, only in the UIProcess, storing the result
        in a static variable, and passing the results of that check to all AuxiliaryProcesses at creation time.

        * UIProcess/AuxiliaryProcessProxy.cpp:
        (WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters):
        * UIProcess/Cocoa/UIProcessLogInitializationCocoa.mm: Added.
        (WebKit::UIProcess::wtfLogLevelString):
        (WebKit::UIProcess::webCoreLogLevelString):
        (WebKit::UIProcess::webKitLogLevelString):
        * UIProcess/UIProcessLogInitialization.cpp: Added.
        (WebKit::UIProcess::initializeLoggingIfNecessary):
        (WebKit::UIProcess::wtfLogLevelString):
        (WebKit::UIProcess::webCoreLogLevelString):
        (WebKit::UIProcess::webKitLogLevelString):
        * UIProcess/UIProcessLogInitialization.h: Added.
        * UIProcess/WebProcessPool.cpp:

2022-03-01  Youenn Fablet  <youenn@apple.com>

        Annotate LibWebRTC with thread safety macros
        https://bugs.webkit.org/show_bug.cgi?id=237321

        Reviewed by Eric Carlson.

        LibWebRTCCodecs works with 3 threads and we add macros to make it clear where each thread is used:
        - the main thread to get its GPU process connection (isMainRunLoop()).
        - the libwebrtc thread where it gets orders to decode/encode frames (!isMainRunLoop())
        - the work queue thread where it is receiving encode/decode results (assertIsCurrent(workQueue())).

        Rename m_encodersLock to m_encodersConnectionLock to make it clear this is about locking the encoder connection and not the encoder map.
        Both decoder and encoder maps should only be touched on the workQueue thread.

        Introduce encoderConnection/setEncoderConnection and decoderConnection/setDecoderConnection routines.
        These methods are guarded by corresponding locks.
        This requires adding some additional locks when accessing connections in workQueue thread.
        Fix a potential issue when creating the encoder: we lock the encoderConnection lock earlier when setting the connection.

        Covered by existing tests.

        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::gpuProcessConnectionMayNoLongerBeNeeded):
        (WebKit::LibWebRTCCodecs::createDecoder):
        (WebKit::LibWebRTCCodecs::releaseDecoder):
        (WebKit::LibWebRTCCodecs::decodeFrame):
        (WebKit::LibWebRTCCodecs::registerDecodeFrameCallback):
        (WebKit::LibWebRTCCodecs::failedDecoding):
        (WebKit::LibWebRTCCodecs::completedDecoding):
        (WebKit::LibWebRTCCodecs::completedDecodingCV):
        (WebKit::LibWebRTCCodecs::createEncoder):
        (WebKit::LibWebRTCCodecs::releaseEncoder):
        (WebKit::LibWebRTCCodecs::initializeEncoder):
        (WebKit::LibWebRTCCodecs::copySharedVideoFrame):
        (WebKit::LibWebRTCCodecs::encodeFrame):
        (WebKit::LibWebRTCCodecs::registerEncodeFrameCallback):
        (WebKit::LibWebRTCCodecs::setEncodeRates):
        (WebKit::LibWebRTCCodecs::completedEncoding):
        (WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose):
        (WebKit::LibWebRTCCodecs::encoderConnection):
        (WebKit::LibWebRTCCodecs::setEncoderConnection):
        (WebKit::LibWebRTCCodecs::decoderConnection):
        (WebKit::LibWebRTCCodecs::setDecoderConnection):
        (WebKit::copySharedVideoFrame): Deleted.
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        (WebKit::LibWebRTCCodecs::workQueue const):

2022-03-01  Wenson Hsieh  <wenson_hsieh@apple.com>

        focus({preventScroll: true}) does not prevent scrolling on iOS
        https://bugs.webkit.org/show_bug.cgi?id=236584
        rdar://88911184

        Reviewed by Simon Fraser.

        Add support for `preventScroll` on iOS by avoiding UI-side zooming/scrolling to reveal the focused element if it
        was focused with `preventScroll: true`. See below for more details.

        Tests: fast/forms/select-focus-prevent-scroll.html
               fast/forms/text-field-focus-prevent-scroll.html

        * Shared/FocusedElementInformation.cpp:
        (WebKit::FocusedElementInformation::encode const):
        (WebKit::FocusedElementInformation::decode):
        * Shared/FocusedElementInformation.h:

        Add a boolean flag to `FocusedElementInformation` to indicate whether or not scrolling to reveal the focused
        element should be prevented.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _zoomToRevealFocusedElement]):

        Only zoom to reveal the focused element if the focused element information's `preventScroll` flag is `NO`.

        (-[WKContentView _elementDidBlur]):
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::elementDidFocus):
        (WebKit::WebChromeClient::elementDidRefocus):
        * WebProcess/WebCoreSupport/WebChromeClient.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::elementDidRefocus):
        (WebKit::WebPage::elementDidFocus):

        Use `FocusOptions` to set the `preventScroll` flag when propagating `FocusedElementInformation`.

        * WebProcess/WebPage/WebPage.h:

2022-03-01  Kimmo Kinnunen  <kkinnunen@apple.com>

        WebGL GPUP OpenGL context is not used even if WebGL via Metal is deselected
        https://bugs.webkit.org/show_bug.cgi?id=236505

        Reviewed by Myles C. Maxfield.

        * Shared/WebCoreArgumentCoders.cpp:
        * Shared/WebCoreArgumentCoders.h:

2022-03-01  Kimmo Kinnunen  <kkinnunen@apple.com>

        GraphicsContextGL related includes are inconsistent, slowing the build
        https://bugs.webkit.org/show_bug.cgi?id=237270

        Reviewed by Alexey Proskuryakov.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:

2022-03-01  Sihui Liu  <sihui_liu@apple.com>

        Migrate third-party IndexedDB data to GeneralStorageDirectory
        https://bugs.webkit.org/show_bug.cgi?id=237283

        Reviewed by Chris Dumez.

        In current storage layout, third-party IndexedDB data is stored in a subdirectory of top origin directory, e.g.
        [IndexedDBDirectory]/[TopOrigin]/[ThirdPartyOrigin]/[Database]. First-party data is stored in the top origin
        directory, e.g. [IndexedDBDirectory]/[TopOrigin]/[Database]. Our current migration code directly renames the 
        origin directory without checking whether it has subdirectory that is a third-party directory. That means, 
        [IndexedDBDirectory]/[TopOrigin]/ is moved to [GeneralStorageDirectory]/[TopOrigin]/[TopOrigin]/[IndexedDB]/, 
        and [IndexedDBDirectory]/[TopOrigin]/[ThirdPartyOrigin]/ is moved to 
        [GeneralStorageDirectory]/[TopOrigin]/[TopOrigin]/[IndexedDB]/[ThirdPartyOrigin] ([ThirdPartyOrigin]/ here is
        treated as a database directory). This is wrong: the new third-party directory should actually be 
        [GeneralStorageDirectory]/[TopOrigin]/[ThirdPartyOrigin]/[IndexedDB]/.

        To fix this, we now make sure only first-party data is migrated when first-party IndexedDB database is visited,
        by moving only database directories under origin directory.

        Test: IndexedDB.MigrateThirdPartyDataToGeneralStorageDirectory

        * NetworkProcess/storage/IDBStorageManager.cpp:
        (WebKit::migrateOriginDataImpl):
        (WebKit::IDBStorageManager::idbStorageOriginDirectory):
        (WebKit::IDBStorageManager::migrateOriginData):
        (WebKit::migrateOriginData): Deleted.
        * NetworkProcess/storage/IDBStorageManager.h:
        * NetworkProcess/storage/OriginStorageManager.cpp:
        (WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath):

2022-02-28  Chris Dumez  <cdumez@apple.com>

        [IPC] Do more hardening in WebSWServerConnection's client registration / unregistration
        https://bugs.webkit.org/show_bug.cgi?id=237290
        <rdar://88903506>

        Reviewed by Alex Christensen.

        Validate client identifiers sent by the WebContent process via IPC to make sure that the
        process identifier of the client actually matches the process identifier of the process
        we're connected to.

        Also validate the SecurityOriginData to make sure it is not empty. We support sending
        empty SecurityOriginData objects over IPC. However, they cannot be used as keys in
        HashMaps.

        If validation fails, we assume the WebContent process is compromised and we terminate it.

        * NetworkProcess/ServiceWorker/WebSWServerConnection.cpp:
        (WebKit::WebSWServerConnection::registerServiceWorkerClient):
        (WebKit::WebSWServerConnection::unregisterServiceWorkerClient):

2022-02-28  Alex Christensen  <achristensen@webkit.org>

        Fix use-after-move bug in NetworkResourceLoader
        https://bugs.webkit.org/show_bug.cgi?id=237294

        Reviewed by Chris Dumez.

        Luckily, they were just two booleans, and after you call std::move on a bool you get
        technically undefined behavior.  Luckily, in practice the bool value is unchanged.
        We don't need to rely on that, though.  Let's read from the location with defined behavior.

        * NetworkProcess/NetworkResourceLoader.cpp:

2022-02-28  Ross Kirsling  <ross.kirsling@sony.com>

        REGRESSION(r290470): CDMInstanceSession::setLogIdentifier must be guarded with !RELEASE_LOG_DISABLED
        https://bugs.webkit.org/show_bug.cgi?id=237302

        Unreviewed build fix.

        * GPUProcess/media/RemoteCDMInstanceSessionProxy.cpp:
        (WebKit::RemoteCDMInstanceSessionProxy::setLogIdentifier):

2022-02-28  Sihui Liu  <sihui_liu@apple.com>

        [macOS] TestWebKitAPI.WebKit.MigrateLocalStorageDataToGeneralStorageDirectory is a flaky failure
        https://bugs.webkit.org/show_bug.cgi?id=237065
        <rdar://problem/89324250>

        Reviewed by Darin Adler.

        Revert r290544 as it does not fully fix the flaky test. The flakiness is caused by network process exiting
        before transactions of SQLiteStorageArea are committed. In NetworkProcess::destroySession, we schedule a 
        background task to commit transactions in the session, and remove session. In NetworkProcess::didClose, for 
        existing sessions, we schedule tasks to commit transaction and wait until the tasks are finished before exiting 
        network process. That means for a session, when NetworkProcess::destroySession is called before 
        NetworkProcess::didClose, process may exit before commit task (scheduled by NetworkProcess::destroySession) is
        finished (NetworkProcess::didClose does not wait because session is already removed). 

        To solve this issue, let NetworkProcess::didClose check existing NetworkStorageManagers, instead of 
        NetworkSessions. NetworkStorageManager can outlive NetworkSession when it's finishing cleanup task
        (including committing transactions) on its background thread; we want to ensure process exits after the cleanup
        task is done.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::didClose):
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::allNetworkStorageManagers):
        (WebKit::NetworkStorageManager::forEach):
        (WebKit::NetworkStorageManager::NetworkStorageManager):
        (WebKit::NetworkStorageManager::~NetworkStorageManager):
        * NetworkProcess/storage/NetworkStorageManager.h:
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::SQLiteStorageArea::SQLiteStorageArea):
        (WebKit::SQLiteStorageArea::startTransactionIfNecessary):
        (WebKit::SQLiteStorageArea::commitTransactionIfNecessary):
        (WebKit::commitTransactionsAtExit): Deleted.

2022-02-28  Jer Noble  <jer.noble@apple.com>

        [Cocoa] Adopt -streamDataParser:didProvideContentKeySpecifier:forTrackID: delegate callback
        https://bugs.webkit.org/show_bug.cgi?id=236109
        <rdar://problem/88785844>

        Reviewed by Eric Carlson.

        Pass the new RuntimeEnabledFeature through to the GPU process.

        * GPUProcess/GPUProcess.cpp:
        (WebKit::GPUProcess::setSampleBufferContentKeySessionSupportEnabled):
        * GPUProcess/GPUProcess.h:
        * GPUProcess/GPUProcess.messages.in:
        * GPUProcess/GPUProcessCreationParameters.cpp:
        (WebKit::GPUProcessCreationParameters::encode const):
        (WebKit::GPUProcessCreationParameters::decode):
        * GPUProcess/GPUProcessCreationParameters.h:
        * UIProcess/GPU/GPUProcessProxy.cpp:
        (WebKit::GPUProcessProxy::updatePreferences):
        * UIProcess/GPU/GPUProcessProxy.h:

2022-02-28  Chris Dumez  <cdumez@apple.com>

        Adopt the modern Hasher more widely
        https://bugs.webkit.org/show_bug.cgi?id=237262

        Reviewed by Sam Weinig.

        * NetworkProcess/cache/NetworkCache.h:
        (WebKit::NetworkCache::add):
        (WTF::GlobalFrameIDHash::hash):
        (WebKit::NetworkCache::GlobalFrameID::hash const): Deleted.
        * Platform/IPC/StringReference.cpp:
        (IPC::StringReference::Hash::hash):
        * Platform/IPC/StringReference.h:
        (IPC::add):

2022-02-28  Alex Christensen  <achristensen@webkit.org>

        Fix typo in adattributiond sandbox
        https://bugs.webkit.org/show_bug.cgi?id=237279

        Reviewed by Chris Dumez.

        After this change, it matches the value in com.apple.webkit.adattributiond.plist

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:

2022-02-28  Ross Kirsling  <ross.kirsling@sony.com>

        REGRESSION(r290588): Broke WinCairo and PlayStation debug builds
        https://bugs.webkit.org/show_bug.cgi?id=237277

        Unreviewed build fix.

        * Scripts/webkit/messages.py:
        (conditions_for_header):

2022-02-28  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION(r290588) Missing symbol jsValueForDecodedMessage<107> (IPCStreamTesterProxy_WasCreated)
        https://bugs.webkit.org/show_bug.cgi?id=237268

        Reviewed by Antti Koivisto.

        Add the class IPCStreamTesterProxy now that *MessageReceiver.cpp
        are needed. After commit
        "IPC_TESTING_API MessageArgumentDescriptions.cpp is slow to compile"
        MessageReceiver.cpp files contain also message-specific functions that
        need to be compiled, even though IPCStreamTesterProxy itself is not
        used.

        * Shared/IPCStreamTesterProxy.h: Added.
        * Sources.txt:
        * WebKit.xcodeproj/project.pbxproj:

2022-02-28  Youenn Fablet  <youenn@apple.com>

        RemoteVideoFrameObjectHeap should process its IPC messages in a background thread
        https://bugs.webkit.org/show_bug.cgi?id=237198

        Reviewed by Darin Adler.

        Minor refactoring to have addWorkQueueMessageReceiver take a reference instead of a pointer.
        Make RemoteVideoFrameObjectHeap become a WorkQueueMessageReceiver.
        This ensures that a main thread hang in GPUProcess will not block big memory releases or WebProcess access to pixel buffers.

        No observable change of behavior.

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::didClose):
        (WebKit::GPUConnectionToWebProcess::videoFrameObjectHeap const):
        * GPUProcess/GPUConnectionToWebProcess.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::remoteVideoFrameObjectHeapQueue):
        (WebKit::RemoteVideoFrameObjectHeap::create):
        (WebKit::RemoteVideoFrameObjectHeap::RemoteVideoFrameObjectHeap):
        (WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap):
        (WebKit::RemoteVideoFrameObjectHeap::close):
        (WebKit::RemoteVideoFrameObjectHeap::releaseVideoFrame):
        (WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer):
        (WebKit::RemoteVideoFrameObjectHeap::pixelBuffer):
        (WebKit::RemoteVideoFrameObjectHeap::stopListeningForIPC): Deleted.
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * NetworkProcess/IndexedDB/WebIDBServer.cpp:
        (WebKit::WebIDBServer::addConnection):
        * NetworkProcess/WebStorage/StorageManagerSet.cpp:
        (WebKit::StorageManagerSet::addConnection):
        * NetworkProcess/storage/NetworkStorageManager.cpp:
        (WebKit::NetworkStorageManager::startReceivingMessageFromConnection):
        * NetworkProcess/webrtc/RTCDataChannelRemoteManagerProxy.cpp:
        (WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess):
        * Platform/IPC/Connection.cpp:
        (IPC::Connection::addWorkQueueMessageReceiver):
        * Platform/IPC/Connection.h:
        * UIProcess/mac/SecItemShimProxy.cpp:
        (WebKit::SecItemShimProxy::initializeConnection):
        * WebProcess/GPU/media/RemoteAudioSourceProviderManager.cpp:
        (WebKit::RemoteAudioSourceProviderManager::setConnection):
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        (WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor):
        * WebProcess/Inspector/WebInspectorInterruptDispatcher.cpp:
        (WebKit::WebInspectorInterruptDispatcher::initializeConnection):
        * WebProcess/Network/webrtc/RTCDataChannelRemoteManager.cpp:
        (WebKit::RTCDataChannelRemoteManager::setConnection):
        * WebProcess/WebPage/EventDispatcher.cpp:
        (WebKit::EventDispatcher::initializeConnection):
        * WebProcess/WebPage/ViewUpdateDispatcher.cpp:
        (WebKit::ViewUpdateDispatcher::initializeConnection):

2022-02-28  Youenn Fablet  <youenn@apple.com>

        Ensure RemoteMediaPlayerProxy sets its resource owner to pixel buffers created by its player
        https://bugs.webkit.org/show_bug.cgi?id=237200

        Reviewed by Eric Carlson.

        Set resource owner to the player private.

        * GPUProcess/media/RemoteMediaPlayerManagerProxy.cpp:
        (WebKit::RemoteMediaPlayerManagerProxy::createMediaPlayer):
        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        (WebKit::RemoteMediaPlayerProxy::RemoteMediaPlayerProxy):
        * GPUProcess/media/RemoteMediaPlayerProxy.h:

2022-02-28  Kimmo Kinnunen  <kkinnunen@apple.com>

        IPC_TESTING_API MessageArgumentDescriptions.cpp is slow to compile
        https://bugs.webkit.org/show_bug.cgi?id=237195

        Reviewed by Antti Koivisto.

        IPC testing API needs convert message data buffer, IPC::Decoder, to
        JSValue. This is a run-time operation.
        IPC message decoding is based on templates, a compile time operation.
        IPC generator generates MessageArgumentDescriptions.cpp with
        a big switch. The switch has a case for each message name. The case would
        call templated jsValueForDecodedArguments<Arguments>, where the Arguments
        is the type tuple for the message arguments.

        The above would mean that MessageArgumentDescriptions would need to
        include all the headers for all the messages in WebKit in order
        to populate the Arguments tuple for particular message.
        This would cause MessageArgumentDescriptions to be slow to compile because
        it would need all the headers in Source/WebKit related to message parameter types.

        This would show up as slow compiles that would consume much memory (5-6gb) and do a
        lot of work.

        It would also have to compile the MessageArgumentDescriptions each time
        any of the headers were touched.

        Change this so that the big switch calls a declared but not defined
        template jsValueForDecodedMessage<MessageName> for each MessageName case in the
        switch.

        Instantiate the template for each message in the *MessageReceiver.cpp file
        that each message receiver has. This file already has to include all the
        headers used for that particular message receiver. These files are small and compile
        fast.

        After this change MessageArgumentDescriptions.cpp only includes the message
        definition headers, does not use much more than the standard 1gb+ of memory
        while compiling and is relatively fast to compile. Also if any of the dependent
        headers are touched, only the corresponding small *MessageReceiver.cpp files are compiled.

        This change is needed for further improve the JS testing API implementation.
        Adding new operations that employ the same strategy, eg. switch and a complex
        template instantiation, would possibly just make the matter worse. New operations
        that are needed are message sends, which use templates similarly to the message
        decode case that is implement here.

        This change regenerates the checked-in test content that can be used to review
        what kind of changes the real MessageArgumentDescriptions.cpp and MessageReceiver.cpps
        get.

        * Platform/IPC/JSIPCBinding.h:
        * Scripts/webkit/messages.py:
        (generate_message_handler):
        (generate_js_value_conversion_function):
        (generate_message_argument_description_implementation):
        * Scripts/webkit/tests/MessageArgumentDescriptions.cpp:
        (IPC::jsValueForArguments):
        (IPC::jsValueForReplyArguments):
        * Scripts/webkit/tests/TestWithCVPixelBufferMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithCVPixelBuffer_SendCVPixelBuffer>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithCVPixelBuffer_ReceiveCVPixelBuffer>):
        * Scripts/webkit/tests/TestWithIfMessageMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithIfMessage_LoadURL>):
        * Scripts/webkit/tests/TestWithImageDataMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithImageData_SendImageData>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithImageData_ReceiveImageData>):
        * Scripts/webkit/tests/TestWithLegacyReceiverMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadSomething>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TouchEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_AddEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_LoadSomethingElse>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DidReceivePolicyDecision>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_Close>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_PreferencesDidChange>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SendDoubleAndFloat>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SendInts>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_CreatePlugin>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_RunJavaScriptAlert>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_GetPlugins>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithLegacyReceiver_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithLegacyReceiver_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TestParameterAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_TemplateTest>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_SetVideoLayerID>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DidCreateWebProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_InterpretKeyEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_DeprecatedOperation>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithLegacyReceiver_ExperimentalOperation>):
        * Scripts/webkit/tests/TestWithSemaphoreMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSemaphore_SendSemaphore>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSemaphore_ReceiveSemaphore>):
        * Scripts/webkit/tests/TestWithStreamBufferMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStreamBuffer_SendStreamBuffer>):
        * Scripts/webkit/tests/TestWithStreamMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendString>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendStringSynchronized>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendMachSendRight>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_ReceiveMachSendRight>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithStream_SendAndReceiveMachSendRight>):
        * Scripts/webkit/tests/TestWithSuperclassMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessage>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithNoArguments>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithNoArguments>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithMultipleArguments>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithMultipleArguments>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestAsyncMessageWithConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestAsyncMessageWithConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestSyncMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestSyncMessage>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithSuperclass_TestSynchronousMessage>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithSuperclass_TestSynchronousMessage>):
        * Scripts/webkit/tests/TestWithoutAttributesMessageReceiver.cpp:
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadURL>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadSomething>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TouchEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_AddEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_LoadSomethingElse>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DidReceivePolicyDecision>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_Close>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_PreferencesDidChange>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SendDoubleAndFloat>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SendInts>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_CreatePlugin>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_RunJavaScriptAlert>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_GetPlugins>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithoutAttributes_GetPluginProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessageReply<MessageName::TestWithoutAttributes_TestMultipleAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TestParameterAttributes>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_TemplateTest>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_SetVideoLayerID>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DidCreateWebProcessConnection>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_InterpretKeyEvent>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_DeprecatedOperation>):
        (IPC::jsValueForDecodedMessage<MessageName::TestWithoutAttributes_ExperimentalOperation>):

2022-02-27  Sihui Liu  <sihui_liu@apple.com>

        Add a feature flag for using general storage directory
        https://bugs.webkit.org/show_bug.cgi?id=237186
        rdar://89521373

        Reviewed by Chris Dumez.

        * FeatureFlags/WebKit-appletvos.plist:
        * FeatureFlags/WebKit-ios.plist:
        * FeatureFlags/WebKit-macos.plist:
        * FeatureFlags/WebKit-watchos.plist:
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::WebsiteDataStore::defaultShouldUseCustomStoragePaths):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::defaultShouldUseCustomStoragePaths):
        * UIProcess/WebsiteData/WebsiteDataStore.h:
        * UIProcess/WebsiteData/WebsiteDataStoreConfiguration.cpp:
        (WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration):
        * UIProcess/WebsiteData/WebsiteDataStoreConfiguration.h:

2022-02-27  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Deleted unneeded constructors from DisplayList::Recorder classes
        https://bugs.webkit.org/show_bug.cgi?id=237261

        Reviewed by Wenson Hsieh.

        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.cpp:
        * WebProcess/GPU/graphics/RemoteDisplayListRecorderProxy.h:

2022-02-27  Wenson Hsieh  <wenson_hsieh@apple.com>

        Invoking "Markup Image" should preserve the existing selection range
        https://bugs.webkit.org/show_bug.cgi?id=237242

        Reviewed by Darin Adler.

        Make a few adjustments to `replaceWithPasteboardData`, such that it attempts to restore the previous selection
        range after replacing the target element. If the previous selection is no longer valid (i.e., it was orphaned as
        a result of the editing command used to replace the element), then we fall back to restoring the visible
        character range of the previous selection, relative to the editable root (or the body if there is none).

        API tests will be added in https://webkit.org/b/236519, once we're able to swizzle out the underlying VisionKit
        methods in order to make these tests run reliably.

        * WebProcess/WebPage/Cocoa/WebPageCocoa.mm:
        (WebKit::OverridePasteboardForSelectionReplacement::OverridePasteboardForSelectionReplacement):
        (WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement):

        Add a helper RAII object that encapsulates logic for setting and unsetting data on the override pasteboard. Use
        this in the two methods below.

        (WebKit::WebPage::replaceWithPasteboardData):

        Switch to using the refactored `Editor::replaceNodeFromPasteboard` method instead of calling to the adjacent
        `replaceSelectionWithPasteboardData` method below. Using this method allows us to avoid manually selecting the
        target element here, and also avoids smart pasteboard replacement (which may insert spaces before or after the
        image); the latter is important in order to correctly restore the previous selection's character range in the
        case where the previous selection range was orphaned by the replacement.

        (WebKit::WebPage::replaceSelectionWithPasteboardData):

2022-02-27  Chris Dumez  <cdumez@apple.com>

        Omit template parameter for SetForScope<> variables
        https://bugs.webkit.org/show_bug.cgi?id=237258

        Reviewed by Darin Adler.

        * NetworkProcess/storage/QuotaManager.cpp:
        (WebKit::QuotaManager::handleRequests):
        * Shared/API/Cocoa/WKRemoteObjectCoder.mm:
        (createEncodedObject):
        (decodeObject):
        * UIProcess/API/glib/InputMethodFilter.cpp:
        (WebKit::InputMethodFilter::filterKeyEvent):
        * UIProcess/API/glib/WebKitWebView.cpp:
        (WebKitWebViewClient::frameDisplayed):
        * UIProcess/API/gtk/InputMethodFilterGtk.cpp:
        (WebKit::InputMethodFilter::filterKeyEvent):
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _keyboardChangedWithInfo:adjustScrollView:]):
        * UIProcess/Cocoa/WebViewImpl.mm:
        (WebKit::WebViewImpl::updateTextTouchBar):
        * UIProcess/Inspector/WebInspectorUIProxy.cpp:
        (WebKit::WebInspectorUIProxy::open):
        (WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow):
        * UIProcess/RemoteLayerTree/ios/ScrollingTreeScrollingNodeDelegateIOS.mm:
        (WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren):
        * UIProcess/_WKWebViewPrintFormatter.mm:
        (-[_WKWebViewPrintFormatter _setSnapshotPaperRect:]):
        * UIProcess/gtk/ClipboardGtk3.cpp:
        (WebKit::Clipboard::write):
        * UIProcess/gtk/WebDateTimePickerGtk.cpp:
        (WebKit::WebDateTimePickerGtk::update):
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView becomeFirstResponderForWebView]):
        (-[WKContentView resignFirstResponderForWebView]):
        (-[WKContentView unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded]):
        (-[WKContentView _elementDidFocus:userIsInteracting:blurPreviousNode:activityStateChanges:userObject:]):
        (-[WKContentView _elementDidBlur]):
        * UIProcess/ios/forms/WKDateTimeInputControl.mm:
        (-[WKDateTimePicker handleDatePickerPresentationDismissal]):
        (-[WKDateTimePicker removeDatePickerPresentation]):
        * WebProcess/Plugins/Plugin.cpp:
        (WebKit::Plugin::destroyPlugin):
        * WebProcess/WebPage/CoordinatedGraphics/CompositingCoordinator.cpp:
        (WebKit::CompositingCoordinator::flushPendingLayerChanges):
        (WebKit::CompositingCoordinator::purgeBackingStores):
        * WebProcess/WebPage/RemoteLayerTree/RemoteLayerTreeDrawingArea.mm:
        (WebKit::RemoteLayerTreeDrawingArea::updateRendering):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::stopLoadingDueToProcessSwap):
        (WebKit::WebPage::mouseEvent):
        (WebKit::WebPage::keyEvent):
        (WebKit::WebPage::restoreSessionInternal):
        (WebKit::WebPage::dispatchTouchEvent):
        (WebKit::WebPage::setInitialFocus):
        (WebKit::WebPage::setActivityState):
        (WebKit::WebPage::insertTextAsync):
        (WebKit::WebPage::createAppHighlightInSelectedRange):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::completeSyntheticClick):
        (WebKit::WebPage::requestDragStart):
        (WebKit::WebPage::requestAdditionalItemsForDragSession):
        (WebKit::WebPage::selectPositionAtPoint):
        (WebKit::WebPage::dynamicViewportSizeUpdate):
        (WebKit::WebPage::focusTextInputContextAndPlaceCaret):
        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::DrawingAreaWC::updateRendering):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::prepareToSuspend):

2022-02-27  Chris Dumez  <cdumez@apple.com>

        Simplify SerializedScriptValue construction
        https://bugs.webkit.org/show_bug.cgi?id=237241

        Reviewed by Darin Adler.

        Update code base to reflect SerializedScriptValue API changes.

        * Shared/API/APISerializedScriptValue.h:
        (API::SerializedScriptValue::createFromWireBytes):
        (API::SerializedScriptValue::dataReference const):
        (API::SerializedScriptValue::adopt): Deleted.
        * Shared/SessionState.cpp:
        (WebKit::PageState::encode const):
        * Shared/UserData.cpp:
        (WebKit::UserData::decode):
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _evaluateJavaScript:asAsyncFunction:withSourceURL:withArguments:forceUserGesture:inFrame:inWorld:completionHandler:]):
        * UIProcess/Inspector/WebInspectorUIExtensionControllerProxy.cpp:
        (WebKit::WebInspectorUIExtensionControllerProxy::evaluateScriptForExtension):
        (WebKit::WebInspectorUIExtensionControllerProxy::evaluateScriptInExtensionTab):
        * UIProcess/UserContent/WebUserContentControllerProxy.cpp:
        (WebKit::WebUserContentControllerProxy::didPostMessage):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld):
        * WebProcess/Inspector/WebInspectorUIExtensionController.cpp:
        (WebKit::WebInspectorUIExtensionController::evaluateScriptForExtension):
        (WebKit::WebInspectorUIExtensionController::evaluateScriptInExtensionTab):
        * WebProcess/UserContent/WebUserContentController.cpp:
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFrameState):
        (WebKit::applyFrameState):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::runJavaScript):

2022-02-27  Chris Dumez  <cdumez@apple.com>

        Call WKNavigationDelegate.didFailProvisionalNavigation even after a cross-origin navigation with COOP
        https://bugs.webkit.org/show_bug.cgi?id=237071
        <rdar://problem/89354367>

        Reviewed by Darin Adler.

        When doing a process swap on navigation (PSON), we start a new provisional load in the new provisional
        process and ask the committed process to stop all loads. Since we swap in decidePolicyForNavigationAction,
        no provisional load has started in the committed process yet. If the provisional process sends us a
        didFailProvisionalLoad though, we know the provisional load has failed and we take this into consideration
        and notify the client app.

        When doing a process swap on resource response (due to COOP), we were behaving differently and it was
        causing some confusion. Since we swap on resource response, the provisional load has started in the
        committed process by the time we process-swap (unlike PSON). We were also not asking for the committed
        process to stop/cancel this provisional load. As a result, a provisional load would still be going on
        in the committed process while another provisional load starts happening in the provisional page / process.
        Then, if the provisional process would send us a didFailProvisional, we would not pass it along to the
        client app. Instead we would destroy the ProvisionalPageProxy, which would tell the committed process to
        stop loading and send its own didFailProvisionalLoad, and the client app would eventually get notified.

        Even though the difference in behavior was confusing, it was working in most cases. There was however
        an edge case where it didn't work and we would fail to tell the client app that the provisional load
        had failed. In particular, we would run into trouble when navigating cross-site to a site that adopted
        the COOP header. We would first do a process-swap on navigation, stop the provisional load in the committed
        process A, then start a provisional load in process B. We would then get the COOP header and we would
        start a new provisional load in process C. Process B would go away since we cannot have 2 provisional
        pages / processes at the same time for the same WebPageProxy. Then if the provisional load fails in
        process C, we would ignore the didFailProvisionalLoad from process C and destroy the provisional page.
        We would tell the committed process A to stop loading, expecting it to send its own didFailProvisionalLoad
        but it wouldn't happen since PSON had already stopped all loading in process A earlier when swapping to
        process B.

        To address the issue, we align COOP process swap with PSON process swap. We now has the committed process
        to stop all loads when process swapping on resource response due to COOP. As a result, when the provisional
        load fails in the provisional process, we can simply pass it along to the client, no matter if the process
        swap occurred due to PSON or COOP.

        Covered by new API test.

        * UIProcess/ProvisionalPageProxy.cpp:
        (WebKit::ProvisionalPageProxy::~ProvisionalPageProxy):
        We no longer need to tell the committed process to stop loading when the provisional page gets destroyed
        and this was a process swap on resource response. The reason is that when process-swapping on navigation
        response, we now drop the provisional load in the committed process right away, like in the PSON case.

        (WebKit::ProvisionalPageProxy::cancel):
        When cancelling a provisional load due to PSON or COOP, we need to notify the client that the provisional
        load failed. We used to only to it in the PSON case. We now do it for both PSON and COOP since they
        behave the same.

        (WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame):
        Similarly as above, now that PSON and COOP behave the same, we need to pass the didFailProvisionalLoad
        from the provisional process to the client app for both PSON and COOP (Not just PSON).

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation):
        When triggering a process swap on resource response (due to COOP), we now stop the provisional load going
        on in the committed process to be consistent with what we do in the PSON case. This way there is only a
        single provisional load going on and it is happening in the provisional page / process.


2022-02-27  Youenn Fablet  <youenn@apple.com>

        Exposing RemoteVideoFrameProxy::write is unneeded
        https://bugs.webkit.org/show_bug.cgi?id=237212

        Reviewed by Eric Carlson.

        Exposing RemoteVideoFrameProxy::write is unneeded as RemoteVideoFrameProxy is immutable.
        It is best to remove it as calling write() inadvertently would break things.
        Renaming read() to newReadReference() to make it clear that we are creating a new read reference
        that needs to be sent to GPUProcess to prevent leaks.
        No change of behavior.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxy.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia):
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        (WebKit::RemoteVideoFrameProxy::~RemoteVideoFrameProxy):
        (WebKit::RemoteVideoFrameProxy::newReadReference const):
        (WebKit::RemoteVideoFrameProxy::pixelBuffer const):
        (WebKit::RemoteVideoFrameProxy::write const): Deleted.
        (WebKit::RemoteVideoFrameProxy::read const): Deleted.
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::encodeFrame):
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        (WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getVideoFrameBuffer):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameWriter::write):

2022-02-26  Kimmo Kinnunen  <kkinnunen@apple.com>

        RemoteCaptureSampleManager, UserMediaSampleCaptureManagerProxy create the RemoteVideoFrame in incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=237134

        Reviewed by Youenn Fablet.

        UserMediaSampleCaptureManagerProxy should not call RemoteVideoFrameObjectHeap::createVideoFrame,
        the function should be removed. Instead, UserMediaSampleCaptureManagerProxy should construct a
        write reference to insert the media sample -> remote proxy mapping. Then
        the result of the insert, a new reference, should be sent as part of the
        RemoteVideoFrameProxy::Properties to the WP. This way the sent reference is
        constructed as expected. Previously the reference was correct but matched just
        by selecting the constants currently used (0).

        * UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.cpp:
        (WebKit::RemoteCaptureSampleManager::videoSampleAvailable):
        (WebKit::RemoteCaptureSampleManager::videoSampleAvailableCV):
        * WebProcess/cocoa/RemoteCaptureSampleManager.h:
        * WebProcess/cocoa/RemoteCaptureSampleManager.messages.in:

2022-02-26  Chris Dumez  <cdumez@apple.com>

        Drop Ref<>'s operator==() as it is a bit ambiguous / confusing
        https://bugs.webkit.org/show_bug.cgi?id=237231

        Reviewed by Darin Adler.

        Drop Ref<>'s operator==() as it is a bit ambiguous / confusing. Some people expect it to compare
        pointers while other expect it to compare the values we hold references to.
        It seems best to omit this operator and be explicit at call sites.

        * UIProcess/Cocoa/WebProcessProxyCocoa.mm:
        (WebKit::WebProcessProxy::cacheMediaMIMETypes):
        * UIProcess/VisitedLinkStore.cpp:
        (WebKit::VisitedLinkStore::removeAll):
        (WebKit::VisitedLinkStore::sendStoreHandleToProcess):
        (WebKit::VisitedLinkStore::didUpdateSharedStringHashes):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::shouldTerminate):

2022-02-26  Kimmo Kinnunen  <kkinnunen@apple.com>

        Multiple concurrency violations in LibWebRTCCodecsProxy
        https://bugs.webkit.org/show_bug.cgi?id=236767
        <rdar://88904160>

        Reviewed by Antti Koivisto.

        - ThreadMessageReceivers should not add IPC listeners in constructors,
        as the delivery starts right away and uses the unconstructed virtual pointer.
        - The work queue functions should not use GPUConnectionToWebProcess, as that is
        main thread object.
        - Locked m_encoders, m_decoders are sometimes accessed without lock.

        Instead:
        - Add the IPC listeners in initialize function.
        - Remove the IPC listeners when GPUConnectionToWebProcess disconnects.
        - Store the thread-safe conection, video frame object heap, process identity
        objects as member variables.
        - Do not lock m_encoders, m_decoders. If they are work queue instances,
        just access them in the work queue functions. Add thread requirements
        to the variables so that the compiler checks the access.
        - Use IPC testing assertions when skipping incorrect messages.
        - Use separate atomic counter (bool) to check if allowsExitUnderMemoryPressure.

        No new tests, tested with existing tests and ASAN.

        * GPUProcess/GPUConnectionToWebProcess.cpp:
        (WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess):
        (WebKit::GPUConnectionToWebProcess::didClose):
        * GPUProcess/GPUConnectionToWebProcess.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::LibWebRTCCodecsProxy::create):
        (WebKit::LibWebRTCCodecsProxy::LibWebRTCCodecsProxy):
        (WebKit::LibWebRTCCodecsProxy::stopListeningForIPC):
        (WebKit::LibWebRTCCodecsProxy::initialize):
        (WebKit::LibWebRTCCodecsProxy::dispatchToThread):
        (WebKit::LibWebRTCCodecsProxy::createDecoderCallback):
        (WebKit::LibWebRTCCodecsProxy::createH264Decoder):
        (WebKit::LibWebRTCCodecsProxy::createH265Decoder):
        (WebKit::LibWebRTCCodecsProxy::createVP9Decoder):
        (WebKit::LibWebRTCCodecsProxy::releaseDecoder):
        (WebKit::LibWebRTCCodecsProxy::createEncoder):
        (WebKit::LibWebRTCCodecsProxy::releaseEncoder):
        (WebKit::LibWebRTCCodecsProxy::initializeEncoder):
        (WebKit::LibWebRTCCodecsProxy::findEncoder):
        (WebKit::LibWebRTCCodecsProxy::encodeFrame):
        (WebKit::LibWebRTCCodecsProxy::setEncodeRates):
        (WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameSemaphore):
        (WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameMemory):
        (WebKit::LibWebRTCCodecsProxy::allowsExitUnderMemoryPressure const):

2022-02-25  Sihui Liu  <sihui_liu@apple.com>

        [macOS] TestWebKitAPI.WebKit.MigrateLocalStorageDataToGeneralStorageDirectory is a flaky failure
        https://bugs.webkit.org/show_bug.cgi?id=237065
        <rdar://problem/89324250>

        Reviewed by Alexey Proskuryakov.

        Commit transactions of SQLiteStorageArea at exit of network process.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::didClose):
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::commitTransactionsAtExit):
        (WebKit::SQLiteStorageArea::SQLiteStorageArea):
        (WebKit::SQLiteStorageArea::startTransactionIfNecessary):
        (WebKit::SQLiteStorageArea::commitTransactionIfNecessary):

2022-02-25  Wenson Hsieh  <wenson_hsieh@apple.com>

        Adjust -[WKContentView _requiresKeyboardWhenFirstResponder] to account for editable web views
        https://bugs.webkit.org/show_bug.cgi?id=237226
        rdar://89447095

        Reviewed by Aditya Keerthi.

        Adjust the implementation of `-[WKContentView _requiresKeyboardWhenFirstResponder]`, such that it returns YES
        for editable web views, except for the scenario where an input field that does *not* require the automatic
        keyboard is currently focused in the page inside the editable web view (e.g. a `readonly` text field).

        UIKit consults this method to know whether or not a given responder would require the keyboard (either software
        keyboard or the minimized UCB for hardware keyboard) if it were to become the first responder. For web views
        that are made editable in the SPI sense, we know a-priori that this should return YES, unless a readonly element
        underneath the web view has focus (in which case, `_disableAutomaticKeyboardUI` would be true).

        Test: KeyboardInputTests.EditableWebViewRequiresKeyboardWhenFirstResponder

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView _requiresKeyboardWhenFirstResponder]):

2022-02-25  Said Abou-Hallawa  <said@apple.com>

        [GPU Process] Implement RemoteImageBufferProxy::drawConsuming()
        https://bugs.webkit.org/show_bug.cgi?id=236685
        rdar://89007426

        Reviewed by Simon Fraser.

        RemoteImageBufferProxy::drawConsuming() should call drawImageBuffer() of
        the destination GraphicsContext. No recursion will happen and the expected
        behavior will be achieved by this change. 

        This is the sequence of calls when the Destination GraphicsContext is
        local and when it is remote:

        -- Destination GraphicsContext is local:
           In this case, the backend of the RemoteImageBufferProxy can be mapped
           in WebProcess; i.e. we do have access to its memory.
           ConcreteImageBuffer::draw() will be called eventually. This function
           will call its backend->draw() which will get a NativeImage by calling
           backend->copyNativeImage(). There is no difference between draw() and
           drawConsuming() in this case because the backend is still owned by
           GPUProcess. So it will not be released immediately. We do not copy the
           pixels since we have to pass DontCopyBackingStore to copyNativeImage().

        -- Destination GraphicsContext is remote:
           In this case, Recorder::drawImageBuffer() will be called which will
           call RemoteDisplayListRecorderProxy::recordDrawImageBuffer(). This
           will send a message to GPUProcess and hence all the drawing will 
           happen in GPUProcess. Similar to the case of the local GraphicsContext,
           no pixels will be copied from the RemoteImageBuffer backend to the
           NativeImage in all cases. The assumption is the backend will be destroyed
           automatically after calling drawConsuming().

        * WebProcess/GPU/graphics/RemoteImageBufferProxy.h:

2022-02-25  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Fallback to attestation=none whenever attestation fails
        https://bugs.webkit.org/show_bug.cgi?id=237223
        rdar://88767812

        Reviewed by Brent Fulgham.

        Whenever attestation is requested by a RP and it fails to complete,
        we previously errored out of the registration. The more correct platform
        behavior in this case is to provide attestation=none.

        Created API test for this behavior.

        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticator::continueMakeCredentialAfterAttested):

2022-02-25  Per Arne Vollan  <pvollan@apple.com>

        [macOS] Add access to required mach service in the Network process
        https://bugs.webkit.org/show_bug.cgi?id=237216
        <rdar://89176897>

        Reviewed by Brent Fulgham.

        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:

2022-02-25  Brent Fulgham  <bfulgham@apple.com>

        WebKit continues to render PDF images in Captive Portal mode
        https://bugs.webkit.org/show_bug.cgi?id=237120
        <rdar://problem/89384234>

        Reviewed by Chris Dumez.

        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeWebProcess): Turn PDF image decoding off when in CaptivePortal mode.

2022-02-25  Sihui Liu  <sihui_liu@apple.com>

        Regression(r242729): m_origin in IDBDatabaseIdentifier is incorrect
        https://bugs.webkit.org/show_bug.cgi?id=237044

        Reviewed by Youenn Fablet.

        * NetworkProcess/storage/IDBStorageManager.cpp:
        (WebKit::migrateOriginData):
        (WebKit::IDBStorageManager::idbStorageOriginDirectory):

2022-02-25  Per Arne Vollan  <pvollan@apple.com>

        Make sure there is a default Networking process to provide the Launch Services database
        https://bugs.webkit.org/show_bug.cgi?id=236629

        Reviewed by Brent Fulgham.

        The WebContent processes relies on getting the Launch Services database from the Networking process.
        It is possible to enter a state where there is no default Network process, but a Network process is
        running because a Website data store is holding a reference to it. This patch addresses this issue
        by removing Network process references in all remaining Website data stores when the last process
        pool is being deleted.

        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::~WebProcessPool):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::removeNetworkProcessReference):
        * UIProcess/WebsiteData/WebsiteDataStore.h:

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Better isolate RemoteVideoFrameObjectHeap clients from ThreadSafeObjectHeap implementation details
        https://bugs.webkit.org/show_bug.cgi?id=237191

        Reviewed by Kimmo Kinnunen.

        Refactoring to make RemoteVideoFrameObjectHeap API independent of ThreadSafeObjectHeap.
        This makes code more readable and simplifies client side usage as well,
        for instance by not having to care about timers, or using more known names like add/get instead of retire.

        No change of behavior.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteGraphicsContextGLCocoa.cpp:
        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * Shared/ThreadSafeObjectHeap.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:

2022-02-25  Per Arne Vollan  <pvollan@apple.com>

        Remove unused soft linking declarations
        https://bugs.webkit.org/show_bug.cgi?id=237209

        Reviewed by Brent Fulgham.

        * WebProcess/cocoa/WebProcessCocoa.mm:

2022-02-25  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION(r289580): [ iOS macOS ] TestWebKitAPI.IPCTestingAPI.CanReceiveSharedMemory is a constant timeout
        https://bugs.webkit.org/show_bug.cgi?id=236744

        Reviewed by Antti Koivisto.

        Add new tester interface for testing IPC stream features.

        Before, TestWebKitAPI.IPCTestingAPI.CanReceiveSharedMemory would test the feature of
        "can reply stream sync message with shared memory" by using a RemoteRenderingBackend
        message that did so. However, when the RemoteRenderingBackend was changed to use a
        different stategy, this test stopped working without compile failure. The IPC testing
        is currently done at JS level.

        After, the new dedicated testing interface IPCStreamTester has dedicated message for
        testing this feature. The test is moved to LayoutTests/ipc and made so that
        it tests the feature in all currently testable processes WP uses (GPU, Networking, UI).

        IPCTestingAPI is amended to return the all possible testable process names, so
        the .html test can work even when ENABLE(GPU_PROCESS) is toggled.

        The .html test also passes when !ENABLE(IPC_TESTING_API). Currently
        ENABLE_IPC_TESTING_API == (ASAN_ENABLED || !defined(NDEBUG)) && PLATFORM(COCOA)
        E.g. test tests something on Release+ASAN or Debug.

        Having the test in .html also makes it possible to run the test on iOS devices.

        * CMakeLists.txt:
        * DerivedSources-input.xcfilelist:
        * DerivedSources-output.xcfilelist:
        * DerivedSources.make:
        * Scripts/webkit/messages.py:
        (types_that_cannot_be_forward_declared):
        * Shared/IPCStreamTester.cpp: Added.
        (WebKit::IPCStreamTester::create):
        (WebKit::IPCStreamTester::IPCStreamTester):
        (WebKit::IPCStreamTester::initialize):
        (WebKit::IPCStreamTester::stopListeningForIPC):
        (WebKit::IPCStreamTester::syncMessageReturningSharedMemory1):
        * Shared/IPCStreamTester.h: Copied from Source/WebKit/Shared/IPCTester.h.
        * Shared/IPCStreamTester.messages.in: Copied from Source/WebKit/Shared/IPCTester.messages.in.
        * Shared/IPCStreamTesterIdentifier.h: Copied from Source/WebKit/Shared/IPCTester.h.
        * Shared/IPCStreamTesterProxy.messages.in: Copied from Source/WebKit/Shared/IPCTester.messages.in.
        * Shared/IPCTester.cpp:
        (WebKit::IPCTester::createStreamTester):
        (WebKit::IPCTester::releaseStreamTester):
        * Shared/IPCTester.h:
        * Shared/IPCTester.messages.in:
        * Shared/mac/MediaFormatReader/MediaFormatReader.cpp:
        * Sources.txt:
        * WebKit.xcodeproj/project.pbxproj:
        * WebProcess/WebPage/IPCTestingAPI.cpp:
        (WebKit::IPCTestingAPI::JSIPC::staticValues):
        (WebKit::IPCTestingAPI::processTargetFromArgument):
        (WebKit::IPCTestingAPI::JSIPC::processTargets):

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Optimize black frame sending in MediaRecorderPrivate
        https://bugs.webkit.org/show_bug.cgi?id=237027

        Reviewed by Kimmo Kinnunen.

        Add support for sending black frames through SharedVideoFrame.
        In that case, we only send width and height and we reconstruct a black frame on receiver side.
        Make use of SharedVideoFrame in RemoteMediaRecorder.
        Set ownership in SharedVideoFrame to the corresponding WebProcess.

        Covered by existing tests, in particular http/wpt/mediarecorder/mute-tracks.html.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.h:
        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteMediaRecorder.h:
        * GPUProcess/webrtc/RemoteMediaRecorder.messages.in:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        * WebProcess/GPU/webrtc/MediaRecorderPrivate.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Remove dead code in GPUProcessConnection::dispatchMessage
        https://bugs.webkit.org/show_bug.cgi?id=237135

        Reviewed by Kimmo Kinnunen.

        No change of behavior.

        * WebProcess/GPU/GPUProcessConnection.cpp:
        (WebKit::GPUProcessConnection::dispatchMessage):

2022-02-25  Youenn Fablet  <youenn@apple.com>

        Make RemoteVideoFrameIdentifier a regular ObjectIdentifier
        https://bugs.webkit.org/show_bug.cgi?id=237136

        Reviewed by Kimmo Kinnunen.

        Given all RemoteVideoFrames are created in GPUProcess, we no longer need to use a ProcessQualified identifier.
        Covered by existing tests.

        * WebProcess/GPU/media/RemoteVideoFrameIdentifier.h:

2022-02-24  Alex Christensen  <achristensen@webkit.org>

        Unreviewed, reverting r290371.

        Caused assertion

        Reverted changeset:

        "Call WKNavigationDelegate.didFailProvisionalNavigation even
        after a cross-origin navigation with COOP"
        https://bugs.webkit.org/show_bug.cgi?id=237071
        https://commits.webkit.org/r290371

2022-02-24  Gavin Phillips  <gavin.p@apple.com>

        Port CaptivePortalMode preferences to AnyHost in order to support CFPrefs Direct Mode propagation
        https://bugs.webkit.org/show_bug.cgi?id=237098

        Reviewed by Brent Fulgham.

        Move our CaptivePortalMode preference to AnyHost in order to correctly support
        CFPrefs Direct Mode propagation. We also now dispatch a CFNotification to ensure our preference
        observer is always notified of the change.

        * UIProcess/Cocoa/PreferenceObserver.mm:
        (-[WKUserDefaults findPreferenceChangesAndNotifyForKeys:toValuesForKeys:]):

        * Shared/Cocoa/AuxiliaryProcessCocoa.mm:
        (WebKit::AuxiliaryProcess::setPreferenceValue):
        * UIProcess/API/Cocoa/_WKSystemPreferences.mm:
        (+[_WKSystemPreferences isCaptivePortalModeEnabled]):
        (+[_WKSystemPreferences setCaptivePortalModeEnabled:]):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::captivePortalModeConfigUpdateCallback):
        (WebKit::WebProcessPool::registerNotificationObservers):
        (WebKit::WebProcessPool::unregisterNotificationObservers):
        * UIProcess/WebProcessPool.h:

2022-02-24  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Add support for replacing WKFoundTextRanges
        https://bugs.webkit.org/show_bug.cgi?id=237151
        rdar://89258687

        Reviewed by Wenson Hsieh.

        Implement protocol methods to support replacement.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::replaceFoundTextRangeWithString):
        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView replaceFoundTextInRange:inDocument:withText:]):
        (-[WKContentView supportsTextReplacement]):

        Restrict replacement to editable web views.

        * WebProcess/WebPage/WebFoundTextRangeController.cpp:
        (WebKit::WebFoundTextRangeController::replaceFoundTextRangeWithString):

        Use a `TemporarySelectionChange` to select and replace the desired range.

        * WebProcess/WebPage/WebFoundTextRangeController.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::replaceFoundTextRangeWithString):
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2022-02-24  Chris Dumez  <cdumez@apple.com>

        Take down shared worker context connection less aggressively when it becomes idle
        https://bugs.webkit.org/show_bug.cgi?id=237156

        Reviewed by Darin Adler.

        Take down shared worker context connection less aggressively when it becomes idle. Give it 5
        seconds before shutting it down in case it ends up being used again in the near future.

        This is similar to what we do for service workers.

        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        (WebKit::WebSharedWorkerServer::shutDownSharedWorker):
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.cpp:
        (WebKit::WebSharedWorkerServerToContextConnection::WebSharedWorkerServerToContextConnection):
        (WebKit::WebSharedWorkerServerToContextConnection::addSharedWorkerObject):
        (WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject):
        (WebKit::WebSharedWorkerServerToContextConnection::idleTerminationTimerFired):
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.h:

2022-02-24  Jer Noble  <jer.noble@apple.com>

        [Refactor] Adopt LoggerHelper in Legacy EME classes
        https://bugs.webkit.org/show_bug.cgi?id=234319

        Reviewed by Eric Carlson.

        * GPUProcess/media/RemoteCDMFactoryProxy.cpp:
        (WebKit::RemoteCDMFactoryProxy::createCDM):
        (WebKit::RemoteCDMFactoryProxy::logger const):
        * GPUProcess/media/RemoteCDMFactoryProxy.h:
        * GPUProcess/media/RemoteCDMInstanceProxy.cpp:
        (WebKit::RemoteCDMInstanceProxy::create):
        (WebKit::RemoteCDMInstanceProxy::RemoteCDMInstanceProxy):
        (WebKit::RemoteCDMInstanceProxy::createSession):
        * GPUProcess/media/RemoteCDMInstanceProxy.h:
        * GPUProcess/media/RemoteCDMInstanceProxy.messages.in:
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.cpp:
        (WebKit::RemoteCDMInstanceSessionProxy::create):
        (WebKit::RemoteCDMInstanceSessionProxy::RemoteCDMInstanceSessionProxy):
        (WebKit::RemoteCDMInstanceSessionProxy::setLogIdentifier):
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.h:
        * GPUProcess/media/RemoteCDMInstanceSessionProxy.messages.in:
        * GPUProcess/media/RemoteCDMProxy.cpp:
        (WebKit::RemoteCDMProxy::create):
        (WebKit::RemoteCDMProxy::RemoteCDMProxy):
        (WebKit::RemoteCDMProxy::setLogIdentifier):
        * GPUProcess/media/RemoteCDMProxy.h:
        (WebKit::RemoteCDMProxy::logger const):
        (WebKit::RemoteCDMProxy::logIdentifier const):
        * GPUProcess/media/RemoteCDMProxy.messages.in:
        * GPUProcess/media/RemoteLegacyCDMFactoryProxy.cpp:
        (WebKit::RemoteLegacyCDMFactoryProxy::logger const):
        * GPUProcess/media/RemoteLegacyCDMFactoryProxy.h:
        * GPUProcess/media/RemoteLegacyCDMProxy.cpp:
        (WebKit::RemoteLegacyCDMProxy::createSession):
        * GPUProcess/media/RemoteLegacyCDMProxy.h:
        * GPUProcess/media/RemoteLegacyCDMProxy.messages.in:
        * GPUProcess/media/RemoteLegacyCDMSessionProxy.cpp:
        (WebKit::RemoteLegacyCDMSessionProxy::create):
        (WebKit::RemoteLegacyCDMSessionProxy::RemoteLegacyCDMSessionProxy):
        * GPUProcess/media/RemoteLegacyCDMSessionProxy.h:
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.cpp:
        (WebKit::MediaPlayerPrivateRemote::createSession):
        * WebProcess/GPU/media/MediaPlayerPrivateRemote.h:
        * WebProcess/GPU/media/RemoteCDM.cpp:
        (WebKit::RemoteCDM::setLogIdentifier):
        * WebProcess/GPU/media/RemoteCDM.h:
        * WebProcess/GPU/media/RemoteCDMConfiguration.h:
        (WebKit::RemoteCDMConfiguration::encode const):
        (WebKit::RemoteCDMConfiguration::decode):
        * WebProcess/GPU/media/RemoteCDMFactory.cpp:
        (WebKit::RemoteCDMFactory::createCDM):
        * WebProcess/GPU/media/RemoteCDMFactory.h:
        * WebProcess/GPU/media/RemoteCDMInstance.cpp:
        (WebKit::RemoteCDMInstance::createSession):
        * WebProcess/GPU/media/RemoteCDMInstanceSession.cpp:
        (WebKit::RemoteCDMInstanceSession::setLogIdentifier):
        * WebProcess/GPU/media/RemoteCDMInstanceSession.h:
        * WebProcess/GPU/media/RemoteLegacyCDM.cpp:
        (WebKit::RemoteLegacyCDM::createSession):
        * WebProcess/GPU/media/RemoteLegacyCDM.h:
        * WebProcess/GPU/media/RemoteLegacyCDMSession.cpp:
        (WebKit::RemoteLegacyCDMSession::create):
        (WebKit::RemoteLegacyCDMSession::RemoteLegacyCDMSession):
        * WebProcess/GPU/media/RemoteLegacyCDMSession.h:

2022-02-24  Sihui Liu  <sihui_liu@apple.com>

        Delete SessionStorageQuotaManager
        https://bugs.webkit.org/show_bug.cgi?id=237132

        Reviewed by Chris Dumez.

        The code is unused since r289474.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::addWebsiteDataStore):
        (WebKit::NetworkProcess::addSessionStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::removeSessionStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::setSessionStorageQuotaManagerIDBRootPath): Deleted.
        (WebKit::NetworkProcess::storageQuotaManager): Deleted.
        * NetworkProcess/NetworkProcess.h:
        (WebKit::NetworkProcess::SessionStorageQuotaManager::SessionStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::defaultQuota const): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::ensureOriginStorageQuotaManager): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::existingStorageQuotaManagers): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::cacheRootPath const): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::setIDBRootPath): Deleted.
        (WebKit::NetworkProcess::SessionStorageQuotaManager::idbRootPath const): Deleted.

2022-02-24  Devin Rousso  <drousso@apple.com>

        REGRESSION(r290436): fix build failures
        https://bugs.webkit.org/show_bug.cgi?id=237149

        Reviewed by Tim Horton.

        * Platform/cocoa/PaymentAuthorizationPresenter.mm:
        (WebKit::toNSError):
        * Platform/cocoa/WKPaymentAuthorizationDelegate.mm:
        (-[WKPaymentAuthorizationDelegate _willFinishWithError:]):
        * Shared/ApplePay/cocoa/WebPaymentCoordinatorProxyCocoa.mm:
        (WebKit::toPKContactFields):
        * Shared/ApplePay/mac/WebPaymentCoordinatorProxyMac.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments):
        (WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI):
        Replace `PAL::get_PassKitCore_*()` with `#define` declared in `<pal/cocoa/PassKitSoftLink.h>`.

2022-02-24  Wenson Hsieh  <wenson_hsieh@apple.com>

        Refactor logic for showing "Markup Image" and Quick Note items in the callout bar
        https://bugs.webkit.org/show_bug.cgi?id=237127
        rdar://89396617

        Reviewed by Megan Gardner.

        Use `-buildMenuWithBuilder:` to supply additional Quick Note and image analysis items, instead of adding them
        directly to the shared menu controller. See below for more details.

        Tests:  ImageAnalysisTests.MenuControllerItems
                WebKit.AppHighlightsInImageOverlays

        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView didMoveToWindow]):

        See below.

        (-[WKWebView buildMenuWithBuilder:]):

        Override this method and call into the content view via `-buildMenuForWebViewWithBuilder:` to populate the given
        builder with either Quick Note or "Markup Image" items, if necessary. Note that overriding this method on
        WKWebView is sufficient, since UIKit walks up the responder hierarchy starting from the first responder
        (WKContentView) when populating menu items.

        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView targetForAction:withSender:]):

        Move some logic for conditionally enabling the Quick Note items into `-imageAnalysisMarkupMenu`.

        (-[WKContentView imageAnalysisMarkupMenu]):
        (-[WKContentView _selectionChanged]):

        Remove logic that updates the shared UIMenuController's menu items every time the selection changes. This is
        no longer needed, since UIKit will always call into `-buildMenuWithBuilder:` when presenting the callout bar,
        which allows us to lazily run logic to determine whether or not we should show the Quick Note and image analysis
        items when the callout bar is shown, instead of keeping the menu controller's `-menuItems` array up to date upon
        each selection change.

        (-[WKContentView buildMenuForWebViewWithBuilder:]):

        Consult `-appHighlightMenu` and `-imageAnalysisMarkupMenu` to populate the menu with inline UIMenus. Note that
        these menus' items are always inlined into the callout bar as top-level items, since we explicitly specify
        `UIMenuOptionsDisplayInline` when creating the menu.

        (-[WKContentView menuWithInlineAction:identifier:handler:]):
        (-[WKContentView appHighlightMenu]):

        Refactor this, and `-imageAnalysisMarkupMenu` above to return a UIMenu with a single UIAction presented inline.

        (-[WKContentView updateImageAnalysisMarkupMenuItems:]): Deleted.

        Replaced with `-imageAnalysisMarkupMenu`.

        (-[WKContentView canPerformImageAnalysisMarkup]): Deleted.
        (-[WKContentView performImageAnalysisMarkup:]): Deleted.
        (-[WKContentView setUpAdditionalMenuControllerActions]): Deleted.
        (findMenuItemWithAction): Deleted.
        (-[WKContentView updateAppHighlightMenuItems:]): Deleted.

        Replaced with `-appHighlightMenu`.

        (-[WKContentView createHighlightForCurrentQuickNoteWithRange:]): Deleted.
        (-[WKContentView createHighlightForNewQuickNoteWithRange:]): Deleted.

2022-02-24  Chris Dumez  <cdumez@apple.com>

        Regression(r273929) FrameState no longer gets a move constructor
        https://bugs.webkit.org/show_bug.cgi?id=237142

        Reviewed by Darin Adler.

        FrameState no longer gets an implicit move constructor since r273929 because a custom
        destructor was added.

        * Shared/SessionState.h:

2022-02-24  Kate Cheney  <katherine_cheney@apple.com>

        Update CSP console logging
        https://bugs.webkit.org/show_bug.cgi?id=232216
        <rdar://problem/89322580>

        Reviewed by Brent Fulgham.

        * NetworkProcess/NetworkLoadChecker.cpp:
        (WebKit::NetworkLoadChecker::check):
        (WebKit::NetworkLoadChecker::checkRedirection):
        (WebKit::NetworkLoadChecker::checkRequest):
        (WebKit::NetworkLoadChecker::isAllowedByContentSecurityPolicy):
        * NetworkProcess/NetworkLoadChecker.h:

2022-02-24  Devin Rousso  <drousso@apple.com>

        [MacCatalyst] REGRESSION(r290091): sometimes can crash if `WKWebView` is deallocated before the next visible content rect update
        https://bugs.webkit.org/show_bug.cgi?id=237126
        <rdar://problem/89345853>

        Reviewed by Tim Horton.

        Tests: WKWebViewResize.DoesNotAssertInDeallocAfterChangingFrame
               WKWebViewResize.DoesNotAssertInDeallocAfterChangingBounds

        * UIProcess/API/ios/WKWebViewIOS.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _acquireResizeAssertionForReason:]):
        (-[WKWebView _invalidateResizeAssertions]): Added.
        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView dealloc]):
        Make sure to `-invalidate` any remaining assertions in `-dealloc` as required by `_UIInvalidatable`.

2022-02-24  Devin Rousso  <drousso@apple.com>

        [Apple Pay] switch from `PassKit/*` to `PassKit[Core,UI]/*`
        https://bugs.webkit.org/show_bug.cgi?id=237091
        <rdar://problem/81085862>

        Reviewed by Tim Horton.

        * Platform/cocoa/PaymentAuthorizationPresenter.mm:
        (WebKit::toNSError):
        * Platform/cocoa/WKPaymentAuthorizationDelegate.mm:
        (-[WKPaymentAuthorizationDelegate _willFinishWithError:]):
        * Shared/ApplePay/cocoa/WebPaymentCoordinatorProxyCocoa.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard):
        (WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup):
        (WebKit::toPKContactFields):
        * Shared/ApplePay/mac/WebPaymentCoordinatorProxyMac.mm:
        (WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments):
        (WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI):
        * WebProcess/ApplePay/cocoa/WebPaymentCoordinatorCocoa.mm:
        (WebKit::WebPaymentCoordinator::platformAvailablePaymentNetworks):

2022-02-24  Kimmo Kinnunen  <kkinnunen@apple.com>

        LibWebRTCCodecs, -Proxy create and communicate the RemoteVideoFrameProxy incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=237083

        Reviewed by Youenn Fablet.
        LibWebRTCCodecsProxy should not call RemoteVideoFrameObjectHeap::createVideoFrame,
        the function should be removed. Instead, LibWebRTCCodecsProxy should construct a
        write reference to insert the media sample -> remote proxy mapping. Then
        the result of the insert, a new reference, should be sent as part of the
        RemoteVideoFrameProxy::Properties to the WP. This way the sent reference is
        constructed as expected. Previously the reference was correct but matched just
        by selecting the constants currently used (0). This works towards being able
        to remove RemoteVideoFrameObjectHeap::createVideoFrame.

        Split the completedDecoding to two:
        - completedDecoding used to send new RemoteVideoFrames
        - completedDecodingCV to send CoreVideo specific RemoteVideoSample instances (which will
          removed eventually).

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        (WebKit::Function<void):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::completedDecoding):
        (WebKit::LibWebRTCCodecs::completedDecodingCV):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.messages.in:

2022-02-24  Kimmo Kinnunen  <kkinnunen@apple.com>

        Thread safety analysis to assert "code is run sequentially" is not useful when code is mainly run with WorkQueues
        https://bugs.webkit.org/show_bug.cgi?id=236832

        Reviewed by Antti Koivisto.

        Assert directly that the work queues are current instead of using ThreadAssertion.

        * GPUProcess/graphics/RemoteGraphicsContextGL.cpp:
        (WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL):
        (WebKit::RemoteGraphicsContextGL::displayWasReconfigured):
        (WebKit::RemoteGraphicsContextGL::workQueueInitialize):
        (WebKit::RemoteGraphicsContextGL::workQueueUninitialize):
        (WebKit::RemoteGraphicsContextGL::didComposite):
        (WebKit::RemoteGraphicsContextGL::forceContextLost):
        (WebKit::RemoteGraphicsContextGL::dispatchContextChangedNotification):
        (WebKit::RemoteGraphicsContextGL::reshape):
        (WebKit::RemoteGraphicsContextGL::prepareForDisplay):
        (WebKit::RemoteGraphicsContextGL::synthesizeGLError):
        (WebKit::RemoteGraphicsContextGL::getError):
        (WebKit::RemoteGraphicsContextGL::ensureExtensionEnabled):
        (WebKit::RemoteGraphicsContextGL::markContextChanged):
        (WebKit::RemoteGraphicsContextGL::paintRenderingResultsToCanvasWithQualifiedIdentifier):
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToCanvasWithQualifiedIdentifier):
        (WebKit::RemoteGraphicsContextGL::paintCompositedResultsToMediaSample):
        (WebKit::RemoteGraphicsContextGL::paintPixelBufferToImageBuffer):
        (WebKit::RemoteGraphicsContextGL::simulateEventForTesting):
        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        (WebKit::RemoteGraphicsContextGL::workQueue const):
        * GPUProcess/graphics/RemoteGraphicsContextGL.messages.in:
        * GPUProcess/graphics/RemoteGraphicsContextGLCocoa.cpp:
        (WebKit::RemoteGraphicsContextGL::copyTextureFromVideoFrame):
        (WebKit::RemoteGraphicsContextGLCocoa::platformWorkQueueInitialize):
        (WebKit::RemoteGraphicsContextGLCocoa::prepareForDisplay):
        * GPUProcess/graphics/RemoteGraphicsContextGLFunctionsGenerated.h:
        (moveErrorsToSyntheticErrorList):
        (activeTexture):
        (attachShader):
        (bindAttribLocation):
        (bindBuffer):
        (bindFramebuffer):
        (bindRenderbuffer):
        (bindTexture):
        (blendColor):
        (blendEquation):
        (blendEquationSeparate):
        (blendFunc):
        (blendFuncSeparate):
        (checkFramebufferStatus):
        (clear):
        (clearColor):
        (clearDepth):
        (clearStencil):
        (colorMask):
        (compileShader):
        (copyTexImage2D):
        (copyTexSubImage2D):
        (createBuffer):
        (createFramebuffer):
        (createProgram):
        (createRenderbuffer):
        (createShader):
        (createTexture):
        (cullFace):
        (deleteBuffer):
        (deleteFramebuffer):
        (deleteProgram):
        (deleteRenderbuffer):
        (deleteShader):
        (deleteTexture):
        (depthFunc):
        (depthMask):
        (depthRange):
        (detachShader):
        (disable):
        (disableVertexAttribArray):
        (drawArrays):
        (drawElements):
        (enable):
        (enableVertexAttribArray):
        (finish):
        (flush):
        (framebufferRenderbuffer):
        (framebufferTexture2D):
        (frontFace):
        (generateMipmap):
        (getActiveAttrib):
        (getActiveUniform):
        (getAttribLocation):
        (getBufferParameteri):
        (getString):
        (getFloatv):
        (getIntegerv):
        (getInteger64):
        (getInteger64i):
        (getProgrami):
        (getBooleanv):
        (getFramebufferAttachmentParameteri):
        (getProgramInfoLog):
        (getRenderbufferParameteri):
        (getShaderi):
        (getShaderInfoLog):
        (getShaderPrecisionFormat):
        (getShaderSource):
        (getTexParameterf):
        (getTexParameteri):
        (getUniformfv):
        (getUniformiv):
        (getUniformuiv):
        (getUniformLocation):
        (getVertexAttribOffset):
        (hint):
        (isBuffer):
        (isEnabled):
        (isFramebuffer):
        (isProgram):
        (isRenderbuffer):
        (isShader):
        (isTexture):
        (lineWidth):
        (linkProgram):
        (pixelStorei):
        (polygonOffset):
        (renderbufferStorage):
        (sampleCoverage):
        (scissor):
        (shaderSource):
        (stencilFunc):
        (stencilFuncSeparate):
        (stencilMask):
        (stencilMaskSeparate):
        (stencilOp):
        (stencilOpSeparate):
        (texParameterf):
        (texParameteri):
        (uniform1f):
        (uniform1fv):
        (uniform1i):
        (uniform1iv):
        (uniform2f):
        (uniform2fv):
        (uniform2i):
        (uniform2iv):
        (uniform3f):
        (uniform3fv):
        (uniform3i):
        (uniform3iv):
        (uniform4f):
        (uniform4fv):
        (uniform4i):
        (uniform4iv):
        (uniformMatrix2fv):
        (uniformMatrix3fv):
        (uniformMatrix4fv):
        (useProgram):
        (validateProgram):
        (vertexAttrib1f):
        (vertexAttrib1fv):
        (vertexAttrib2f):
        (vertexAttrib2fv):
        (vertexAttrib3f):
        (vertexAttrib3fv):
        (vertexAttrib4f):
        (vertexAttrib4fv):
        (vertexAttribPointer):
        (viewport):
        (bufferData0):
        (bufferData1):
        (bufferSubData):
        (readnPixels0):
        (readnPixels1):
        (texImage2D0):
        (texImage2D1):
        (texSubImage2D0):
        (texSubImage2D1):
        (compressedTexImage2D0):
        (compressedTexImage2D1):
        (compressedTexSubImage2D0):
        (compressedTexSubImage2D1):
        (drawArraysInstanced):
        (drawElementsInstanced):
        (vertexAttribDivisor):
        (createVertexArray):
        (deleteVertexArray):
        (isVertexArray):
        (bindVertexArray):
        (copyBufferSubData):
        (getBufferSubData):
        (blitFramebuffer):
        (framebufferTextureLayer):
        (invalidateFramebuffer):
        (invalidateSubFramebuffer):
        (readBuffer):
        (renderbufferStorageMultisample):
        (texStorage2D):
        (texStorage3D):
        (texImage3D0):
        (texImage3D1):
        (texSubImage3D0):
        (texSubImage3D1):
        (copyTexSubImage3D):
        (compressedTexImage3D0):
        (compressedTexImage3D1):
        (compressedTexSubImage3D0):
        (compressedTexSubImage3D1):
        (getFragDataLocation):
        (uniform1ui):
        (uniform2ui):
        (uniform3ui):
        (uniform4ui):
        (uniform1uiv):
        (uniform2uiv):
        (uniform3uiv):
        (uniform4uiv):
        (uniformMatrix2x3fv):
        (uniformMatrix3x2fv):
        (uniformMatrix2x4fv):
        (uniformMatrix4x2fv):
        (uniformMatrix3x4fv):
        (uniformMatrix4x3fv):
        (vertexAttribI4i):
        (vertexAttribI4iv):
        (vertexAttribI4ui):
        (vertexAttribI4uiv):
        (vertexAttribIPointer):
        (drawRangeElements):
        (drawBuffers):
        (clearBufferiv):
        (clearBufferuiv):
        (clearBufferfv):
        (clearBufferfi):
        (createQuery):
        (deleteQuery):
        (isQuery):
        (beginQuery):
        (endQuery):
        (getQuery):
        (getQueryObjectui):
        (createSampler):
        (deleteSampler):
        (isSampler):
        (bindSampler):
        (samplerParameteri):
        (samplerParameterf):
        (getSamplerParameterf):
        (getSamplerParameteri):
        (fenceSync):
        (isSync):
        (deleteSync):
        (clientWaitSync):
        (waitSync):
        (getSynci):
        (createTransformFeedback):
        (deleteTransformFeedback):
        (isTransformFeedback):
        (bindTransformFeedback):
        (beginTransformFeedback):
        (endTransformFeedback):
        (transformFeedbackVaryings):
        (getTransformFeedbackVarying):
        (pauseTransformFeedback):
        (resumeTransformFeedback):
        (bindBufferBase):
        (bindBufferRange):
        (getUniformIndices):
        (getActiveUniforms):
        (getUniformBlockIndex):
        (getActiveUniformBlockName):
        (uniformBlockBinding):
        (getActiveUniformBlockiv):
        (getGraphicsResetStatusARB):
        (getTranslatedShaderSourceANGLE):
        (drawBuffersEXT):
        (getInternalformativ):
        (multiDrawArraysANGLE):
        (multiDrawArraysInstancedANGLE):
        (multiDrawElementsANGLE):
        (multiDrawElementsInstancedANGLE):
        (paintRenderingResultsToPixelBuffer):
        * GPUProcess/graphics/WebGPU/RemoteGPU.cpp:
        (WebKit::RemoteGPU::RemoteGPU):
        (WebKit::RemoteGPU::initialize):
        (WebKit::RemoteGPU::stopListeningForIPC):
        (WebKit::RemoteGPU::workQueueInitialize):
        (WebKit::RemoteGPU::workQueueUninitialize):
        (WebKit::RemoteGPU::requestAdapter):
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap):
        (WebKit::RemoteVideoFrameObjectHeap::stopListeningForIPC):
        (WebKit::RemoteVideoFrameObjectHeap::releaseVideoFrame):
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * Platform/IPC/StreamConnectionWorkQueue.cpp:
        (IPC::StreamConnectionWorkQueue::assertIsCurrent const):
        * Platform/IPC/StreamConnectionWorkQueue.h:
        (IPC::WTF_ASSERTS_ACQUIRED_CAPABILITY):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        REGRESSION(r290175): Texture upload from video and user media is slower than expected for non-GPUP WebGL
        https://bugs.webkit.org/show_bug.cgi?id=237034

        Reviewed by Youenn Fablet.

        Add back the code-path to obtain the IOSurface backed CVPixelBuffers directly
        via IPC transfer. This is used on macOS where WebGL is in WP.

        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::pixelBuffer):
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.messages.in:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.cpp:
        (WebKit::RemoteVideoFrameProxy::pixelBuffer const):
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:

2022-02-23  Don Olmstead  <don.olmstead@sony.com>

        Fix !ENABLE(SERVICE_WORKER) build after r290387
        https://bugs.webkit.org/show_bug.cgi?id=237119

        Unreviewed build fix.

        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess):

2022-02-23  Maxim Cournoyer  <maxim.cournoyer@gmail.com>

        [WPE][GTK] Paths should be canonicalized before calling bwrap
        https://bugs.webkit.org/show_bug.cgi?id=211131

        Reviewed by Michael Catanzaro.

        * UIProcess/Launcher/glib/BubblewrapLauncher.cpp:
        (WebKit::bindSymlinksRealPath): Relocate earlier in file,
        add a 'bindOption' argument and use FileSystem::realPath instead
        of realpath from the standard C library.
        (WebKit::bindIfExists): Use the modified above procedure to
        canonicalize the source path, and avoid adding bind mounts for
        locations under /etc.

2022-02-23  Liliana Marie Prikler <liliana.prikler@gmail.com>

        Bubblewrap launcher doesn't bind font locations from XDG_DATA_DIRS
        https://bugs.webkit.org/show_bug.cgi?id=237089

        Reviewed by Michael Catanzaro.

        * UIProcess/Launcher/glib/BubblewrapLauncher.cpp:
        (WebKit::bindFonts): Expose font directories present in the
        XDG_DATA_DIRS environment variable.

2022-02-23  Chris Dumez  <cdumez@apple.com>

        Adopt more widely the new URL constructor that takes in a String
        https://bugs.webkit.org/show_bug.cgi?id=237099

        Reviewed by Darin Adler.

        * NetworkProcess/Classifier/ResourceLoadStatisticsStore.h:
        * NetworkProcess/cocoa/NetworkSessionCocoa.mm:
        (-[WKNetworkSessionDelegate URLSession:task:didReceiveChallenge:completionHandler:]):
        * Shared/API/APISecurityOrigin.h:
        (API::SecurityOrigin::createFromString):
        * Shared/API/APIURL.h:
        (API::URL::parseURLIfNecessary const):
        * Shared/API/c/WKURLRequest.cpp:
        (WKURLRequestCreateWithWKURL):
        * Shared/API/glib/WebKitURIRequest.cpp:
        (webkit_uri_request_set_uri):
        * Shared/APIWebArchiveResource.mm:
        (API::WebArchiveResource::WebArchiveResource):
        * Shared/ApplePay/WebPaymentCoordinatorProxy.cpp:
        (WebKit::WebPaymentCoordinatorProxy::showPaymentUI):
        * Shared/curl/WebCoreArgumentCodersCurl.cpp:
        (IPC::ArgumentCoder<ResourceError>::decodePlatformData):
        * Shared/gtk/ArgumentCodersGtk.cpp:
        (IPC::ArgumentCoder<SelectionData>::decode):
        * Shared/soup/WebCoreArgumentCodersSoup.cpp:
        (IPC::ArgumentCoder<ResourceError>::decodePlatformData):
        * UIProcess/API/C/WKOpenPanelResultListener.cpp:
        (filePathsFromFileURLs):
        * UIProcess/API/C/WKPage.cpp:
        (WKPageLoadURL):
        (WKPageLoadURLWithShouldOpenExternalURLsPolicy):
        (WKPageLoadURLWithUserData):
        (WKPageLoadAlternateHTMLStringWithUserData):
        (WKPageSetPrivateClickMeasurementTokenPublicKeyURLForTesting):
        (WKPageSetPrivateClickMeasurementTokenSignatureURLForTesting):
        (WKPageSetPrivateClickMeasurementAttributionReportURLsForTesting):
        * UIProcess/API/C/WKPageGroup.cpp:
        (WKPageGroupAddUserStyleSheet):
        (WKPageGroupAddUserScript):
        * UIProcess/API/C/WKWebsiteDataStoreRef.cpp:
        (WKWebsiteDataStoreSetResourceLoadStatisticsPrevalentResourceForDebugMode):
        (WKWebsiteDataStoreSetStatisticsLastSeen):
        (WKWebsiteDataStoreSetStatisticsMergeStatistic):
        (WKWebsiteDataStoreSetStatisticsExpiredStatistic):
        (WKWebsiteDataStoreSetStatisticsPrevalentResource):
        (WKWebsiteDataStoreSetStatisticsVeryPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsVeryPrevalentResource):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsSubresourceUnder):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsSubFrameUnder):
        (WKWebsiteDataStoreIsStatisticsRegisteredAsRedirectingTo):
        (WKWebsiteDataStoreSetStatisticsHasHadUserInteraction):
        (WKWebsiteDataStoreIsStatisticsHasHadUserInteraction):
        (WKWebsiteDataStoreIsStatisticsOnlyInDatabaseOnce):
        (WKWebsiteDataStoreSetStatisticsGrandfathered):
        (WKWebsiteDataStoreIsStatisticsGrandfathered):
        (WKWebsiteDataStoreSetStatisticsSubframeUnderTopFrameOrigin):
        (WKWebsiteDataStoreSetStatisticsSubresourceUnderTopFrameOrigin):
        (WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectTo):
        (WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectFrom):
        (WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectTo):
        (WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectFrom):
        (WKWebsiteDataStoreSetStatisticsCrossSiteLoadWithLinkDecoration):
        (WKWebsiteDataStoreStatisticsDeleteCookiesForTesting):
        (WKWebsiteDataStoreStatisticsHasLocalStorage):
        (WKWebsiteDataStoreStatisticsHasIsolatedSession):
        (WKWebsiteDataStoreSetResourceLoadStatisticsToSameSiteStrictCookiesForTesting):
        (WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting):
        (WKWebsiteDataStoreSetResourceLoadStatisticsThirdPartyCNAMEDomainForTesting):
        (WKWebsiteDataStoreSetAppBoundDomainsForTesting):
        * UIProcess/API/C/curl/WKWebsiteDataStoreRefCurl.cpp:
        (WKWebsiteDataStoreEnableCustomNetworkProxySettings):
        * UIProcess/API/Cocoa/WKWebsiteDataStore.mm:
        * UIProcess/API/glib/WebKitCookieManager.cpp:
        (webkit_cookie_manager_get_cookies):
        * UIProcess/API/glib/WebKitSecurityOrigin.cpp:
        (webkit_security_origin_new_for_uri):
        * UIProcess/API/glib/WebKitWebView.cpp:
        (webkit_web_view_load_alternate_html):
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView _uiEventAttribution]):
        * UIProcess/Automation/WebAutomationSession.cpp:
        (WebKit::WebAutomationSession::navigateBrowsingContext):
        (WebKit::WebAutomationSession::addSingleCookie):
        (WebKit::WebAutomationSession::deleteAllCookies):
        * UIProcess/Cocoa/LegacyDownloadClient.mm:
        (WebKit::LegacyDownloadClient::legacyDidStart):
        * UIProcess/Cocoa/NavigationState.mm:
        (WebKit::NavigationState::NavigationClient::willPerformClientRedirect):
        (WebKit::NavigationState::NavigationClient::didPerformClientRedirect):
        * UIProcess/Cocoa/WKReloadFrameErrorRecoveryAttempter.mm:
        (-[WKReloadFrameErrorRecoveryAttempter attemptRecovery]):
        * UIProcess/Cocoa/WebProcessPoolCocoa.mm:
        (WebKit::WebProcessPool::isURLKnownHSTSHost const):
        * UIProcess/Inspector/RemoteWebInspectorUIProxy.cpp:
        (WebKit::RemoteWebInspectorUIProxy::load):
        * UIProcess/Inspector/WebInspectorUIProxy.cpp:
        (WebKit::WebInspectorUIProxy::isMainOrTestInspectorPage):
        (WebKit::WebInspectorUIProxy::openLocalInspectorFrontend):
        * UIProcess/Inspector/gtk/RemoteWebInspectorUIProxyGtk.cpp:
        (WebKit::RemoteWebInspectorUIProxy::platformSave):
        * UIProcess/Inspector/gtk/WebInspectorUIProxyGtk.cpp:
        (WebKit::WebInspectorUIProxy::platformSave):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::launchProcessForReload):
        (WebKit::WebPageProxy::loadFile):
        (WebKit::WebPageProxy::navigateToPDFLinkWithSimulatedClick):
        (WebKit::WebPageProxy::reload):
        (WebKit::WebPageProxy::goToBackForwardItem):
        (WebKit::WebPageProxy::receivedNavigationPolicyDecision):
        (WebKit::WebPageProxy::sessionState const):
        (WebKit::checkIfNavigationContainsDataTransfer):
        (WebKit::WebPageProxy::didCommitLoadForFrame):
        (WebKit::WebPageProxy::decidePolicyForNavigationAction):
        (WebKit::WebPageProxy::contextMenuItemSelected):
        (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::processForNavigationInternal):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::assumeReadAccessToBaseURL):
        (WebKit::WebProcessProxy::checkURLReceivedFromWebProcess):
        * UIProcess/WebsiteData/Cocoa/WebsiteDataStoreCocoa.mm:
        (WebKit::WebsiteDataStore::platformSetNetworkParameters):
        (WebKit::WebsiteDataStore::initializeAppBoundDomains):
        * UIProcess/mac/LegacySessionStateCoding.cpp:
        (WebKit::decodeLegacySessionState):
        * WebProcess/ApplePay/WebPaymentCoordinator.cpp:
        (WebKit::WebPaymentCoordinator::validateMerchant):
        * WebProcess/InjectedBundle/API/c/WKBundleFrame.cpp:
        (WKBundleFrameAllowsFollowingLink):
        (WKBundleFrameCopySuggestedFilenameForResourceWithURL):
        (WKBundleFrameCopyMIMETypeForResourceWithURL):
        * WebProcess/InjectedBundle/API/c/WKBundlePage.cpp:
        (WKBundlePageHasLocalDataForURL):
        (WKBundlePageClearApplicationCacheForOrigin):
        (WKBundlePageGetAppCacheUsageForOrigin):
        * WebProcess/InjectedBundle/InjectedBundle.cpp:
        (WebKit::InjectedBundle::setUserStyleSheetLocation):
        * WebProcess/Storage/WebSWContextManagerConnection.cpp:
        (WebKit::isValidFetch):
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFormData):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::loadData):
        (WebKit::WebPage::loadAlternateHTML):
        (WebKit::WebPage::getResourceDataFromFrame):
        * webpushd/PushService.mm:
        (WebPushD::PushService::didReceivePushMessage):

2022-02-23  Chris Dumez  <cdumez@apple.com>

        Share more code between service and shared workers for context connection establishment
        https://bugs.webkit.org/show_bug.cgi?id=237085

        Reviewed by Youenn Fablet.

        Share more code between service and shared workers for context connection establishment.

        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::ensureSWServer):
        * NetworkProcess/SharedWorker/WebSharedWorker.cpp:
        (WebKit::WebSharedWorker::firstSharedWorkerObjectProcess const):
        * NetworkProcess/SharedWorker/WebSharedWorker.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.cpp:
        (WebKit::WebSharedWorkerServer::didFinishFetchingSharedWorkerScript):
        (WebKit::WebSharedWorkerServer::createContextConnection):
        (WebKit::WebSharedWorkerServer::removeContextConnection):
        (WebKit::WebSharedWorkerServer::shutDownSharedWorker):
        * NetworkProcess/SharedWorker/WebSharedWorkerServer.h:
        * NetworkProcess/SharedWorker/WebSharedWorkerServerToContextConnection.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::NetworkProcessProxy::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::NetworkProcessProxy::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::WebProcessPool::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        * UIProcess/WebProcessPool.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::establishRemoteWorkerContext):
        (WebKit::WebProcessProxy::establishServiceWorkerContext): Deleted.
        (WebKit::WebProcessProxy::establishSharedWorkerContext): Deleted.
        * UIProcess/WebProcessProxy.h:
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess):
        (WebKit::WebProcess::establishSharedWorkerContextConnectionToNetworkProcess): Deleted.
        (WebKit::WebProcess::establishServiceWorkerContextConnectionToNetworkProcess): Deleted.
        * WebProcess/WebProcess.h:
        * WebProcess/WebProcess.messages.in:

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        Prevent use of PDFKit when using PDF.js
        https://bugs.webkit.org/show_bug.cgi?id=237052
        rdar://89251696

        Reviewed by Tim Horton.

        PDFKit was still being used by embeds, this patch fixes that issue by treating
        pdf embeds as frames if PDF.js is enabled and also prevents the loading of
        the PDFKit plugin entirely by modifying shouldUsePDFPlugin.

        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::objectContentType):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::shouldUsePDFPlugin const):

2022-02-23  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] userHandle not marked nullable in _WKWebAuthenticationAssertionResponse
        https://bugs.webkit.org/show_bug.cgi?id=237043
        rdar://89317740

        Reviewed by Brent Fulgham.

        The userHandle is a nullable field on UserEntity. This patch changes
        various API/SPI to allow passing null userHandle.

        * Platform/spi/Cocoa/AuthenticationServicesCoreSPI.h:
        Update forward declared SPI, reflecting userHandle as nullable.
        * UIProcess/API/Cocoa/_WKAuthenticatorAssertionResponseInternal.h:
        * UIProcess/API/Cocoa/_WKWebAuthenticationAssertionResponse.h:
        Update userHandle property to null.
        * UIProcess/API/Cocoa/_WKWebAuthenticationPanel.mm:
        (getAllLocalAuthenticatorCredentialsImpl):
        * UIProcess/WebAuthentication/Cocoa/LocalAuthenticator.mm:
        (WebKit::LocalAuthenticatorInternal::getExistingCredentials):

2022-02-23  Philippe Normand  <pnormand@igalia.com>

        [GStreamer] De-initialize GStreamer before terminating WebProcess
        https://bugs.webkit.org/show_bug.cgi?id=237084

        Reviewed by Carlos Garcia Campos.

        Allowing the leak tracer to report/log leaks. There is an issue though, if the UIProcess
        exits too early, the leak tracer reporting will be interrupted potentially too early. The
        workaround is to have 2 tabs open in the GTK MiniBrowser, closing the one where media
        handling and leak tracing was done and keeping the second tab open.

        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::stopRunLoop):

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteSampleBufferDisplayLayer::enqueueSample should not change media samples owned by its object heap
        https://bugs.webkit.org/show_bug.cgi?id=237025
        <rdar://problem/89343447>

        Reviewed by Darin Adler.

        Updated https://commits.webkit.org/r290358 according comments given during review.

        * Platform/IPC/ArgumentCoders.h:
        (IPC::ArgumentCoder<std::nullptr_t>::encode):
        (IPC::ArgumentCoder<std::nullptr_t>::decode):
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        (WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameWriter::write):
        (WebKit::SharedVideoFrameReader::SharedVideoFrameReader):
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:
        (WebKit::SharedVideoFrame::encode const):
        (WebKit::SharedVideoFrame::decode):

2022-02-23  Alex Christensen  <achristensen@webkit.org>

        Call WKNavigationDelegate.didFailProvisionalNavigation even after a cross-origin navigation with COOP
        https://bugs.webkit.org/show_bug.cgi?id=237071
        <rdar://88652375>

        Reviewed by Chris Dumez.

        There was an assumption that this callback wasn't needed in this case, but it is.
        Covered by an API test that verifies the callback is received.

        * UIProcess/ProvisionalPageProxy.cpp:
        (WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame):

2022-02-23  Zan Dobersek  <zdobersek@igalia.com>

        [GLib] Add missing WebPage.h inclusion in WebProcessGLib.cpp
        https://bugs.webkit.org/show_bug.cgi?id=237081

        Unreviewed, adding the WebPage.h header inclusion in WebProcessGLib.cpp
        to avoid incomplete-type errors for the WebPage class under a certain
        combination of unified sources.

        * WebProcess/glib/WebProcessGLib.cpp:

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteVideoFrameObjectHeap::getVideoFrameBuffer can use base class pixelBuffer accessor
        https://bugs.webkit.org/show_bug.cgi?id=237020

        Reviewed by Kimmo Kinnunen.

        Make use of pixelBuffer virtual method to simplify things.
        Add a missing early return in case of not found pixel buffer.

        * GPUProcess/media/RemoteVideoFrameObjectHeap.cpp:
        (WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        Fix GPUP WebGL generator script wrt uninitialised sized span
        https://bugs.webkit.org/show_bug.cgi?id=235889

        Reviewed by Antti Koivisto.

        Regenerated.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat):

2022-02-23  Kimmo Kinnunen  <kkinnunen@apple.com>

        Thread safety analysis macros are confusing for non-Lock use-cases
        https://bugs.webkit.org/show_bug.cgi?id=237022

        Reviewed by Chris Dumez.

        Use WTF_GUARDED_BY_CAPABILITY instead of WTF_GUARDED_BY_LOCK
        for non-lock use-cases.

        * GPUProcess/graphics/RemoteGraphicsContextGL.h:
        * GPUProcess/graphics/RemoteRenderingBackend.h:
        * GPUProcess/graphics/WebGPU/RemoteGPU.h:
        * GPUProcess/media/RemoteVideoFrameObjectHeap.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:

2022-02-23  Pablo Saavedra  <psaavedra@igalia.com>

        [GTK][WPE] PlatformDisplay::terminateEglDisplays() is never called
        https://bugs.webkit.org/show_bug.cgi?id=217655

        Stop the run loop for GTK and WPE to ensure a normal exit, since we need
        atexit handlers to be called to cleanup resources like EGL displays.

        Reviewed by Carlos Garcia Campos.

        * Shared/AuxiliaryProcess.cpp:
        (WebKit::AuxiliaryProcess::didClose):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::initializeConnection):
        * WebProcess/WebProcess.h:
        * WebProcess/glib/WebProcessGLib.cpp:
        (WebKit::WebProcess::stopRunLoop):

2022-02-23  Youenn Fablet  <youenn@apple.com>

        RemoteSampleBufferDisplayLayer::enqueueSample should not change media samples owned by its object heap
        https://bugs.webkit.org/show_bug.cgi?id=237025

        Reviewed by Darin Adler.

        From past bugs, it is risky to change CMSampleBuffer dictionaries if they can be used on various threads (encoder, display layer...).
        Instead, we create a new MediaSample that is wrapping the same CVPixelBufferRef, on which can safely apply setAsDisplayImmediately.

        We introduce SharedVideoFrame as a replacement to RemoteVideoSample.
        We beef up SharedVideoFrameWriter and SharedVideoFrameReader to handle any MediaSample,
        with specific handling for remote frames, IOSurface frames or other in memory frames.
        We make use of SharedVideoFrame in SampleBufferDisplayLayer, which allows to unify enqueueSample and enqueueCV in one IPC message,
        which is easier to maintain.

        We update call sites that create SharedVideoFrameReader to either take nullptr or a object heap reference when they will need it in the future.

        Covered by existing tests.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * GPUProcess/webrtc/RemoteMediaRecorder.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.cpp:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.h:
        * GPUProcess/webrtc/RemoteSampleBufferDisplayLayer.messages.in:
        * WebProcess/GPU/webrtc/RemoteVideoFrameObjectHeapProxyProcessor.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.cpp:
        * WebProcess/GPU/webrtc/SampleBufferDisplayLayer.h:
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        * WebProcess/GPU/webrtc/SharedVideoFrame.h:

2022-02-23  Youenn Fablet  <youenn@apple.com>

        Optimize RemoteVideoFrame handling in WebProcess WebRTC pipeline
        https://bugs.webkit.org/show_bug.cgi?id=236970

        Reviewed by Eric Carlson.

        Fix bug in LibWebRTCCodecsProxy that would make use of shared video frame instead of remote video frame when a shared video frame is available.
        Use VideoFrame* as webrtc frame provider for encoding and decoding.

        * GPUProcess/webrtc/LibWebRTCCodecsProxy.mm:
        * WebProcess/GPU/media/RemoteVideoFrameProxy.h:
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:

2022-02-22  Chris Dumez  <cdumez@apple.com>

        http/wpt/push-api/onpush-disabled.html fails
        https://bugs.webkit.org/show_bug.cgi?id=236874
        <rdar://problem/89176154>

        Reviewed by Youenn Fablet.

        Before running the test, we would construct a new WKWebView with the Push API setting disabled.
        We would then run the test, which would launch a service worker. Normally, we would expect the
        service worker to inherit the settings from the WKWebView. However, it was not reliably
        happening because the settings for the service worker are stored on the WebProcessPool and
        WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess() was selecting a
        random WebProcessPool object (the first one returned by processPools()).

        To address the issue, we now pass the ProcessIdentifier of the client that requested the
        service worker connection so that establishServiceWorkerContextConnectionToNetworkProcess() can
        now prioritize the WebProcessPool of that process. Also, as an optimization, we now prioritize
        this client process to run the service worker (assuming it is origin-clean).

        * NetworkProcess/NetworkSession.cpp:
        (WebKit::NetworkSession::ensureSWServer):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::establishServiceWorkerContextConnectionToNetworkProcess):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/Network/NetworkProcessProxy.messages.in:
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::establishServiceWorkerContextConnectionToNetworkProcess):
        * UIProcess/WebProcessPool.h:

2022-02-22  Simon Fraser  <simon.fraser@apple.com>

        With DOM Rendering in GPU process, every display results in new IOSurface allocation
        https://bugs.webkit.org/show_bug.cgi?id=237063

        Reviewed by Tim Horton.

        We have to avoid ImageBufferRemoteIOSurfaceBackends in the web process from hanging on to
        an IOSurface MachSendRight (via ImageBufferBackendHandle) all the time, because doing so
        makes the IOSurface appear to be in-use, and therefore not eligible for swapping to,
        or making volatile. In particular, swapToValidFrontBuffer() would always think
        that the surfaces were in-use, resulting in permanent triple-buffering, and
        allocation of a new buffer on every swap.

        Fix by clearing the ImageBufferBackendHandles of all the buffers in the WP in
        RemoteRenderingBackendProxy::swapToValidFrontBuffer(), so that the GPUP can accurately
        gauge in-use-ness; we get back a handle to the new front buffer in the reply,
        and this is the only one we need to keep hold of, since it gets transferred to
        the UI process.

        * GPUProcess/graphics/RemoteRenderingBackend.cpp:
        (WebKit::RemoteRenderingBackend::markSurfaceNonVolatile):
        (WebKit::RemoteRenderingBackend::swapToValidFrontBuffer):
        * Shared/RemoteLayerTree/RemoteLayerBackingStore.mm:
        (WebKit::RemoteLayerBackingStore::display):
        * WebProcess/GPU/graphics/RemoteRenderingBackendProxy.cpp:
        (WebKit::RemoteRenderingBackendProxy::swapToValidFrontBuffer):
        (WebKit::RemoteRenderingBackendProxy::markSurfaceNonVolatile):

2022-02-22  Simon Fraser  <simon.fraser@apple.com>

        Use non-inline messages for layer volatility-related IPC in RemoteRenderingBackend
        https://bugs.webkit.org/show_bug.cgi?id=237061

        Reviewed by Wenson Hsieh.

        There appears to be a rare issue where StreamClientConnection::sendSync() can hang sometimes,
        which makes it impossible to do an entire MotionMark run (rdar://89313626). So avoid this
        by making the MarkSurfaceNonVolatile and SwapToValidFrontBuffer use out-of-line encoding.

        * GPUProcess/graphics/RemoteRenderingBackend.messages.in:

2022-02-22  Simon Lewis  <simon.lewis@apple.com>

        Further restrict received IPC boolean values to 0 or 1
        https://bugs.webkit.org/show_bug.cgi?id=236801
        rdar://85811396

        Reviewed by Chris Dumez.

        Return std::nullopt if a value larger than 1 is received.

        * Platform/IPC/ArgumentCoder.h:
        (IPC::ArgumentCoder<bool>::decode):

2022-02-22  Brent Fulgham  <bfulgham@apple.com>

        PingLoader is failing to call completion handler in error case
        https://bugs.webkit.org/show_bug.cgi?id=237062
        <rdar://50157253>

        Reviewed by Chris Dumez.

        The completion handler was not being called in the case of a PingLoad being redirected to
        a non-HTTP(S) scheme.

        * NetworkProcess/PingLoad.cpp:
        (WebKit::PingLoad::willPerformHTTPRedirection):

2022-02-22  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo][WK2] animations/background-position.html is timing out
        https://bugs.webkit.org/show_bug.cgi?id=236630

        Reviewed by Don Olmstead.

        r289848 was a wrong fix causing some test failures. It called the
        force repaint completion handler too early if m_waitDidUpdate was
        true when the force repaint was requested. In such case, we should
        wait for two DidUpdate messages before calling the completion
        handler.

        * WebProcess/WebPage/wc/DrawingAreaWC.cpp:
        (WebKit::DrawingAreaWC::forceRepaintAsync):
        (WebKit::DrawingAreaWC::didUpdate):
        * WebProcess/WebPage/wc/DrawingAreaWC.h:
        Added m_isForceRepaintCompletionHandlerDeferred flag.

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Clean up / optimize even more call sites constructing vectors
        https://bugs.webkit.org/show_bug.cgi?id=236852

        Reviewed by Darin Adler.

        * GPUProcess/media/RemoteMediaPlayerProxy.cpp:
        (WebKit::RemoteMediaPlayerProxy::outOfBandTrackSources):
        * GPUProcess/media/RemoteSourceBufferProxy.cpp:
        (WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDidReceiveInitializationSegment):
        (WebKit::RemoteSourceBufferProxy::updateTrackIds):
        * NetworkProcess/Classifier/WebResourceLoadStatisticsStore.cpp:
        (WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting):
        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::fetchDiskCacheEntries):
        * NetworkProcess/Notifications/NetworkNotificationManager.cpp:
        (WebKit::NetworkNotificationManager::getOriginsWithPushAndNotificationPermissions):
        * NetworkProcess/WebStorage/StorageManager.cpp:
        (WebKit::StorageManager::allStorageAreaIdentifiers const):
        * NetworkProcess/WebStorage/TransientLocalStorageNamespace.cpp:
        (WebKit::TransientLocalStorageNamespace::origins const):
        (WebKit::TransientLocalStorageNamespace::storageAreaIdentifiers const):
        * NetworkProcess/cache/CacheStorageEngineCache.cpp:
        (WebKit::CacheStorage::Cache::finishOpening):
        (WebKit::CacheStorage::Cache::keys const):
        * NetworkProcess/storage/SQLiteStorageArea.cpp:
        (WebKit::SQLiteStorageArea::SQLiteStorageArea):
        * Platform/IPC/ArgumentCoders.h:
        * Shared/ApplePay/WebPaymentCoordinatorProxy.cpp:
        (WebKit::WebPaymentCoordinatorProxy::showPaymentUI):
        * UIProcess/API/APINavigation.cpp:
        (API::Navigation::Navigation):
        (API::m_clientNavigationActivity):
        * UIProcess/Cocoa/WKShareSheet.mm:
        (appendFilesAsShareableURLs):
        * UIProcess/Cocoa/WebPageProxyCocoa.mm:
        (WebKit::WebPageProxy::restoreAppHighlightsAndScrollToIndex):
        * UIProcess/FrameLoadState.cpp:
        (WebKit::FrameLoadState::didFinishLoad):
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess):
        * UIProcess/UserContent/WebUserContentControllerProxy.cpp:
        (WebKit::WebUserContentControllerProxy::parameters const):
        * UIProcess/WebAuthentication/AuthenticatorManager.cpp:
        (WebKit::AuthenticatorManager::startDiscovery):
        * UIProcess/WebBackForwardList.cpp:
        (WebKit::WebBackForwardList::removeAllItems):
        (WebKit::WebBackForwardList::clear):
        * UIProcess/WebProcessPool.cpp:
        (WebKit::WebProcessPool::initializeNewWebProcess):
        (WebKit::WebProcessPool::removeProcessFromOriginCacheSet):
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch):
        * UIProcess/WebsiteData/WebsiteDataStore.cpp:
        (WebKit::WebsiteDataStore::fetchDataAndApply):
        (WebKit::WebsiteDataStore::removeData):
        * UIProcess/ios/TextCheckerIOS.mm:
        (WebKit::TextChecker::checkTextOfParagraph):
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant presentationRectForElementUsingClosestIndicatedRect]):
        * UIProcess/mac/TextCheckerMac.mm:
        (WebKit::TextChecker::checkTextOfParagraph):
        * WebProcess/ApplePay/WebPaymentCoordinator.cpp:
        (WebKit::WebPaymentCoordinator::showPaymentUI):
        * WebProcess/Automation/WebAutomationSessionProxy.cpp:
        (WebKit::WebAutomationSessionProxy::setFilesForInputFileUpload):
        * WebProcess/GPU/media/RemoteMediaPlayerManager.cpp:
        (WebKit::RemoteMediaPlayerManager::createRemoteMediaPlayer):
        * WebProcess/GPU/media/SourceBufferPrivateRemote.cpp:
        (WebKit::SourceBufferPrivateRemote::updateTrackIds):
        (WebKit::SourceBufferPrivateRemote::sourceBufferPrivateDidReceiveInitializationSegment):
        * WebProcess/GPU/webrtc/LibWebRTCCodecs.cpp:
        (WebKit::LibWebRTCCodecs::createEncoder):
        * WebProcess/InjectedBundle/API/c/WKBundlePageOverlay.cpp:
        * WebProcess/WebCoreSupport/SessionStateConversion.cpp:
        (WebKit::toFrameState):
        * WebProcess/WebCoreSupport/WebDeviceOrientationUpdateProvider.cpp:
        (WebKit::WebDeviceOrientationUpdateProvider::deviceOrientationChanged):
        (WebKit::WebDeviceOrientationUpdateProvider::deviceMotionChanged):
        * WebProcess/WebCoreSupport/WebPasteboardOverrides.cpp:
        (WebKit::WebPasteboardOverrides::overriddenTypes):
        * WebProcess/WebCoreSupport/WebSpeechSynthesisClient.cpp:
        (WebKit::WebSpeechSynthesisClient::voiceList):
        * WebProcess/WebPage/FindController.cpp:
        (WebKit::FindController::findStringMatches):
        * WebProcess/WebPage/WebFoundTextRangeController.cpp:
        (WebKit::WebFoundTextRangeController::drawRect):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::consumeSandboxExtensions):
        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::handleSelectionServiceClick):
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::fetchWebsiteData):

2022-02-22  Alex Christensen  <achristensen@webkit.org>

        Fix GPUP WebGL generator script wrt uninitialised sized span
        https://bugs.webkit.org/show_bug.cgi?id=235889
        <rdar://problem/88567612>

        Reviewed by Chris Dumez.

        Even though we check if the synchronous message was received successfully before using it,
        if we didn't check then we might have a problem with pointing to uninitialized memory, which we then wouldn't use for anything.
        To fix this hypothetical problem, I start out by pointing to initialized memory.

        * WebProcess/GPU/graphics/RemoteGraphicsContextGLProxyFunctionsGenerated.cpp:
        (WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat):

2022-02-22  J Pascoe  <j_pascoe@apple.com>

        [WebAuthn] Fix lifetime issue on iOS
        https://bugs.webkit.org/show_bug.cgi?id=237018
        rdar://89206950

        Reviewed by Brent Fulgham.

        Lifetime issues introduced in a recent refactor of performRequest were causing
        replies from WebAuthenticatorCoordinatorProxy_MakeCredentialReply not to make it
        back to the web content process. This patch fixes these, allowing requests to proceed.

        * UIProcess/WebAuthentication/Cocoa/WebAuthenticatorCoordinatorProxy.mm:
        (WebKit::continueAfterRequest):
        (WebKit::WebAuthenticatorCoordinatorProxy::performRequest): Deleted.
        (WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable): Deleted.
        (WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable): Deleted.
        * UIProcess/WebAuthentication/WebAuthenticatorCoordinatorProxy.h:

2022-02-22  Brent Fulgham  <bfulgham@apple.com>

        Remove an unneeded IOKit property
        https://bugs.webkit.org/show_bug.cgi?id=236867
        <rdar://47695155>

        Reviewed by Per Arne Vollan.

        The relevant frameworks that used the IOPlatformUUID IOKit
        property have been updated to no longer refer to it. We can
        now safely remove it.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.WebContent.sb.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2022-02-22  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Adopt new _UITextSearching method for range comparison
        https://bugs.webkit.org/show_bug.cgi?id=237012
        rdar://88442811

        Reviewed by Devin Rousso.

        * Platform/spi/ios/UIKitSPI.h:
        * UIProcess/API/ios/WKWebViewIOS.mm:
        (-[WKWebView offsetFromPosition:toPosition:inDocument:]):

        Mark deprecation.

        (-[WKWebView compareFoundRange:toRange:inDocument:]):
        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView compareFoundRange:toRange:inDocument:]):

        Implement the new comparison method using existing offset computation logic.

2022-02-22  Alexander Kanavin  <alex@linutronix.de>

        When building introspection files, add CMAKE_C_FLAGS to the compiler flags.
        https://bugs.webkit.org/show_bug.cgi?id=232936

        Reviewed by Michael Catanzaro.

        g-ir-compiler is using a C compiler internally, so it needs to set
        the proper flags for it.

        * PlatformGTK.cmake:

2022-02-22  Youenn Fablet  <youenn@apple.com>

        http/wpt/mediarecorder/mute-tracks.html fails with WebRTCRemoteVideoFrameEnabled=true
        https://bugs.webkit.org/show_bug.cgi?id=237021

        Reviewed by Kimmo Kinnunen.

        We were previously creating the black frame but still sending the remote read reference.
        On GPUProcess side, we were then encoding the real frame instead of the black/muted frame.
        Add a specific muted code path to fix the issue.

        Covered by updated test.

        * WebProcess/GPU/webrtc/MediaRecorderPrivate.cpp:
        (WebKit::MediaRecorderPrivate::videoSampleAvailable):
        * WebProcess/GPU/webrtc/SharedVideoFrame.cpp:
        (WebKit::SharedVideoFrameReader::read):

2022-02-22  Tim Nguyen  <ntim@apple.com>

        Rename RenderStyle::userSelectIncludingInert to RenderStyle::effectiveUserSelect
        https://bugs.webkit.org/show_bug.cgi?id=237033

        Reviewed by Antti Koivisto.

        This naming is consistent with other properties (effectiveDisplay/Appearance/PointerEvents/etc.).

        * WebProcess/InjectedBundle/DOM/InjectedBundleNodeHandle.cpp:
        (WebKit::InjectedBundleNodeHandle::isSelectableTextNode const):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::selectionPositionInformation):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings
        https://bugs.webkit.org/show_bug.cgi?id=236989

        Reviewed by Youenn Fablet.

        Move service worker and push API preference from RuntimeEnabledFeatures to Settings, since RuntimeEnabledFeatures is deprecated.

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _serviceWorkersEnabled:]):
        * WebProcess/Storage/WebServiceWorkerProvider.cpp:
        (WebKit::WebServiceWorkerProvider::serviceWorkerConnection):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::updateThrottleState):
        (WebKit::WebPage::updatePreferences):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events
        https://bugs.webkit.org/show_bug.cgi?id=236985

        Reviewed by Darin Adler.

        Avoid having to iterate the whole frame tree(s) every time we need to dispatch storage events,
        by keeping track of window objects interested in storage events. A Window object is interested
        in storage events if both of the following conditions is true:
        1. It has a Storage object (either localStorage or sessionStorage)
        2. It has a storage event listener registered.

        This patch also refactors the code so that we share more logic between WebKit1 and WebKit2.

        * WebProcess/WebStorage/StorageAreaImpl.cpp:
        (WebKit::StorageAreaImpl::setItem):
        (WebKit::StorageAreaImpl::removeItem):
        (WebKit::StorageAreaImpl::clear):
        * WebProcess/WebStorage/StorageAreaImpl.h:
        * WebProcess/WebStorage/StorageAreaMap.cpp:
        (WebKit::StorageAreaMap::setItem):
        (WebKit::StorageAreaMap::removeItem):
        (WebKit::StorageAreaMap::clear):
        (WebKit::StorageAreaMap::dispatchSessionStorageEvent):
        (WebKit::StorageAreaMap::dispatchLocalStorageEvent):
        (WebKit::framesForEventDispatching): Deleted.
        * WebProcess/WebStorage/StorageAreaMap.h:

2022-02-22  Kate Cheney  <katherine_cheney@apple.com>

        NSSharingServicePicker gets deallocated when using the standard share menu item
        https://bugs.webkit.org/show_bug.cgi?id=236998
        <rdar://problem/89174827>

        Reviewed by Wenson Hsieh.

        The NSMenuItem should keep the NSSharingServicePicker alive.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::getShareMenuItem):

2022-02-22  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Suspend web process after some time in the process cache
        https://bugs.webkit.org/show_bug.cgi?id=236971

        Reviewed by Michael Catanzaro.

        Implement platformSuspendProcess() and platformResumeProcess() for GTK and WPE ports.

        * UIProcess/WebProcessCache.cpp:
        (WebKit::WebProcessCache::addProcess):
        (WebKit::WebProcessCache::CachedProcess::CachedProcess):
        (WebKit::WebProcessCache::CachedProcess::~CachedProcess):
        (WebKit::WebProcessCache::CachedProcess::takeProcess):
        * UIProcess/WebProcessCache.h:
        * UIProcess/WebProcessProxy.h:
        * UIProcess/glib/WebProcessProxyGLib.cpp:
        (WebKit::WebProcessProxy::platformSuspendProcess):
        (WebKit::WebProcessProxy::platformResumeProcess):

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Allow adattributiond to start on iOS devices
        https://bugs.webkit.org/show_bug.cgi?id=237009
        <rdar://89062166>

        Reviewed by Per Arne Vollan.

        There were three more problems preventing it from starting:
        1. The code signature said to look for a sandbox profile with "webkit" in the name, but the profile had "WebKit" in the name.
           These names are case sensitive.
        2. The sandbox profile would not let it load the WebKit framework, so dyld would fail and the process would fail to launch.
           I added the framework directories that the XPC services are allowed to access.
        3. Once it started, it would crash inside WTF::initializeMainThread when calling WTF::pageSize which requires access to the hw.pagesize_compat syscall.
           As a starting point, I'm going to allow all the syscalls that the network process currently has access to,
           which is enough to get it to respond without crashing.
        4. We need access to com.apple.diagnosticd and com.apple.analyticsd in order to be able to generate crash reports.  This is quite useful.
        Yes, I know I said there were only three problems, but the 4th is so useful I thought I'd put it in the list.

        * Resources/SandboxProfiles/ios/com.apple.WebKit.adattributiond.sb:
        * Scripts/process-entitlements.sh:

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Improve const correctness for SecurityOrigin accessors
        https://bugs.webkit.org/show_bug.cgi?id=236983

        Reviewed by Chris Dumez.

        * UIProcess/Notifications/WebNotification.h:
        (WebKit::WebNotification::origin const):
        (WebKit::WebNotification::origin):

2022-02-21  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Adjust some behaviors around the "Markup Image" action in the callout bar
        https://bugs.webkit.org/show_bug.cgi?id=236980

        Reviewed by Aditya Keerthi.

        Adjust the following behaviors around the "Markup Image" callout bar item on iOS:
        1.  The item should be present as long as the selection range contains a single image item (not only if the
            selection range exactly encompasses a single image element.
        2.  The item should appear in the callout bar before other WebKit-client-provided menu controller items.

        This patch also adds a new API test to exercise these behaviors and, in doing so, also refactors logic around
        determining whether or not to show this item so that it's dependent on a WebKit internal feature instead of just
        the system feature flag (with the default value of the internal feature being equal to whether or not the system
        feature is enabled). This means we can run tests for these features without requiring the system feature flag to
        be enabled.

        See below for more details.

        Test: ImageAnalysisTests.MenuControllerItems

        * Platform/cocoa/TextRecognitionUtilities.mm:
        (WebKit::makeTextRecognitionResult):

        Drive-by fix for some API tests: only attempt to send the platform image analysis result over IPC if it is a
        `VKCImageAnalysis`. In some API tests, we use mock objects here instead, which currently causes the IPC message
        send to fail due to encoding failure.

        * Shared/Cocoa/WebPreferencesDefaultValuesCocoa.mm:
        (WebKit::defaultImageAnalysisMarkupEnabled):
        * Shared/WebPreferencesDefaultValues.h:

        Make the new internal feature flag default to the system feature flag.

        * UIProcess/ios/WKActionSheetAssistant.h:
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant defaultActionsForLinkSheet:]):
        (-[WKActionSheetAssistant defaultActionsForImageSheet:]):

        Consult a new delegate method (`-actionSheetAssistantShouldIncludeCopyCroppedImageAction:`) instead of checking
        the system feature flag directly.

        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView updateImageAnalysisMarkupMenuItems:]):

        Append the "Markup Image" item at the start of the list of additional menu items.

        (-[WKContentView canPerformImageAnalysisMarkup]):

        Check the internal feature instead of the system feature flag.

        (-[WKContentView performImageAnalysisMarkup:]):

        Now that this action can be triggered even when the current selection doens't encompass only a single image, we
        need to use `replaceWithPasteboardData()` instead, passing in the element context of the image element we want
        to replace.

        (-[WKContentView actionSheetAssistantShouldIncludeCopyCroppedImageAction:]):

        Only attempt to show the new items if the internal feature is enabled. Consulted by `WKActionSheetAssistant`
        above.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (WebKit::WebContextMenuProxyMac::setupServicesMenu):

        Check the internal feature instead of the system feature flag.

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::getPlatformEditorState const):

        Make a minor adjustment here to bail early only if we find multiple image elements in the selected range,
        rather than bailing if we find anything that's not an image element.

2022-02-21  Alexander Kanavin  <alex@linutronix.de>

        Fix racy parallel build of WebKit2-4.0.gir
        https://bugs.webkit.org/show_bug.cgi?id=232935

        Reviewed by Michael Catanzaro.

        This is a target and not a command because it's used to build another .gir
        and a .typelib, which would trigger two racy parallel builds when using command
        (e.g. command would run twice, target runs only once).

        * PlatformGTK.cmake:

2022-02-21  Myles C. Maxfield  <mmaxfield@apple.com>

        Sort WebCore and WebKit Xcode project files
        https://bugs.webkit.org/show_bug.cgi?id=237010

        Unreviewed.

        * WebKit.xcodeproj/project.pbxproj:

2022-02-21  Aditya Keerthi  <akeerthi@apple.com>

        [iOS] Fix the internal build after rdar://88354008
        https://bugs.webkit.org/show_bug.cgi?id=236999

        Unreviewed build fix.

        Mark deprecated implementations.

        * UIProcess/API/ios/WKWebViewIOS.mm:
        * UIProcess/ios/WKContentViewInteraction.mm:

== Rolled over to ChangeLog-2022-02-22 ==
